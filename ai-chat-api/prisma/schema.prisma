// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

enum PlanType {
  free
  pro
  enterprise
}

enum DocumentSourceType {
  pdf
  url
  markdown
  csv
  zendesk
  intercom
  manual
}

enum DocumentStatus {
  pending
  processing
  completed
  failed
}

enum Role {
  owner
  org_admin
  editor
  viewer
  api_user      // API専用ユーザー
  read_only     // 読み取り専用
}

enum Permission {
  // Organization management
  ORG_READ
  ORG_WRITE
  ORG_DELETE
  ORG_INVITE_USERS
  
  // Widget management
  WIDGET_READ
  WIDGET_WRITE
  WIDGET_DELETE
  WIDGET_CONFIGURE
  
  // Chat management
  CHAT_READ
  CHAT_MODERATE
  CHAT_EXPORT
  
  // Knowledge Base
  KB_READ
  KB_WRITE
  KB_DELETE
  KB_TRAIN
  
  // Analytics
  ANALYTICS_READ
  ANALYTICS_EXPORT
  
  // Settings
  SETTINGS_READ
  SETTINGS_WRITE
  BILLING_READ
  BILLING_WRITE
  
  // System admin
  SYSTEM_ADMIN
  AUDIT_READ
}

model Company {
  id                 String        @id @default(uuid())
  name               String
  email              String        @unique
  plan               PlanType      @default(free)
  organizationId     String?
  organization       Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  
  // Stripe billing fields
  stripeCustomerId   String?
  subscriptionId     String?
  subscriptionStatus String?       @default("inactive")
  tokenBalance       Int           @default(0)
  
  widgets            Widget[]
  users              User[]
  usage              Usage[]
  events             Event[]       // Event tracking
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  @@index([organizationId])
  @@index([stripeCustomerId])
  @@map("companies")
}

model Widget {
  id            String    @id @default(uuid())
  widgetKey     String    @unique
  name          String
  companyId     String
  company       Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  isActive      Boolean   @default(true)
  accentColor   String    @default("#007bff")
  logoUrl       String?
  
  // Theme settings (B-1)
  theme         String    @default("light") // light, dark, auto
  primaryColor  String    @default("#007bff")
  secondaryColor String   @default("#6c757d")
  backgroundColor String  @default("#ffffff")
  textColor     String    @default("#212529")
  borderRadius  Int       @default(8) // in pixels
  fontFamily    String    @default("system-ui")
  
  chatLogs      ChatLog[]
  events        Event[]   // Event tracking
  knowledgeBases KnowledgeBase[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([widgetKey])
  @@index([companyId])
  @@index([isActive])
  @@map("widgets")
}

model User {
  id              String   @id @default(uuid())
  email           String   @unique
  password        String
  name            String?
  
  // Legacy admin field (to be migrated)
  isAdmin         Boolean  @default(false)
  
  // New role system
  roles           Role[]   @default([viewer])
  
  // Organization membership
  organizationId  String?
  organization    Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  
  companyId       String?
  company         Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  chatLogs        ChatLog[]
  events          Event[]  // Event tracking
  messageFeedback MessageFeedback[]
  passwordResets  PasswordReset[]
  emailVerifications EmailVerification[]
  notifications   Notification[]
  permissionOverrides UserPermissionOverride[]
  securityAuditLogs   SecurityAuditLog[]
  dataAccessLogs      DataAccessLog[]
  invitations     UserInvitation[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([email])
  @@index([companyId])
  @@index([organizationId])
  @@map("users")
}

model FAQ {
  id             String       @id @default(uuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  question       String
  answer         String       @db.Text
  weight         Int          @default(0)  // For ordering and prioritization
  isActive       Boolean      @default(true)
  
  // Vector embedding for semantic search
  embedding      Unsupported("vector(1536)")?
  
  // Usage statistics
  timesUsed      Int          @default(0)
  lastUsedAt     DateTime?
  
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
  @@index([isActive])
  @@index([weight])
  @@index([timesUsed])
  @@map("faqs")
}

model ChatLog {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  widgetId  String?
  widget    Widget?  @relation(fields: [widgetId], references: [id], onDelete: SetNull)
  question  String
  answer    String
  tokens    Int?     @default(0) // Usage tracking for billing
  createdAt DateTime @default(now())
  
  feedback  MessageFeedback[]

  @@index([userId])
  @@index([widgetId])
  @@index([createdAt])
  @@map("chat_logs")
}

// Usage tracking for billing (A-6)
model Usage {
  id        String   @id @default(uuid())
  companyId String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  date      DateTime @db.Date
  messages  Int      @default(0)
  tokens    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, date])
  @@index([companyId])
  @@index([date])
  @@map("usage")
}

// Organization support (A-4)
model Organization {
  id              String           @id @default(uuid())
  name            String
  slug            String           @unique
  
  // Dashboard layout settings
  settings        Json?            @default("{\"dashboard\":{\"layout\":[]}}")
  
  users           User[]           // Organization members
  companies       Company[]
  knowledgeBases  KnowledgeBase[]
  faqs            FAQ[]
  linkRules       LinkRule[]
  unansweredMessages UnansweredMessage[]
  apiKeys              APIKey[]
  notificationSettings NotificationSettings?
  notifications        Notification[]
  webhooks             Webhook[]
  dataRetentionPolicy  DataRetentionPolicy?
  dataRetentionJobs    DataRetentionJob[]
  permissionOverrides UserPermissionOverride[]
  securityAuditLogs   SecurityAuditLog[]
  dataAccessLogs      DataAccessLog[]
  apiCredentials      ApiCredentials[]
  invitations     UserInvitation[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([slug])
  @@map("organizations")
}

// Event tracking for analytics (B-3)
model Event {
  id         String   @id @default(uuid())
  companyId  String
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  widgetId   String?
  widget     Widget?  @relation(fields: [widgetId], references: [id], onDelete: SetNull)
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Event details
  eventType  String   // identify, message_sent, conversion, widget_loaded, etc.
  eventName  String?  // Custom event name
  properties Json?    // Event properties as JSON
  
  // User identification
  anonymousId String? // For anonymous users
  sessionId   String? // Session tracking
  
  // Context
  userAgent   String?
  ipAddress   String?
  referrer    String?
  pageUrl     String?
  
  createdAt   DateTime @default(now())

  @@index([companyId])
  @@index([widgetId])
  @@index([userId])
  @@index([eventType])
  @@index([createdAt])
  @@index([sessionId])
  @@map("events")
}

// F-1: Knowledge Base Models

model KnowledgeBase {
  id             String   @id @default(cuid())
  widgetId       String
  organizationId String
  name           String
  type           String   // file, url, text
  source         String   // S3 path or URL
  content        String?  @db.Text
  status         String   // pending, processing, completed, failed
  chunks         Int      @default(0)
  vectors        Json?    // Vector IDs array
  metadata       Json?
  error          String?
  createdAt      DateTime @default(now())
  processedAt    DateTime?
  
  widget         Widget       @relation(fields: [widgetId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  
  @@index([widgetId])
  @@index([organizationId])
  @@index([status])
  @@map("knowledge_bases")
}


model LinkRule {
  id             String       @id @default(uuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  name           String
  triggerRegex   String       // Regex pattern to match user messages
  targetUrl      String       // URL to link to
  newTab         Boolean      @default(true)
  description    String?
  isActive       Boolean      @default(true)
  
  // Analytics
  clickCount     Int          @default(0)
  lastClickedAt  DateTime?
  
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
  @@index([isActive])
  @@map("link_rules")
}

// F-6: Unanswered message tracking for FAQ suggestions
model UnansweredMessage {
  id             String       @id @default(uuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  message        String
  count          Int          @default(1)  // How many times this question was asked
  confidence     Float?       // AI confidence score (0-1)
  
  // Suggested FAQ generation
  suggestedQuestion String?
  suggestedAnswer   String?    @db.Text
  isProcessed       Boolean    @default(false)
  
  firstAskedAt   DateTime
  lastAskedAt    DateTime     @default(now())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
  @@index([isProcessed])
  @@index([count])
  @@index([lastAskedAt])
  @@map("unanswered_messages")
}

// Section-2: Training Feedback Loop
model MessageFeedback {
  id         String   @id @default(cuid())
  chatLogId  String
  helpful    Boolean
  feedback   String?  @db.Text
  userId     String
  createdAt  DateTime @default(now())
  
  chatLog    ChatLog  @relation(fields: [chatLogId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  
  @@index([chatLogId])
  @@index([userId])
  @@index([helpful])
  @@map("message_feedback")
}

// Section-5: Authentication Flow Models
model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([token])
  @@map("password_resets")
}

model EmailVerification {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([token])
  @@map("email_verifications")
}

model UserInvitation {
  id             String   @id @default(cuid())
  email          String
  name           String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invitedById    String
  invitedBy      User     @relation(fields: [invitedById], references: [id])
  token          String   @unique
  roles          Role[]   @default([viewer])
  expiresAt      DateTime
  acceptedAt     DateTime?
  createdAt      DateTime @default(now())
  
  @@unique([email, organizationId])
  @@index([token])
  @@index([email])
  @@index([organizationId])
  @@map("user_invitations")
}

// Section-6: Settings Suite Models
model APIKey {
  id          String   @id @default(cuid())
  name        String
  key         String   @unique
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  lastUsed    DateTime?
  createdAt   DateTime @default(now())
  
  @@index([organizationId])
  @@index([key])
  @@map("api_keys")
}

model NotificationSettings {
  id             String   @id @default(cuid())
  organizationId String   @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  settings       Json     @default("{}")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@map("notification_settings")
}

// Section-11: Webhook Suite Models
model Webhook {
  id             String   @id @default(cuid())
  name           String
  url            String
  secret         String
  events         String[] // ['chat.created', 'user.created', 'widget.updated', etc.]
  isActive       Boolean  @default(true)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  headers        Json?    // Optional custom headers
  retryCount     Int      @default(3)
  timeoutMs      Int      @default(30000) // 30 seconds
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  logs           WebhookLog[]
  
  @@index([organizationId])
  @@index([isActive])
  @@map("webhooks")
}

model WebhookLog {
  id          String   @id @default(cuid())
  webhookId   String
  webhook     Webhook  @relation(fields: [webhookId], references: [id], onDelete: Cascade)
  event       String
  payload     Json
  status      String   // 'success', 'failed', 'pending'
  statusCode  Int?
  response    String?  @db.Text
  error       String?  @db.Text
  attempts    Int      @default(1)
  createdAt   DateTime @default(now())
  executedAt  DateTime @default(now()) // Added for data retention cleanup
  completedAt DateTime?
  
  @@index([webhookId])
  @@index([status])
  @@index([createdAt])
  @@map("webhook_logs")
}

model Notification {
  id             String   @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String?
  user           User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  type           String   // 'chat', 'alert', 'usage', 'report'
  title          String
  message        String   @db.Text
  read           Boolean  @default(false)
  data           Json?    // Additional context data
  createdAt      DateTime @default(now())
  
  @@index([organizationId])
  @@index([userId])
  @@index([read])
  @@index([createdAt])
  @@map("notifications")
}

// Section-12: System Health Models
model SystemMetric {
  id            String   @id @default(cuid())
  service       String   // 'api', 'database', 'redis', 'vector_db', 'external_api'
  metricType    String   // 'response_time', 'cpu', 'memory', 'disk', 'connection_count'
  value         Float
  unit          String   // 'ms', 'percent', 'mb', 'count'
  metadata      Json?    // Additional context data
  timestamp     DateTime @default(now())
  
  @@index([service])
  @@index([metricType])
  @@index([timestamp])
  @@map("system_metrics")
}

model HealthCheck {
  id            String   @id @default(cuid())
  service       String   // 'api', 'database', 'redis', 'vector_db', 'external_api'
  status        String   // 'healthy', 'degraded', 'unhealthy'
  responseTime  Int      // in milliseconds
  message       String?
  details       Json?    // Detailed check results
  checkedAt     DateTime @default(now())
  
  @@index([service])
  @@index([status])
  @@index([checkedAt])
  @@map("health_checks")
}

model Incident {
  id            String   @id @default(cuid())
  title         String
  description   String   @db.Text
  severity      String   // 'low', 'medium', 'high', 'critical'
  status        String   // 'investigating', 'identified', 'monitoring', 'resolved'
  affectedServices String[] // Array of affected service names
  createdAt     DateTime @default(now())
  resolvedAt    DateTime?
  
  updates       IncidentUpdate[]
  
  @@index([status])
  @@index([severity])
  @@index([createdAt])
  @@map("incidents")
}

model IncidentUpdate {
  id          String   @id @default(cuid())
  incidentId  String
  incident    Incident @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  status      String   // New status
  message     String   @db.Text
  createdBy   String?  // User ID who created the update
  createdAt   DateTime @default(now())
  
  @@index([incidentId])
  @@index([createdAt])
  @@map("incident_updates")
}

// Section-15: Data Retention Models
model DataRetentionPolicy {
  id             String   @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Retention periods (in days)
  chatLogs       Int      @default(365)    // 1 year
  messageFeedback Int     @default(730)    // 2 years
  systemMetrics  Int      @default(90)     // 3 months
  webhookLogs    Int      @default(30)     // 1 month
  healthChecks   Int      @default(7)      // 1 week
  auditLogs      Int      @default(2555)   // 7 years (compliance)
  
  // Auto-deletion settings
  autoDelete     Boolean  @default(true)
  anonymizeData  Boolean  @default(false)  // Anonymize instead of delete
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@unique([organizationId])
  @@map("data_retention_policies")
}

model DataRetentionJob {
  id             String   @id @default(cuid())
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  jobType        String   // 'chat_logs', 'metrics', 'webhooks', etc.
  status         String   // 'pending', 'running', 'completed', 'failed'
  itemsProcessed Int      @default(0)
  itemsDeleted   Int      @default(0)
  itemsAnonymized Int     @default(0)
  
  startedAt      DateTime?
  completedAt    DateTime?
  error          String?
  metadata       Json?    // Additional job context
  
  createdAt      DateTime @default(now())
  
  @@index([organizationId])
  @@index([jobType])
  @@index([status])
  @@index([createdAt])
  @@map("data_retention_jobs")
}

// Section-16: Security Models
model RolePermission {
  id         String     @id @default(cuid())
  role       Role
  permission Permission
  
  @@unique([role, permission])
  @@map("role_permissions")
}

model UserPermissionOverride {
  id           String     @id @default(cuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  permission   Permission
  granted      Boolean    // true = grant, false = revoke
  createdAt    DateTime   @default(now())
  createdBy    String
  
  @@unique([userId, organizationId, permission])
  @@index([userId])
  @@index([organizationId])
  @@map("user_permission_overrides")
}

model SecurityAuditLog {
  id             String   @id @default(cuid())
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String?
  user           User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  action         String   // "login", "permission_change", "data_access", etc.
  resource       String?  // Resource being accessed
  resourceId     String?  // ID of the resource
  
  success        Boolean
  ipAddress      String?
  userAgent      String?
  
  details        Json?    // Additional context
  risk_level     String   @default("low") // "low", "medium", "high", "critical"
  
  createdAt      DateTime @default(now())
  
  @@index([organizationId])
  @@index([userId])
  @@index([action])
  @@index([success])
  @@index([risk_level])
  @@index([createdAt])
  @@map("security_audit_logs")
}

model DataAccessLog {
  id             String   @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String?
  user           User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  table_name     String   // "chat_logs", "knowledge_bases", etc.
  operation      String   // "SELECT", "INSERT", "UPDATE", "DELETE"
  record_ids     String[] // Array of affected record IDs
  query_hash     String?  // Hash of the executed query
  
  createdAt      DateTime @default(now())
  
  @@index([organizationId])
  @@index([userId])
  @@index([table_name])
  @@index([operation])
  @@index([createdAt])
  @@map("data_access_logs")
}

// Section-17: API Credentials (Encrypted)
model ApiCredentials {
  id             String   @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  service        String   // "openai", "stripe", "zendesk", "intercom", etc.
  name           String   // Display name for the credentials
  encryptedData  String   @db.Text // Encrypted JSON containing the actual credentials
  
  // Metadata
  lastUsed       DateTime?
  lastRotated    DateTime?
  expiresAt      DateTime?
  isActive       Boolean  @default(true)
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@unique([organizationId, service, name])
  @@index([organizationId])
  @@index([service])
  @@index([isActive])
  @@map("api_credentials")
}
