// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

enum PlanType {
  free
  pro
  enterprise
}

enum DocumentSourceType {
  pdf
  url
  markdown
  csv
  zendesk
  intercom
  manual
}

enum DocumentStatus {
  pending
  processing
  completed
  failed
}

enum Role {
  owner
  org_admin
  editor
  viewer
}

model Company {
  id                 String        @id @default(uuid())
  name               String
  email              String        @unique
  plan               PlanType      @default(free)
  organizationId     String?
  organization       Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  
  // Stripe billing fields
  stripeCustomerId   String?
  subscriptionId     String?
  subscriptionStatus String?       @default("inactive")
  tokenBalance       Int           @default(0)
  
  widgets            Widget[]
  users              User[]
  usage              Usage[]
  events             Event[]       // Event tracking
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  @@index([organizationId])
  @@index([stripeCustomerId])
  @@map("companies")
}

model Widget {
  id            String    @id @default(uuid())
  widgetKey     String    @unique
  name          String
  companyId     String
  company       Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  isActive      Boolean   @default(true)
  accentColor   String    @default("#007bff")
  logoUrl       String?
  
  // Theme settings (B-1)
  theme         String    @default("light") // light, dark, auto
  primaryColor  String    @default("#007bff")
  secondaryColor String   @default("#6c757d")
  backgroundColor String  @default("#ffffff")
  textColor     String    @default("#212529")
  borderRadius  Int       @default(8) // in pixels
  fontFamily    String    @default("system-ui")
  
  chatLogs      ChatLog[]
  events        Event[]   // Event tracking
  knowledgeBases KnowledgeBase[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([widgetKey])
  @@index([companyId])
  @@index([isActive])
  @@map("widgets")
}

model User {
  id              String   @id @default(uuid())
  email           String   @unique
  password        String
  name            String?
  
  // Legacy admin field (to be migrated)
  isAdmin         Boolean  @default(false)
  
  // New role system
  roles           Role[]   @default([viewer])
  
  // Organization membership
  organizationId  String?
  organization    Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  
  companyId       String?
  company         Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  chatLogs        ChatLog[]
  events          Event[]  // Event tracking
  messageFeedback MessageFeedback[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([email])
  @@index([companyId])
  @@index([organizationId])
  @@map("users")
}

model FAQ {
  id             String       @id @default(uuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  question       String
  answer         String       @db.Text
  weight         Int          @default(0)  // For ordering and prioritization
  isActive       Boolean      @default(true)
  
  // Vector embedding for semantic search
  embedding      Unsupported("vector(1536)")?
  
  // Usage statistics
  timesUsed      Int          @default(0)
  lastUsedAt     DateTime?
  
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
  @@index([isActive])
  @@index([weight])
  @@index([timesUsed])
  @@map("faqs")
}

model ChatLog {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  widgetId  String?
  widget    Widget?  @relation(fields: [widgetId], references: [id], onDelete: SetNull)
  question  String
  answer    String
  tokens    Int?     @default(0) // Usage tracking for billing
  createdAt DateTime @default(now())
  
  feedback  MessageFeedback[]

  @@index([userId])
  @@index([widgetId])
  @@index([createdAt])
  @@map("chat_logs")
}

// Usage tracking for billing (A-6)
model Usage {
  id        String   @id @default(uuid())
  companyId String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  date      DateTime @db.Date
  messages  Int      @default(0)
  tokens    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, date])
  @@index([companyId])
  @@index([date])
  @@map("usage")
}

// Organization support (A-4)
model Organization {
  id              String           @id @default(uuid())
  name            String
  slug            String           @unique
  
  // Dashboard layout settings
  settings        Json?            @default("{\"dashboard\":{\"layout\":[]}}")
  
  users           User[]           // Organization members
  companies       Company[]
  knowledgeBases  KnowledgeBase[]
  faqs            FAQ[]
  linkRules       LinkRule[]
  unansweredMessages UnansweredMessage[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([slug])
  @@map("organizations")
}

// Event tracking for analytics (B-3)
model Event {
  id         String   @id @default(uuid())
  companyId  String
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  widgetId   String?
  widget     Widget?  @relation(fields: [widgetId], references: [id], onDelete: SetNull)
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Event details
  eventType  String   // identify, message_sent, conversion, widget_loaded, etc.
  eventName  String?  // Custom event name
  properties Json?    // Event properties as JSON
  
  // User identification
  anonymousId String? // For anonymous users
  sessionId   String? // Session tracking
  
  // Context
  userAgent   String?
  ipAddress   String?
  referrer    String?
  pageUrl     String?
  
  createdAt   DateTime @default(now())

  @@index([companyId])
  @@index([widgetId])
  @@index([userId])
  @@index([eventType])
  @@index([createdAt])
  @@index([sessionId])
  @@map("events")
}

// F-1: Knowledge Base Models

model KnowledgeBase {
  id             String   @id @default(cuid())
  widgetId       String
  organizationId String
  name           String
  type           String   // file, url, text
  source         String   // S3 path or URL
  content        String?  @db.Text
  status         String   // pending, processing, completed, failed
  chunks         Int      @default(0)
  vectors        Json?    // Vector IDs array
  metadata       Json?
  error          String?
  createdAt      DateTime @default(now())
  processedAt    DateTime?
  
  widget         Widget       @relation(fields: [widgetId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  
  @@index([widgetId])
  @@index([organizationId])
  @@index([status])
  @@map("knowledge_bases")
}


model LinkRule {
  id             String       @id @default(uuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  name           String
  triggerRegex   String       // Regex pattern to match user messages
  targetUrl      String       // URL to link to
  newTab         Boolean      @default(true)
  description    String?
  isActive       Boolean      @default(true)
  
  // Analytics
  clickCount     Int          @default(0)
  lastClickedAt  DateTime?
  
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
  @@index([isActive])
  @@map("link_rules")
}

// F-6: Unanswered message tracking for FAQ suggestions
model UnansweredMessage {
  id             String       @id @default(uuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  message        String
  count          Int          @default(1)  // How many times this question was asked
  confidence     Float?       // AI confidence score (0-1)
  
  // Suggested FAQ generation
  suggestedQuestion String?
  suggestedAnswer   String?    @db.Text
  isProcessed       Boolean    @default(false)
  
  firstAskedAt   DateTime
  lastAskedAt    DateTime     @default(now())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
  @@index([isProcessed])
  @@index([count])
  @@index([lastAskedAt])
  @@map("unanswered_messages")
}

// Section-2: Training Feedback Loop
model MessageFeedback {
  id         String   @id @default(cuid())
  chatLogId  String
  helpful    Boolean
  feedback   String?  @db.Text
  userId     String
  createdAt  DateTime @default(now())
  
  chatLog    ChatLog  @relation(fields: [chatLogId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  
  @@index([chatLogId])
  @@index([userId])
  @@index([helpful])
  @@map("message_feedback")
}
