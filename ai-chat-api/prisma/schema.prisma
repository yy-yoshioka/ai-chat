// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PlanType {
  free
  pro
  enterprise
}

model Company {
  id                 String        @id @default(uuid())
  name               String
  email              String        @unique
  plan               PlanType      @default(free)
  organizationId     String?
  organization       Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  
  // Stripe billing fields
  stripeCustomerId   String?
  subscriptionId     String?
  subscriptionStatus String?       @default("inactive")
  tokenBalance       Int           @default(0)
  
  widgets            Widget[]
  users              User[]
  usage              Usage[]
  events             Event[]       // Event tracking
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  @@index([organizationId])
  @@index([stripeCustomerId])
  @@map("companies")
}

model Widget {
  id            String    @id @default(uuid())
  widgetKey     String    @unique
  name          String
  companyId     String
  company       Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  isActive      Boolean   @default(true)
  accentColor   String    @default("#007bff")
  logoUrl       String?
  
  // Theme settings (B-1)
  theme         String    @default("light") // light, dark, auto
  primaryColor  String    @default("#007bff")
  secondaryColor String   @default("#6c757d")
  backgroundColor String  @default("#ffffff")
  textColor     String    @default("#212529")
  borderRadius  Int       @default(8) // in pixels
  fontFamily    String    @default("system-ui")
  
  chatLogs      ChatLog[]
  events        Event[]   // Event tracking
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([widgetKey])
  @@index([companyId])
  @@index([isActive])
  @@map("widgets")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  isAdmin   Boolean  @default(false)
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  chatLogs  ChatLog[]
  events    Event[]  // Event tracking
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([companyId])
  @@map("users")
}

model FAQ {
  id        String   @id @default(uuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faqs")
}

model ChatLog {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  widgetId  String?
  widget    Widget?  @relation(fields: [widgetId], references: [id], onDelete: SetNull)
  question  String
  answer    String
  tokens    Int?     @default(0) // Usage tracking for billing
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([widgetId])
  @@index([createdAt])
  @@map("chat_logs")
}

// Usage tracking for billing (A-6)
model Usage {
  id        String   @id @default(uuid())
  companyId String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  date      DateTime @db.Date
  messages  Int      @default(0)
  tokens    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, date])
  @@index([companyId])
  @@index([date])
  @@map("usage")
}

// Organization support (A-4)
model Organization {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  companies Company[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
  @@map("organizations")
}

// Event tracking for analytics (B-3)
model Event {
  id         String   @id @default(uuid())
  companyId  String
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  widgetId   String?
  widget     Widget?  @relation(fields: [widgetId], references: [id], onDelete: SetNull)
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Event details
  eventType  String   // identify, message_sent, conversion, widget_loaded, etc.
  eventName  String?  // Custom event name
  properties Json?    // Event properties as JSON
  
  // User identification
  anonymousId String? // For anonymous users
  sessionId   String? // Session tracking
  
  // Context
  userAgent   String?
  ipAddress   String?
  referrer    String?
  pageUrl     String?
  
  createdAt   DateTime @default(now())

  @@index([companyId])
  @@index([widgetId])
  @@index([userId])
  @@index([eventType])
  @@index([createdAt])
  @@index([sessionId])
  @@map("events")
}
