{"version":3,"names":["prisma_1","cov_2k031zv9pc","s","require","stripe_1","trackUsage","data","f","date","b","Date","dateOnly","getFullYear","getMonth","getDate","prisma","usage","upsert","where","companyId_date","companyId","update","messages","increment","tokens","updatedAt","create","console","log","error","exports","getCurrentMonthUsage","now","startOfMonth","endOfMonth","findMany","gte","lte","reduce","total","daily","checkUsageLimits","company","findUnique","id","Error","currentUsage","planLimits","PRICING_PLANS","plan","messageLimit","monthlyMessages","tokenLimit","monthlyTokens","tokenBalance","used","limit","exceeded","percentage","Math","round","deductTokens","tokenAmount","newBalance","generateUsageReport","startDate","endDate","orderBy","totalUsage","select","name","period","start","end","dailyUsage","createUsageTrackingMiddleware","req","res","next","__awaiter","originalSend","send","setImmediate","_a","widget","responseText","JSON","stringify","estimatedTokens","ceil","length","call"],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/lib/usageTracker.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { prisma } from './prisma';\nimport { PRICING_PLANS } from './stripe';\n\nexport interface UsageData {\n  companyId: string;\n  messages: number;\n  tokens: number;\n  date?: Date;\n}\n\ninterface UsageRequest extends Request {\n  companyId?: string;\n  widget?: {\n    companyId: string;\n  };\n}\n\n/**\n * Track usage for a company\n */\nexport async function trackUsage(data: UsageData) {\n  const date = data.date || new Date();\n  const dateOnly = new Date(\n    date.getFullYear(),\n    date.getMonth(),\n    date.getDate()\n  );\n\n  try {\n    // Upsert usage record for the day\n    await prisma.usage.upsert({\n      where: {\n        companyId_date: {\n          companyId: data.companyId,\n          date: dateOnly,\n        },\n      },\n      update: {\n        messages: {\n          increment: data.messages,\n        },\n        tokens: {\n          increment: data.tokens,\n        },\n        updatedAt: new Date(),\n      },\n      create: {\n        companyId: data.companyId,\n        date: dateOnly,\n        messages: data.messages,\n        tokens: data.tokens,\n      },\n    });\n\n    console.log(\n      `Usage tracked for company ${data.companyId}: ${data.messages} messages, ${data.tokens} tokens`\n    );\n  } catch (error) {\n    console.error('Failed to track usage:', error);\n    throw error;\n  }\n}\n\n/**\n * Get current month usage for a company\n */\nexport async function getCurrentMonthUsage(companyId: string) {\n  const now = new Date();\n  const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n  const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0);\n\n  const usage = await prisma.usage.findMany({\n    where: {\n      companyId,\n      date: {\n        gte: startOfMonth,\n        lte: endOfMonth,\n      },\n    },\n  });\n\n  return usage.reduce(\n    (total, daily) => ({\n      messages: total.messages + daily.messages,\n      tokens: total.tokens + daily.tokens,\n    }),\n    { messages: 0, tokens: 0 }\n  );\n}\n\n/**\n * Check if company has exceeded usage limits\n */\nexport async function checkUsageLimits(companyId: string) {\n  const company = await prisma.company.findUnique({\n    where: { id: companyId },\n  });\n\n  if (!company) {\n    throw new Error('Company not found');\n  }\n\n  const currentUsage = await getCurrentMonthUsage(companyId);\n  const planLimits = PRICING_PLANS[company.plan];\n\n  const messageLimit = planLimits.monthlyMessages;\n  const tokenLimit = planLimits.monthlyTokens + (company.tokenBalance || 0);\n\n  return {\n    messages: {\n      used: currentUsage.messages,\n      limit: messageLimit,\n      exceeded: currentUsage.messages >= messageLimit,\n      percentage: Math.round((currentUsage.messages / messageLimit) * 100),\n    },\n    tokens: {\n      used: currentUsage.tokens,\n      limit: tokenLimit,\n      exceeded: currentUsage.tokens >= tokenLimit,\n      percentage: Math.round((currentUsage.tokens / tokenLimit) * 100),\n    },\n  };\n}\n\n/**\n * Deduct tokens from company balance\n */\nexport async function deductTokens(companyId: string, tokenAmount: number) {\n  const company = await prisma.company.findUnique({\n    where: { id: companyId },\n  });\n\n  if (!company) {\n    throw new Error('Company not found');\n  }\n\n  const newBalance = (company.tokenBalance || 0) - tokenAmount;\n\n  if (newBalance < 0) {\n    throw new Error('Insufficient token balance');\n  }\n\n  await prisma.company.update({\n    where: { id: companyId },\n    data: {\n      tokenBalance: newBalance,\n    },\n  });\n\n  return newBalance;\n}\n\n/**\n * Generate usage report for billing\n */\nexport async function generateUsageReport(\n  companyId: string,\n  startDate: Date,\n  endDate: Date\n) {\n  const usage = await prisma.usage.findMany({\n    where: {\n      companyId,\n      date: {\n        gte: startDate,\n        lte: endDate,\n      },\n    },\n    orderBy: {\n      date: 'asc',\n    },\n  });\n\n  const totalUsage = usage.reduce(\n    (total, daily) => ({\n      messages: total.messages + daily.messages,\n      tokens: total.tokens + daily.tokens,\n    }),\n    { messages: 0, tokens: 0 }\n  );\n\n  const company = await prisma.company.findUnique({\n    where: { id: companyId },\n    select: {\n      name: true,\n      plan: true,\n    },\n  });\n\n  return {\n    company,\n    period: {\n      start: startDate,\n      end: endDate,\n    },\n    totalUsage,\n    dailyUsage: usage,\n    planLimits: company ? PRICING_PLANS[company.plan] : null,\n  };\n}\n\n/**\n * Middleware to track API usage\n */\nexport function createUsageTrackingMiddleware() {\n  return async (req: UsageRequest, res: Response, next: NextFunction) => {\n    const originalSend = res.send;\n\n    res.send = function (data: string | object) {\n      // Track usage after response is sent\n      setImmediate(async () => {\n        try {\n          const companyId = req.companyId || req.widget?.companyId;\n\n          if (companyId) {\n            // Estimate token usage based on response length\n            const responseText =\n              typeof data === 'string' ? data : JSON.stringify(data);\n            const estimatedTokens = Math.ceil(responseText.length / 4); // Rough estimate: 4 chars per token\n\n            await trackUsage({\n              companyId,\n              messages: 1,\n              tokens: estimatedTokens,\n            });\n          }\n        } catch (error) {\n          console.error('Usage tracking middleware error:', error);\n        }\n      });\n\n      return originalSend.call(this, data);\n    };\n\n    next();\n  };\n}\n"],"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","ignoreList":[]}