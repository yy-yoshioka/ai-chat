{"version":3,"names":["cov_pv63f748d","actualCoverage","express_1","s","require","auth_1","metrics_1","prisma_1","json2csv_1","reportService_1","router","Router","use","authMiddleware","metricsMiddleware","get","req","res","f","__awaiter","startDate","endDate","organizationId","query","dateFilter","b","gte","Date","lte","whereClause","Object","keys","length","createdAt","user","prisma","findUnique","where","id","select","totalUsers","totalChats","chatLogs","Promise","all","count","undefined","chatLog","findMany","tokens","dailyStatsMap","Map","forEach","log","date","toISOString","split","existing","chats","satisfaction","Math","random","set","dailyStats","Array","from","entries","map","stats","parseFloat","toFixed","sort","a","localeCompare","avgSatisfaction","reduce","sum","stat","json","responseTime","error","console","status","now","orderBy","chartData","data","include","email","name","widget","csvData","_a","userName","_b","_c","question","answer","csv","parse","fields","setHeader","send","post","format","reportTypes","body","includes","isArray","validReportTypes","invalidTypes","filter","type","join","buffer","exportReports","timestamp","replace","filename","toString","exports","default"],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/routes/reports.ts"],"sourcesContent":["import { Router, Request, Response } from 'express';\nimport { authMiddleware } from '../middleware/auth';\nimport { metricsMiddleware } from '../middleware/metrics';\nimport { prisma } from '../lib/prisma';\nimport { parse } from 'json2csv';\nimport { Prisma } from '@prisma/client';\nimport { exportReports } from '../services/reportService';\n\nconst router = Router();\n\nrouter.use(authMiddleware);\nrouter.use(metricsMiddleware);\n\n// GET /reports - Summary report\nrouter.get('/', async (req: Request, res: Response) => {\n  try {\n    const { startDate, endDate, organizationId } = req.query;\n\n    const dateFilter: { gte?: Date; lte?: Date } = {};\n    if (startDate) {\n      dateFilter.gte = new Date(startDate as string);\n    }\n    if (endDate) {\n      dateFilter.lte = new Date(endDate as string);\n    }\n\n    const whereClause: Prisma.ChatLogWhereInput = {};\n    if (Object.keys(dateFilter).length > 0) {\n      whereClause.createdAt = dateFilter;\n    }\n    if (organizationId && req.user) {\n      // Verify user has access to this organization\n      const user = await prisma.user.findUnique({\n        where: { id: req.user.id },\n        select: { organizationId: true },\n      });\n\n      if (user?.organizationId === organizationId) {\n        whereClause.user = {\n          organizationId: organizationId as string,\n        };\n      }\n    }\n\n    const [totalUsers, totalChats, chatLogs] = await Promise.all([\n      prisma.user.count({\n        where: organizationId\n          ? { organizationId: organizationId as string }\n          : undefined,\n      }),\n      prisma.chatLog.count({ where: whereClause }),\n      prisma.chatLog.findMany({\n        where: whereClause,\n        select: {\n          createdAt: true,\n          tokens: true,\n        },\n      }),\n    ]);\n\n    // Calculate daily stats\n    const dailyStatsMap = new Map<\n      string,\n      { chats: number; satisfaction: number }\n    >();\n\n    chatLogs.forEach((log) => {\n      const date = log.createdAt.toISOString().split('T')[0];\n      const existing = dailyStatsMap.get(date) || { chats: 0, satisfaction: 0 };\n      existing.chats += 1;\n      existing.satisfaction = Math.random() * 2 + 3; // Mock satisfaction score\n      dailyStatsMap.set(date, existing);\n    });\n\n    const dailyStats = Array.from(dailyStatsMap.entries())\n      .map(([date, stats]) => ({\n        date,\n        chats: stats.chats,\n        satisfaction: parseFloat(stats.satisfaction.toFixed(2)),\n      }))\n      .sort((a, b) => a.date.localeCompare(b.date));\n\n    const avgSatisfaction =\n      dailyStats.length > 0\n        ? parseFloat(\n            (\n              dailyStats.reduce((sum, stat) => sum + stat.satisfaction, 0) /\n              dailyStats.length\n            ).toFixed(2)\n          )\n        : 0;\n\n    res.json({\n      totalUsers,\n      totalChats,\n      avgSatisfaction,\n      responseTime: 250, // Mock response time in ms\n      dailyStats,\n    });\n  } catch (error) {\n    console.error('Reports summary error:', error);\n    res.status(500).json({ error: 'Failed to generate report' });\n  }\n});\n\n// GET /reports/chart - Chart data\nrouter.get('/chart', async (req: Request, res: Response) => {\n  try {\n    const {\n      startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),\n      endDate = new Date().toISOString(),\n    } = req.query;\n\n    const chatLogs = await prisma.chatLog.findMany({\n      where: {\n        createdAt: {\n          gte: new Date(startDate as string),\n          lte: new Date(endDate as string),\n        },\n      },\n      select: {\n        createdAt: true,\n      },\n      orderBy: {\n        createdAt: 'asc',\n      },\n    });\n\n    // Group by date\n    const chartData = new Map<string, number>();\n\n    chatLogs.forEach((log) => {\n      const date = log.createdAt.toISOString().split('T')[0];\n      chartData.set(date, (chartData.get(date) || 0) + 1);\n    });\n\n    const data = Array.from(chartData.entries()).map(([date, count]) => ({\n      date,\n      chats: count,\n      satisfaction: Math.random() * 2 + 3, // Mock data\n    }));\n\n    res.json({\n      totalUsers: 0,\n      totalChats: chatLogs.length,\n      avgSatisfaction: 4.2,\n      responseTime: 250,\n      dailyStats: data,\n    });\n  } catch (error) {\n    console.error('Reports chart error:', error);\n    res.status(500).json({ error: 'Failed to generate chart data' });\n  }\n});\n\n// GET /reports/csv - CSV export\nrouter.get('/csv', async (req: Request, res: Response) => {\n  try {\n    const { startDate, endDate } = req.query;\n\n    const whereClause: Prisma.ChatLogWhereInput = {};\n    if (startDate || endDate) {\n      const dateFilter: { gte?: Date; lte?: Date } = {};\n      if (startDate) dateFilter.gte = new Date(startDate as string);\n      if (endDate) dateFilter.lte = new Date(endDate as string);\n      whereClause.createdAt = dateFilter;\n    }\n\n    const chatLogs = await prisma.chatLog.findMany({\n      where: whereClause,\n      include: {\n        user: {\n          select: {\n            email: true,\n            name: true,\n          },\n        },\n        widget: {\n          select: {\n            name: true,\n          },\n        },\n      },\n      orderBy: {\n        createdAt: 'desc',\n      },\n    });\n\n    const csvData = chatLogs.map((log) => ({\n      id: log.id,\n      date: log.createdAt.toISOString(),\n      user: log.user?.email || 'Anonymous',\n      userName: log.user?.name || '',\n      widget: log.widget?.name || 'Unknown',\n      question: log.question,\n      answer: log.answer,\n      tokens: log.tokens || 0,\n    }));\n\n    const csv = parse(csvData, {\n      fields: [\n        'id',\n        'date',\n        'user',\n        'userName',\n        'widget',\n        'question',\n        'answer',\n        'tokens',\n      ],\n    });\n\n    res.setHeader('Content-Type', 'text/csv');\n    res.setHeader(\n      'Content-Disposition',\n      `attachment; filename=\"chat-logs-${new Date().toISOString()}.csv\"`\n    );\n    res.send(csv);\n  } catch (error) {\n    console.error('Reports CSV error:', error);\n    res.status(500).json({ error: 'Failed to generate CSV' });\n  }\n});\n\n// POST /reports/export - Export multiple report types\nrouter.post('/export', async (req: Request, res: Response) => {\n  try {\n    const { format, reportTypes, startDate, endDate } = req.body;\n\n    // Validate input\n    if (!format || !['csv', 'pdf'].includes(format)) {\n      return res\n        .status(400)\n        .json({ error: 'Invalid format. Must be csv or pdf' });\n    }\n\n    if (\n      !reportTypes ||\n      !Array.isArray(reportTypes) ||\n      reportTypes.length === 0\n    ) {\n      return res\n        .status(400)\n        .json({ error: 'At least one report type must be selected' });\n    }\n\n    const validReportTypes = [\n      'chat_sessions',\n      'user_analytics',\n      'satisfaction',\n      'unresolved',\n      'usage_summary',\n    ];\n    const invalidTypes = reportTypes.filter(\n      (type) => !validReportTypes.includes(type)\n    );\n    if (invalidTypes.length > 0) {\n      return res\n        .status(400)\n        .json({ error: `Invalid report types: ${invalidTypes.join(', ')}` });\n    }\n\n    // Get user's organization\n    const user = await prisma.user.findUnique({\n      where: { id: req.user!.id },\n      select: { organizationId: true },\n    });\n\n    if (!user?.organizationId) {\n      return res\n        .status(403)\n        .json({ error: 'User must belong to an organization' });\n    }\n\n    // Generate the report\n    const buffer = await exportReports({\n      format,\n      reportTypes,\n      startDate: startDate ? new Date(startDate) : undefined,\n      endDate: endDate ? new Date(endDate) : undefined,\n      organizationId: user.organizationId,\n    });\n\n    // Set appropriate headers\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const filename = `report-export-${timestamp}.${format}`;\n\n    if (format === 'csv') {\n      res.setHeader('Content-Type', 'text/csv; charset=utf-8');\n    } else {\n      res.setHeader('Content-Type', 'application/pdf');\n    }\n\n    res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n    res.setHeader('Content-Length', buffer.length.toString());\n\n    // Send the file\n    res.send(buffer);\n  } catch (error) {\n    console.error('Report export error:', error);\n    res.status(500).json({ error: 'Failed to export reports' });\n  }\n});\n\nexport default router;\n"],"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","ignoreList":[]}