{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/__mocks__/ioredis.ts","mappings":"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","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/__mocks__/ioredis.ts"],"sourcesContent":["class Redis {\n  private store: Map<string, any> = new Map();\n  private ttls: Map<string, number> = new Map();\n\n  constructor() {\n    this.store = new Map();\n    this.ttls = new Map();\n  }\n\n  async get(key: string): Promise<string | null> {\n    const value = this.store.get(key);\n    return value !== undefined ? String(value) : null;\n  }\n\n  async set(key: string, value: any, ...args: any[]): Promise<'OK'> {\n    this.store.set(key, value);\n\n    // Handle TTL if provided\n    if (args[0] === 'EX' && args[1]) {\n      this.ttls.set(key, Date.now() + args[1] * 1000);\n    }\n\n    return 'OK';\n  }\n\n  async del(key: string | string[]): Promise<number> {\n    const keys = Array.isArray(key) ? key : [key];\n    let count = 0;\n\n    for (const k of keys) {\n      if (this.store.delete(k)) {\n        this.ttls.delete(k);\n        count++;\n      }\n    }\n\n    return count;\n  }\n\n  async exists(key: string): Promise<number> {\n    return this.store.has(key) ? 1 : 0;\n  }\n\n  async expire(key: string, seconds: number): Promise<number> {\n    if (this.store.has(key)) {\n      this.ttls.set(key, Date.now() + seconds * 1000);\n      return 1;\n    }\n    return 0;\n  }\n\n  async ttl(key: string): Promise<number> {\n    const expiry = this.ttls.get(key);\n    if (!expiry) return -1;\n\n    const ttl = Math.floor((expiry - Date.now()) / 1000);\n    return ttl > 0 ? ttl : -2;\n  }\n\n  async incr(key: string): Promise<number> {\n    const value = parseInt(this.store.get(key) || '0');\n    const newValue = value + 1;\n    this.store.set(key, newValue);\n    return newValue;\n  }\n\n  async decr(key: string): Promise<number> {\n    const value = parseInt(this.store.get(key) || '0');\n    const newValue = value - 1;\n    this.store.set(key, newValue);\n    return newValue;\n  }\n\n  async hset(\n    key: string,\n    field: string | Record<string, any>,\n    value?: any\n  ): Promise<number> {\n    let hash = this.store.get(key) || {};\n\n    if (typeof field === 'object') {\n      hash = { ...hash, ...field };\n      this.store.set(key, hash);\n      return Object.keys(field).length;\n    } else {\n      const isNew = !hash[field];\n      hash[field] = value;\n      this.store.set(key, hash);\n      return isNew ? 1 : 0;\n    }\n  }\n\n  async hget(key: string, field: string): Promise<string | null> {\n    const hash = this.store.get(key);\n    return hash && hash[field] !== undefined ? String(hash[field]) : null;\n  }\n\n  async hgetall(key: string): Promise<Record<string, string>> {\n    const hash = this.store.get(key);\n    if (!hash) return {};\n\n    const result: Record<string, string> = {};\n    for (const [field, value] of Object.entries(hash)) {\n      result[field] = String(value);\n    }\n    return result;\n  }\n\n  async sadd(key: string, ...members: string[]): Promise<number> {\n    const set = this.store.get(key) || new Set();\n    let added = 0;\n\n    for (const member of members) {\n      if (!set.has(member)) {\n        set.add(member);\n        added++;\n      }\n    }\n\n    this.store.set(key, set);\n    return added;\n  }\n\n  async smembers(key: string): Promise<string[]> {\n    const set = this.store.get(key);\n    return set ? Array.from(set) : [];\n  }\n\n  async srem(key: string, ...members: string[]): Promise<number> {\n    const set = this.store.get(key);\n    if (!set) return 0;\n\n    let removed = 0;\n    for (const member of members) {\n      if (set.delete(member)) {\n        removed++;\n      }\n    }\n\n    return removed;\n  }\n\n  async flushall(): Promise<'OK'> {\n    this.store.clear();\n    this.ttls.clear();\n    return 'OK';\n  }\n\n  async keys(pattern: string): Promise<string[]> {\n    const regex = new RegExp(pattern.replace(/\\*/g, '.*'));\n    return Array.from(this.store.keys()).filter((key) => regex.test(key));\n  }\n\n  async mget(...keys: string[]): Promise<(string | null)[]> {\n    return keys.map((key) => {\n      const value = this.store.get(key);\n      return value !== undefined ? String(value) : null;\n    });\n  }\n\n  async mset(...args: string[]): Promise<'OK'> {\n    for (let i = 0; i < args.length; i += 2) {\n      this.store.set(args[i], args[i + 1]);\n    }\n    return 'OK';\n  }\n\n  // Mock event emitter methods\n  on(event: string, callback: Function): this {\n    return this;\n  }\n\n  off(event: string, callback: Function): this {\n    return this;\n  }\n}\n\nexport default Redis;\n"],"version":3}