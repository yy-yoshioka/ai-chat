c33829db987d3467dbc86b7a9f2600ba
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class Redis {
    constructor() {
        this.store = new Map();
        this.ttls = new Map();
        this.store = new Map();
        this.ttls = new Map();
    }
    get(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const value = this.store.get(key);
            return value !== undefined ? String(value) : null;
        });
    }
    set(key, value, ...args) {
        return __awaiter(this, void 0, void 0, function* () {
            this.store.set(key, value);
            // Handle TTL if provided
            if (args[0] === 'EX' && args[1]) {
                this.ttls.set(key, Date.now() + args[1] * 1000);
            }
            return 'OK';
        });
    }
    del(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const keys = Array.isArray(key) ? key : [key];
            let count = 0;
            for (const k of keys) {
                if (this.store.delete(k)) {
                    this.ttls.delete(k);
                    count++;
                }
            }
            return count;
        });
    }
    exists(key) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.store.has(key) ? 1 : 0;
        });
    }
    expire(key, seconds) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.store.has(key)) {
                this.ttls.set(key, Date.now() + seconds * 1000);
                return 1;
            }
            return 0;
        });
    }
    ttl(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const expiry = this.ttls.get(key);
            if (!expiry)
                return -1;
            const ttl = Math.floor((expiry - Date.now()) / 1000);
            return ttl > 0 ? ttl : -2;
        });
    }
    incr(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const value = parseInt(this.store.get(key) || '0');
            const newValue = value + 1;
            this.store.set(key, newValue);
            return newValue;
        });
    }
    decr(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const value = parseInt(this.store.get(key) || '0');
            const newValue = value - 1;
            this.store.set(key, newValue);
            return newValue;
        });
    }
    hset(key, field, value) {
        return __awaiter(this, void 0, void 0, function* () {
            let hash = this.store.get(key) || {};
            if (typeof field === 'object') {
                hash = Object.assign(Object.assign({}, hash), field);
                this.store.set(key, hash);
                return Object.keys(field).length;
            }
            else {
                const isNew = !hash[field];
                hash[field] = value;
                this.store.set(key, hash);
                return isNew ? 1 : 0;
            }
        });
    }
    hget(key, field) {
        return __awaiter(this, void 0, void 0, function* () {
            const hash = this.store.get(key);
            return hash && hash[field] !== undefined ? String(hash[field]) : null;
        });
    }
    hgetall(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const hash = this.store.get(key);
            if (!hash)
                return {};
            const result = {};
            for (const [field, value] of Object.entries(hash)) {
                result[field] = String(value);
            }
            return result;
        });
    }
    sadd(key, ...members) {
        return __awaiter(this, void 0, void 0, function* () {
            const set = this.store.get(key) || new Set();
            let added = 0;
            for (const member of members) {
                if (!set.has(member)) {
                    set.add(member);
                    added++;
                }
            }
            this.store.set(key, set);
            return added;
        });
    }
    smembers(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const set = this.store.get(key);
            return set ? Array.from(set) : [];
        });
    }
    srem(key, ...members) {
        return __awaiter(this, void 0, void 0, function* () {
            const set = this.store.get(key);
            if (!set)
                return 0;
            let removed = 0;
            for (const member of members) {
                if (set.delete(member)) {
                    removed++;
                }
            }
            return removed;
        });
    }
    flushall() {
        return __awaiter(this, void 0, void 0, function* () {
            this.store.clear();
            this.ttls.clear();
            return 'OK';
        });
    }
    keys(pattern) {
        return __awaiter(this, void 0, void 0, function* () {
            const regex = new RegExp(pattern.replace(/\*/g, '.*'));
            return Array.from(this.store.keys()).filter((key) => regex.test(key));
        });
    }
    mget(...keys) {
        return __awaiter(this, void 0, void 0, function* () {
            return keys.map((key) => {
                const value = this.store.get(key);
                return value !== undefined ? String(value) : null;
            });
        });
    }
    mset(...args) {
        return __awaiter(this, void 0, void 0, function* () {
            for (let i = 0; i < args.length; i += 2) {
                this.store.set(args[i], args[i + 1]);
            }
            return 'OK';
        });
    }
    // Mock event emitter methods
    on(event, callback) {
        return this;
    }
    off(event, callback) {
        return this;
    }
}
exports.default = Redis;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,