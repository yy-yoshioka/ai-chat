{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/routes/dashboard.ts","mappings":";;;;;;;;;;;AAAA,qCAAoD;AACpD,6CAAoD;AACpD,mDAA0D;AAC1D,0CAAuC;AAEvC,MAAM,MAAM,GAAG,IAAA,gBAAM,GAAE,CAAC;AAExB,MAAM,CAAC,GAAG,CAAC,qBAAc,CAAC,CAAC;AAC3B,MAAM,CAAC,GAAG,CAAC,2BAAiB,CAAC,CAAC;AAE9B,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAO,GAAY,EAAE,GAAa,EAAE,EAAE;IACpD,IAAI,CAAC;QACH,MAAM,kBAAkB,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;QAEtE,MAAM,CAAC,UAAU,EAAE,WAAW,EAAE,WAAW,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YAC/D,eAAM,CAAC,OAAO,CAAC,KAAK,EAAE;YACtB,eAAM,CAAC,IAAI,CAAC,KAAK,CAAC;gBAChB,KAAK,EAAE;oBACL,QAAQ,EAAE;wBACR,IAAI,EAAE;4BACJ,SAAS,EAAE;gCACT,GAAG,EAAE,kBAAkB;6BACxB;yBACF;qBACF;iBACF;aACF,CAAC;YACF,eAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;gBACtB,KAAK,EAAE;oBACL,SAAS,EAAE;wBACT,GAAG,EAAE,kBAAkB;qBACxB;iBACF;gBACD,MAAM,EAAE;oBACN,SAAS,EAAE,IAAI;iBAChB;aACF,CAAC;SACH,CAAC,CAAC;QAEH,MAAM,eAAe,GAAG,GAAG,CAAC;QAE5B,MAAM,cAAc,GAAG,WAAW,CAAC,MAAM,CAAC;QAC1C,MAAM,SAAS,GAAG,IAAI,CAAC;QAEvB,GAAG,CAAC,IAAI,CAAC;YACP,UAAU;YACV,WAAW;YACX,eAAe,EAAE,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC;YAC5C,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,IAAI;YAC9C,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;QACzC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,gCAAgC,EAAE,CAAC,CAAC;IACpE,CAAC;AACH,CAAC,CAAA,CAAC,CAAC;AAEH,kBAAe,MAAM,CAAC","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/routes/dashboard.ts"],"sourcesContent":["import { Router, Request, Response } from 'express';\nimport { authMiddleware } from '../middleware/auth';\nimport { metricsMiddleware } from '../middleware/metrics';\nimport { prisma } from '../lib/prisma';\n\nconst router = Router();\n\nrouter.use(authMiddleware);\nrouter.use(metricsMiddleware);\n\nrouter.get('/', async (req: Request, res: Response) => {\n  try {\n    const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\n\n    const [totalChats, activeUsers, recentChats] = await Promise.all([\n      prisma.chatLog.count(),\n      prisma.user.count({\n        where: {\n          chatLogs: {\n            some: {\n              createdAt: {\n                gte: twentyFourHoursAgo,\n              },\n            },\n          },\n        },\n      }),\n      prisma.chatLog.findMany({\n        where: {\n          createdAt: {\n            gte: twentyFourHoursAgo,\n          },\n        },\n        select: {\n          createdAt: true,\n        },\n      }),\n    ]);\n\n    const avgResponseTime = 250;\n\n    const _totalMessages = recentChats.length;\n    const errorRate = 0.02;\n\n    res.json({\n      totalChats,\n      activeUsers,\n      avgResponseTime: Math.round(avgResponseTime),\n      errorRate: Math.round(errorRate * 1000) / 1000,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error) {\n    console.error('Dashboard error:', error);\n    res.status(500).json({ error: 'Failed to fetch dashboard data' });\n  }\n});\n\nexport default router;\n"],"version":3}