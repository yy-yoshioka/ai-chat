{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/routes/widgets.test.ts","mappings":"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","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/routes/widgets.test.ts"],"sourcesContent":["import request from 'supertest';\nimport express from 'express';\nimport widgetRouter from '../../src/routes/widgets';\nimport { testUser, testWidget, testCompany } from '../fixtures/test-data';\n\n// Create Express app for testing\nconst app = express();\napp.use(express.json());\n\n// Mock middleware to attach user and organizationId\napp.use((req, res, next) => {\n  req.user = testUser;\n  req.organizationId = testUser.organizationId;\n  next();\n});\n\napp.use('/api/widgets', widgetRouter);\n\n// Get mocked services\nconst widgetService = require('../../src/services/widgetService');\n\ndescribe('Widget Routes', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('GET /api/widgets', () => {\n    it('should return widgets for organization', async () => {\n      const mockResult = {\n        widgets: [\n          {\n            ...testWidget,\n            company: {\n              id: testCompany.id,\n              name: testCompany.name,\n              plan: 'pro',\n            },\n            _count: {\n              chatLogs: 10,\n            },\n          },\n        ],\n        pagination: {\n          page: 1,\n          limit: 20,\n          total: 1,\n          totalPages: 1,\n        },\n      };\n\n      widgetService.getWidgetsByOrganization.mockResolvedValue(mockResult);\n\n      const response = await request(app)\n        .get('/api/widgets')\n        .query({ page: 1, limit: 20 });\n\n      expect(response.status).toBe(200);\n      expect(response.body).toEqual(mockResult);\n      expect(widgetService.getWidgetsByOrganization).toHaveBeenCalledWith(\n        testUser.organizationId,\n        { page: 1, limit: 20, search: undefined }\n      );\n    });\n\n    it('should handle search parameter', async () => {\n      const mockResult = {\n        widgets: [],\n        pagination: {\n          page: 1,\n          limit: 20,\n          total: 0,\n          totalPages: 0,\n        },\n      };\n\n      widgetService.getWidgetsByOrganization.mockResolvedValue(mockResult);\n\n      const response = await request(app)\n        .get('/api/widgets')\n        .query({ search: 'test' });\n\n      expect(response.status).toBe(200);\n      expect(widgetService.getWidgetsByOrganization).toHaveBeenCalledWith(\n        testUser.organizationId,\n        { page: 1, limit: 20, search: 'test' }\n      );\n    });\n  });\n\n  describe('GET /api/widgets/:id', () => {\n    it('should return a widget by id', async () => {\n      const mockWidget = {\n        ...testWidget,\n        company: {\n          id: testCompany.id,\n          name: testCompany.name,\n          plan: 'pro',\n          organizationId: testUser.organizationId,\n        },\n        knowledgeBases: [],\n        _count: {\n          chatLogs: 10,\n          knowledgeBases: 0,\n        },\n      };\n\n      widgetService.getWidgetById.mockResolvedValue(mockWidget);\n\n      const response = await request(app).get(`/api/widgets/${testWidget.id}`);\n\n      expect(response.status).toBe(200);\n      expect(response.body).toEqual(mockWidget);\n      expect(widgetService.getWidgetById).toHaveBeenCalledWith(\n        testWidget.id,\n        testUser.organizationId\n      );\n    });\n\n    it('should return 404 if widget not found', async () => {\n      widgetService.getWidgetById.mockResolvedValue(null);\n\n      const response = await request(app).get('/api/widgets/non-existent-id');\n\n      expect(response.status).toBe(404);\n      expect(response.body.message).toBe('Widget not found');\n    });\n  });\n\n  describe('POST /api/widgets', () => {\n    it('should create a new widget', async () => {\n      const createData = {\n        name: 'New Widget',\n        companyId: testCompany.id,\n        themeColor: '#0000FF',\n        welcomeMessage: 'Welcome!',\n        placeholderText: 'Ask me anything...',\n      };\n\n      const mockCreatedWidget = {\n        ...testWidget,\n        ...createData,\n        id: 'new-widget-id',\n        widgetKey: 'wk_new_123',\n        company: {\n          id: testCompany.id,\n          name: testCompany.name,\n          plan: 'pro',\n        },\n      };\n\n      widgetService.createWidget.mockResolvedValue(mockCreatedWidget);\n\n      const response = await request(app)\n        .post('/api/widgets')\n        .send(createData);\n\n      expect(response.status).toBe(201);\n      expect(response.body).toEqual(mockCreatedWidget);\n      expect(widgetService.createWidget).toHaveBeenCalledWith(\n        createData,\n        testUser.organizationId\n      );\n    });\n\n    it('should return 400 for invalid data', async () => {\n      const response = await request(app)\n        .post('/api/widgets')\n        .send({\n          name: 'Widget',\n          // missing required fields\n        });\n\n      expect(response.status).toBe(400);\n    });\n  });\n\n  describe('PUT /api/widgets/:id', () => {\n    it('should update a widget', async () => {\n      const updateData = {\n        name: 'Updated Widget',\n        themeColor: '#FF0000',\n      };\n\n      const mockUpdatedWidget = {\n        ...testWidget,\n        ...updateData,\n        company: {\n          id: testCompany.id,\n          name: testCompany.name,\n          plan: 'pro',\n        },\n      };\n\n      widgetService.updateWidget.mockResolvedValue(mockUpdatedWidget);\n\n      const response = await request(app)\n        .put(`/api/widgets/${testWidget.id}`)\n        .send(updateData);\n\n      expect(response.status).toBe(200);\n      expect(response.body).toEqual(mockUpdatedWidget);\n      expect(widgetService.updateWidget).toHaveBeenCalledWith(\n        testWidget.id,\n        updateData,\n        testUser.organizationId\n      );\n    });\n\n    it('should return 404 if widget not found', async () => {\n      widgetService.updateWidget.mockResolvedValue(null);\n\n      const response = await request(app)\n        .put('/api/widgets/non-existent-id')\n        .send({ name: 'Updated' });\n\n      expect(response.status).toBe(404);\n      expect(response.body.message).toBe('Widget not found');\n    });\n  });\n\n  describe('DELETE /api/widgets/:id', () => {\n    it('should delete a widget', async () => {\n      widgetService.deleteWidget.mockResolvedValue(testWidget);\n\n      const response = await request(app).delete(`/api/widgets/${testWidget.id}`);\n\n      expect(response.status).toBe(200);\n      expect(response.body.message).toBe('Widget deleted successfully');\n      expect(widgetService.deleteWidget).toHaveBeenCalledWith(\n        testWidget.id,\n        testUser.organizationId\n      );\n    });\n\n    it('should return 404 if widget not found', async () => {\n      widgetService.deleteWidget.mockResolvedValue(null);\n\n      const response = await request(app).delete('/api/widgets/non-existent-id');\n\n      expect(response.status).toBe(404);\n      expect(response.body.message).toBe('Widget not found');\n    });\n  });\n\n  describe('GET /api/widgets/:id/analytics', () => {\n    it('should return widget analytics', async () => {\n      const mockAnalytics = {\n        totalChats: 100,\n        monthlyChats: 30,\n        avgSatisfaction: 4.5,\n        topQuestions: [\n          { question: 'How do I reset my password?', count: 10 },\n          { question: 'What are your hours?', count: 8 },\n        ],\n      };\n\n      widgetService.getWidgetAnalytics.mockResolvedValue(mockAnalytics);\n\n      const response = await request(app)\n        .get(`/api/widgets/${testWidget.id}/analytics`)\n        .query({ period: 'month' });\n\n      expect(response.status).toBe(200);\n      expect(response.body).toEqual(mockAnalytics);\n      expect(widgetService.getWidgetAnalytics).toHaveBeenCalledWith(\n        testWidget.id,\n        'month',\n        testUser.organizationId\n      );\n    });\n  });\n\n  describe('POST /api/widgets/:id/regenerate-key', () => {\n    it('should regenerate widget key', async () => {\n      const mockUpdatedWidget = {\n        ...testWidget,\n        widgetKey: 'wk_new_key_123',\n      };\n\n      widgetService.regenerateWidgetKey.mockResolvedValue(mockUpdatedWidget);\n\n      const response = await request(app)\n        .post(`/api/widgets/${testWidget.id}/regenerate-key`)\n        .send();\n\n      expect(response.status).toBe(200);\n      expect(response.body.widgetKey).toBe('wk_new_key_123');\n      expect(widgetService.regenerateWidgetKey).toHaveBeenCalledWith(\n        testWidget.id,\n        testUser.organizationId\n      );\n    });\n  });\n});"],"version":3}