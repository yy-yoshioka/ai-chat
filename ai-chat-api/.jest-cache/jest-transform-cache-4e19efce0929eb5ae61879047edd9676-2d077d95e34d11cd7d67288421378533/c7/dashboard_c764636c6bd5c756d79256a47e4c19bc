3f3f8c4fe87f862c41de042b01892126
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const auth_1 = require("../middleware/auth");
const metrics_1 = require("../middleware/metrics");
const prisma_1 = require("../lib/prisma");
const router = (0, express_1.Router)();
router.use(auth_1.authMiddleware);
router.use(metrics_1.metricsMiddleware);
router.get('/', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
        const [totalChats, activeUsers, recentChats] = yield Promise.all([
            prisma_1.prisma.chatLog.count(),
            prisma_1.prisma.user.count({
                where: {
                    chatLogs: {
                        some: {
                            createdAt: {
                                gte: twentyFourHoursAgo,
                            },
                        },
                    },
                },
            }),
            prisma_1.prisma.chatLog.findMany({
                where: {
                    createdAt: {
                        gte: twentyFourHoursAgo,
                    },
                },
                select: {
                    createdAt: true,
                },
            }),
        ]);
        const avgResponseTime = 250;
        const _totalMessages = recentChats.length;
        const errorRate = 0.02;
        res.json({
            totalChats,
            activeUsers,
            avgResponseTime: Math.round(avgResponseTime),
            errorRate: Math.round(errorRate * 1000) / 1000,
            timestamp: new Date().toISOString(),
        });
    }
    catch (error) {
        console.error('Dashboard error:', error);
        res.status(500).json({ error: 'Failed to fetch dashboard data' });
    }
}));
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3l1c3VrZXlvc2hpb2thL3Byb2plY3RzL3lvdXR1YmUvYWktY2hhdC9haS1jaGF0LWFwaS9zcmMvcm91dGVzL2Rhc2hib2FyZC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLHFDQUFvRDtBQUNwRCw2Q0FBb0Q7QUFDcEQsbURBQTBEO0FBQzFELDBDQUF1QztBQUV2QyxNQUFNLE1BQU0sR0FBRyxJQUFBLGdCQUFNLEdBQUUsQ0FBQztBQUV4QixNQUFNLENBQUMsR0FBRyxDQUFDLHFCQUFjLENBQUMsQ0FBQztBQUMzQixNQUFNLENBQUMsR0FBRyxDQUFDLDJCQUFpQixDQUFDLENBQUM7QUFFOUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBTyxHQUFZLEVBQUUsR0FBYSxFQUFFLEVBQUU7SUFDcEQsSUFBSSxDQUFDO1FBQ0gsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFFdEUsTUFBTSxDQUFDLFVBQVUsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDO1lBQy9ELGVBQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFO1lBQ3RCLGVBQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO2dCQUNoQixLQUFLLEVBQUU7b0JBQ0wsUUFBUSxFQUFFO3dCQUNSLElBQUksRUFBRTs0QkFDSixTQUFTLEVBQUU7Z0NBQ1QsR0FBRyxFQUFFLGtCQUFrQjs2QkFDeEI7eUJBQ0Y7cUJBQ0Y7aUJBQ0Y7YUFDRixDQUFDO1lBQ0YsZUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7Z0JBQ3RCLEtBQUssRUFBRTtvQkFDTCxTQUFTLEVBQUU7d0JBQ1QsR0FBRyxFQUFFLGtCQUFrQjtxQkFDeEI7aUJBQ0Y7Z0JBQ0QsTUFBTSxFQUFFO29CQUNOLFNBQVMsRUFBRSxJQUFJO2lCQUNoQjthQUNGLENBQUM7U0FDSCxDQUFDLENBQUM7UUFFSCxNQUFNLGVBQWUsR0FBRyxHQUFHLENBQUM7UUFFNUIsTUFBTSxjQUFjLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQztRQUMxQyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFFdkIsR0FBRyxDQUFDLElBQUksQ0FBQztZQUNQLFVBQVU7WUFDVixXQUFXO1lBQ1gsZUFBZSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDO1lBQzVDLFNBQVMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJO1lBQzlDLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRTtTQUNwQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDekMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsZ0NBQWdDLEVBQUUsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7QUFDSCxDQUFDLENBQUEsQ0FBQyxDQUFDO0FBRUgsa0JBQWUsTUFBTSxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy95dXN1a2V5b3NoaW9rYS9wcm9qZWN0cy95b3V0dWJlL2FpLWNoYXQvYWktY2hhdC1hcGkvc3JjL3JvdXRlcy9kYXNoYm9hcmQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUm91dGVyLCBSZXF1ZXN0LCBSZXNwb25zZSB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgYXV0aE1pZGRsZXdhcmUgfSBmcm9tICcuLi9taWRkbGV3YXJlL2F1dGgnO1xuaW1wb3J0IHsgbWV0cmljc01pZGRsZXdhcmUgfSBmcm9tICcuLi9taWRkbGV3YXJlL21ldHJpY3MnO1xuaW1wb3J0IHsgcHJpc21hIH0gZnJvbSAnLi4vbGliL3ByaXNtYSc7XG5cbmNvbnN0IHJvdXRlciA9IFJvdXRlcigpO1xuXG5yb3V0ZXIudXNlKGF1dGhNaWRkbGV3YXJlKTtcbnJvdXRlci51c2UobWV0cmljc01pZGRsZXdhcmUpO1xuXG5yb3V0ZXIuZ2V0KCcvJywgYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHR3ZW50eUZvdXJIb3Vyc0FnbyA9IG5ldyBEYXRlKERhdGUubm93KCkgLSAyNCAqIDYwICogNjAgKiAxMDAwKTtcblxuICAgIGNvbnN0IFt0b3RhbENoYXRzLCBhY3RpdmVVc2VycywgcmVjZW50Q2hhdHNdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgcHJpc21hLmNoYXRMb2cuY291bnQoKSxcbiAgICAgIHByaXNtYS51c2VyLmNvdW50KHtcbiAgICAgICAgd2hlcmU6IHtcbiAgICAgICAgICBjaGF0TG9nczoge1xuICAgICAgICAgICAgc29tZToge1xuICAgICAgICAgICAgICBjcmVhdGVkQXQ6IHtcbiAgICAgICAgICAgICAgICBndGU6IHR3ZW50eUZvdXJIb3Vyc0FnbyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0pLFxuICAgICAgcHJpc21hLmNoYXRMb2cuZmluZE1hbnkoe1xuICAgICAgICB3aGVyZToge1xuICAgICAgICAgIGNyZWF0ZWRBdDoge1xuICAgICAgICAgICAgZ3RlOiB0d2VudHlGb3VySG91cnNBZ28sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgc2VsZWN0OiB7XG4gICAgICAgICAgY3JlYXRlZEF0OiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgfSksXG4gICAgXSk7XG5cbiAgICBjb25zdCBhdmdSZXNwb25zZVRpbWUgPSAyNTA7XG5cbiAgICBjb25zdCBfdG90YWxNZXNzYWdlcyA9IHJlY2VudENoYXRzLmxlbmd0aDtcbiAgICBjb25zdCBlcnJvclJhdGUgPSAwLjAyO1xuXG4gICAgcmVzLmpzb24oe1xuICAgICAgdG90YWxDaGF0cyxcbiAgICAgIGFjdGl2ZVVzZXJzLFxuICAgICAgYXZnUmVzcG9uc2VUaW1lOiBNYXRoLnJvdW5kKGF2Z1Jlc3BvbnNlVGltZSksXG4gICAgICBlcnJvclJhdGU6IE1hdGgucm91bmQoZXJyb3JSYXRlICogMTAwMCkgLyAxMDAwLFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRGFzaGJvYXJkIGVycm9yOicsIGVycm9yKTtcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnRmFpbGVkIHRvIGZldGNoIGRhc2hib2FyZCBkYXRhJyB9KTtcbiAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHJvdXRlcjtcbiJdLCJ2ZXJzaW9uIjozfQ==