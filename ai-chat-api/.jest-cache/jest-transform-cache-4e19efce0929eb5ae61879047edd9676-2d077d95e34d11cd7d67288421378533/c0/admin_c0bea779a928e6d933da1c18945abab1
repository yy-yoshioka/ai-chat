a5abd93b7c025713530ea9951729f436
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const prisma_1 = require("../lib/prisma");
const auth_1 = require("../middleware/auth");
const admin_1 = require("../middleware/admin");
const router = (0, express_1.Router)();
router.use(auth_1.authMiddleware, admin_1.adminMiddleware);
router.get('/chat-logs', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const logs = yield prisma_1.prisma.chatLog.findMany({
        include: { user: { select: { id: true, email: true } } },
        orderBy: { createdAt: 'desc' },
    });
    res.json(logs);
}));
router.get('/report/chat-logs', (_req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const logs = yield prisma_1.prisma.chatLog.groupBy({
        by: ['createdAt'],
        _count: { id: true },
    });
    res.json(logs);
}));
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3l1c3VrZXlvc2hpb2thL3Byb2plY3RzL3lvdXR1YmUvYWktY2hhdC9haS1jaGF0LWFwaS9zcmMvcm91dGVzL2FkbWluLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEscUNBQWlDO0FBQ2pDLDBDQUF1QztBQUN2Qyw2Q0FBb0Q7QUFDcEQsK0NBQXNEO0FBRXRELE1BQU0sTUFBTSxHQUFHLElBQUEsZ0JBQU0sR0FBRSxDQUFDO0FBRXhCLE1BQU0sQ0FBQyxHQUFHLENBQUMscUJBQWMsRUFBRSx1QkFBZSxDQUFDLENBQUM7QUFFNUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBTyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7SUFDMUMsTUFBTSxJQUFJLEdBQUcsTUFBTSxlQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUN6QyxPQUFPLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFO1FBQ3hELE9BQU8sRUFBRSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUU7S0FDL0IsQ0FBQyxDQUFDO0lBQ0gsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNqQixDQUFDLENBQUEsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxDQUFPLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRTtJQUNsRCxNQUFNLElBQUksR0FBRyxNQUFNLGVBQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQ3hDLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQztRQUNqQixNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFO0tBQ3JCLENBQUMsQ0FBQztJQUNILEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakIsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUVILGtCQUFlLE1BQU0sQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMveXVzdWtleW9zaGlva2EvcHJvamVjdHMveW91dHViZS9haS1jaGF0L2FpLWNoYXQtYXBpL3NyYy9yb3V0ZXMvYWRtaW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBwcmlzbWEgfSBmcm9tICcuLi9saWIvcHJpc21hJztcbmltcG9ydCB7IGF1dGhNaWRkbGV3YXJlIH0gZnJvbSAnLi4vbWlkZGxld2FyZS9hdXRoJztcbmltcG9ydCB7IGFkbWluTWlkZGxld2FyZSB9IGZyb20gJy4uL21pZGRsZXdhcmUvYWRtaW4nO1xuXG5jb25zdCByb3V0ZXIgPSBSb3V0ZXIoKTtcblxucm91dGVyLnVzZShhdXRoTWlkZGxld2FyZSwgYWRtaW5NaWRkbGV3YXJlKTtcblxucm91dGVyLmdldCgnL2NoYXQtbG9ncycsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICBjb25zdCBsb2dzID0gYXdhaXQgcHJpc21hLmNoYXRMb2cuZmluZE1hbnkoe1xuICAgIGluY2x1ZGU6IHsgdXNlcjogeyBzZWxlY3Q6IHsgaWQ6IHRydWUsIGVtYWlsOiB0cnVlIH0gfSB9LFxuICAgIG9yZGVyQnk6IHsgY3JlYXRlZEF0OiAnZGVzYycgfSxcbiAgfSk7XG4gIHJlcy5qc29uKGxvZ3MpO1xufSk7XG5cbnJvdXRlci5nZXQoJy9yZXBvcnQvY2hhdC1sb2dzJywgYXN5bmMgKF9yZXEsIHJlcykgPT4ge1xuICBjb25zdCBsb2dzID0gYXdhaXQgcHJpc21hLmNoYXRMb2cuZ3JvdXBCeSh7XG4gICAgYnk6IFsnY3JlYXRlZEF0J10sXG4gICAgX2NvdW50OiB7IGlkOiB0cnVlIH0sXG4gIH0pO1xuICByZXMuanNvbihsb2dzKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCByb3V0ZXI7XG4iXSwidmVyc2lvbiI6M30=