{"version":3,"names":["client_s3_1","cov_1r122sc1v7","s","require","js_client_rest_1","openai_1","pdf_1","text_splitter_1","prisma_1","logger_1","s3Client","S3Client","endpoint","process","env","S3_ENDPOINT","credentials","accessKeyId","S3_ACCESS_KEY","secretAccessKey","S3_SECRET_KEY","forcePathStyle","qdrantClient","QdrantClient","url","QDRANT_URL","apiKey","QDRANT_API_KEY","openai","OpenAI","OPENAI_API_KEY","processKnowledgeBaseFile","knowledgeBaseId","s3Key","mimeType","f","prisma","knowledgeBase","update","where","id","data","status","s3Response","send","GetObjectCommand","Bucket","S3_BUCKET","Key","fileBuffer","streamToBuffer","Body","documents","b","loader","PDFLoader","Blob","load","text","toString","pageContent","metadata","splitter","RecursiveCharacterTextSplitter","chunkSize","chunkOverlap","chunks","splitDocuments","vectors","collectionName","substring","createCollection","size","distance","error","i","length","chunk","embedding","embeddings","create","model","input","vector","upsert","wait","points","payload","chunkIndex","content","push","processedAt","Date","logger","info","Error","message","exports","searchKnowledgeBase","widgetId","query","limit","queryVector","knowledgeBases","findMany","searchResult","search","with_payload","results","map","result","score","_a","_b","stream","stream_1","__asyncValues","stream_1_1","next","done","_d","value","Buffer","from","concat"],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/services/knowledgeBaseService.ts"],"sourcesContent":["import { S3Client, GetObjectCommand } from '@aws-sdk/client-s3';\nimport { QdrantClient } from '@qdrant/js-client-rest';\nimport { OpenAI } from 'openai';\nimport { PDFLoader } from '@langchain/community/document_loaders/fs/pdf';\nimport { RecursiveCharacterTextSplitter } from 'langchain/text_splitter';\nimport { prisma } from '../lib/prisma';\nimport { logger } from '../lib/logger';\n\nconst s3Client = new S3Client({\n  endpoint: process.env.S3_ENDPOINT,\n  credentials: {\n    accessKeyId: process.env.S3_ACCESS_KEY!,\n    secretAccessKey: process.env.S3_SECRET_KEY!,\n  },\n  forcePathStyle: true,\n});\n\nconst qdrantClient = new QdrantClient({\n  url: process.env.QDRANT_URL,\n  apiKey: process.env.QDRANT_API_KEY,\n});\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\nexport async function processKnowledgeBaseFile(\n  knowledgeBaseId: string,\n  s3Key: string,\n  mimeType: string\n) {\n  try {\n    // ステータス更新\n    await prisma.knowledgeBase.update({\n      where: { id: knowledgeBaseId },\n      data: { status: 'processing' },\n    });\n\n    // S3からファイル取得\n    const s3Response = await s3Client.send(\n      new GetObjectCommand({\n        Bucket: process.env.S3_BUCKET!,\n        Key: s3Key,\n      })\n    );\n\n    const fileBuffer = await streamToBuffer(\n      s3Response.Body as NodeJS.ReadableStream\n    );\n\n    // ドキュメント読み込みとチャンク分割\n    let documents;\n    if (mimeType === 'application/pdf') {\n      const loader = new PDFLoader(new Blob([fileBuffer]));\n      documents = await loader.load();\n    } else {\n      // テキストファイルの処理\n      const text = fileBuffer.toString('utf-8');\n      documents = [{ pageContent: text, metadata: {} }];\n    }\n\n    // テキスト分割\n    const splitter = new RecursiveCharacterTextSplitter({\n      chunkSize: 1000,\n      chunkOverlap: 200,\n    });\n\n    const chunks = await splitter.splitDocuments(documents);\n\n    // 各チャンクをベクトル化\n    const vectors = [];\n    const collectionName = `org_${knowledgeBaseId.substring(0, 8)}`;\n\n    // コレクション作成（存在しない場合）\n    try {\n      await qdrantClient.createCollection(collectionName, {\n        vectors: {\n          size: 1536, // OpenAI embedding dimension\n          distance: 'Cosine',\n        },\n      });\n    } catch (error) {\n      // コレクションが既に存在する場合は無視\n    }\n\n    for (let i = 0; i < chunks.length; i++) {\n      const chunk = chunks[i];\n\n      // OpenAI Embeddings\n      const embedding = await openai.embeddings.create({\n        model: 'text-embedding-ada-002',\n        input: chunk.pageContent,\n      });\n\n      const vector = embedding.data[0].embedding;\n\n      // Qdrantに保存\n      await qdrantClient.upsert(collectionName, {\n        wait: true,\n        points: [\n          {\n            id: `${knowledgeBaseId}_${i}`,\n            vector: vector,\n            payload: {\n              knowledgeBaseId,\n              chunkIndex: i,\n              content: chunk.pageContent,\n              metadata: chunk.metadata,\n            },\n          },\n        ],\n      });\n\n      vectors.push(`${knowledgeBaseId}_${i}`);\n    }\n\n    // DB更新\n    await prisma.knowledgeBase.update({\n      where: { id: knowledgeBaseId },\n      data: {\n        status: 'completed',\n        chunks: chunks.length,\n        vectors: vectors,\n        processedAt: new Date(),\n      },\n    });\n\n    logger.info('Knowledge base processing completed', {\n      knowledgeBaseId,\n      chunks: chunks.length,\n    });\n  } catch (error) {\n    await prisma.knowledgeBase.update({\n      where: { id: knowledgeBaseId },\n      data: {\n        status: 'failed',\n        error: error instanceof Error ? error.message : 'Unknown error',\n      },\n    });\n    throw error;\n  }\n}\n\nexport async function searchKnowledgeBase(\n  widgetId: string,\n  query: string,\n  limit: number = 5\n) {\n  try {\n    // クエリをベクトル化\n    const embedding = await openai.embeddings.create({\n      model: 'text-embedding-ada-002',\n      input: query,\n    });\n\n    const queryVector = embedding.data[0].embedding;\n\n    // 関連するKnowledge Baseを取得\n    const knowledgeBases = await prisma.knowledgeBase.findMany({\n      where: {\n        widgetId,\n        status: 'completed',\n      },\n    });\n\n    if (knowledgeBases.length === 0) {\n      return [];\n    }\n\n    const collectionName = `org_${knowledgeBases[0].id.substring(0, 8)}`;\n\n    // ベクトル検索\n    const searchResult = await qdrantClient.search(collectionName, {\n      vector: queryVector,\n      limit: limit,\n      with_payload: true,\n    });\n\n    const results = searchResult.map((result) => ({\n      score: result.score,\n      content: (result.payload?.content as string) || '',\n      metadata: result.payload?.metadata,\n    }));\n\n    return results;\n  } catch (error) {\n    logger.error('Knowledge base search failed', { error, widgetId, query });\n    return [];\n  }\n}\n\n// Helper function\nasync function streamToBuffer(stream: NodeJS.ReadableStream): Promise<Buffer> {\n  const chunks: Buffer[] = [];\n  for await (const chunk of stream) {\n    chunks.push(Buffer.from(chunk));\n  }\n  return Buffer.concat(chunks);\n}\n"],"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","ignoreList":[]}