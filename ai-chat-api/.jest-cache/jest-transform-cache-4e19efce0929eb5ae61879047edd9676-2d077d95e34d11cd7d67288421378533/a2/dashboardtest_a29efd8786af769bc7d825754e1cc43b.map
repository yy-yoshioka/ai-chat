{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/integration/dashboard.test.ts","mappings":"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","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/integration/dashboard.test.ts"],"sourcesContent":["import request from 'supertest';\nimport app from '../../src/app';\nimport { prisma } from '../../src/lib/prisma';\nimport jwt from 'jsonwebtoken';\nimport { Role } from '@prisma/client';\n\ndescribe('Dashboard Routes', () => {\n  let authToken: string;\n  let userId: string;\n  let organizationId: string;\n\n  beforeEach(async () => {\n    // Create test organization\n    const organization = await prisma.organization.create({\n      data: {\n        name: 'Test Organization',\n        slug: 'test-org',\n      },\n    });\n    organizationId = organization.id;\n\n    // Create test user\n    const user = await prisma.user.create({\n      data: {\n        email: 'test@example.com',\n        password: 'hashed_password',\n        name: 'Test User',\n        roles: [Role.org_admin],\n        organizationId,\n      },\n    });\n    userId = user.id;\n\n    // Generate auth token\n    authToken = jwt.sign(\n      { userId: user.id, email: user.email },\n      process.env.JWT_SECRET!,\n      { expiresIn: '1d' }\n    );\n\n    // Create test data\n    await prisma.chatLog.createMany({\n      data: [\n        {\n          userId,\n          question: 'Test question 1',\n          answer: 'Test answer 1',\n          tokens: 10,\n        },\n        {\n          userId,\n          question: 'Test question 2',\n          answer: 'Test answer 2',\n          tokens: 20,\n        },\n      ],\n    });\n  });\n\n  describe('GET /api/dashboard', () => {\n    it('should return dashboard metrics for authenticated user', async () => {\n      const response = await request(app)\n        .get('/api/dashboard')\n        .set('Cookie', `auth-token=${authToken}`);\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty('totalChats', 2);\n      expect(response.body).toHaveProperty('activeUsers', 1);\n      expect(response.body).toHaveProperty('avgResponseTime');\n      expect(response.body).toHaveProperty('errorRate');\n      expect(response.body).toHaveProperty('timestamp');\n    });\n\n    it('should return 401 for unauthenticated request', async () => {\n      const response = await request(app).get('/api/dashboard');\n\n      expect(response.status).toBe(401);\n      expect(response.body).toHaveProperty('error', 'Unauthorized');\n    });\n\n    it('should return 401 for invalid token', async () => {\n      const response = await request(app)\n        .get('/api/dashboard')\n        .set('Cookie', 'auth-token=invalid-token');\n\n      expect(response.status).toBe(401);\n      expect(response.body).toHaveProperty('error', 'Invalid token');\n    });\n\n    it('should handle database errors gracefully', async () => {\n      // Mock prisma to throw error\n      jest\n        .spyOn(prisma.chatLog, 'count')\n        .mockRejectedValueOnce(new Error('DB Error'));\n\n      const response = await request(app)\n        .get('/api/dashboard')\n        .set('Cookie', `auth-token=${authToken}`);\n\n      expect(response.status).toBe(500);\n      expect(response.body).toHaveProperty(\n        'error',\n        'Failed to fetch dashboard data'\n      );\n    });\n  });\n});\n"],"version":3}