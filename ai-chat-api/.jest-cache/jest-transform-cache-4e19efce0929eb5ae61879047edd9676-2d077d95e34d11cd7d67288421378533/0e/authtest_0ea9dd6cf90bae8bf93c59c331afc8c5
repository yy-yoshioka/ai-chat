3db6f4951eb62cc7ee7992d81e95aebd
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock prisma
jest.mock('../../../src/lib/prisma', () => ({
    prisma: {
        user: {
            findUnique: jest.fn(),
        },
    },
}));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const auth_1 = require("../../../src/middleware/auth");
const prisma_1 = require("../../../src/lib/prisma");
describe('Auth Middleware', () => {
    let mockRequest;
    let mockResponse;
    let mockNext;
    beforeEach(() => {
        mockRequest = {
            cookies: {},
            headers: {},
        };
        mockResponse = {
            status: jest.fn().mockReturnThis(),
            json: jest.fn(),
        };
        mockNext = jest.fn();
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    it('should authenticate valid token', () => __awaiter(void 0, void 0, void 0, function* () {
        const userId = 'test-user-id';
        const token = jsonwebtoken_1.default.sign({ id: userId, email: 'test@example.com' }, process.env.JWT_SECRET, { expiresIn: '1d' });
        mockRequest.cookies = { token: token };
        prisma_1.prisma.user.findUnique.mockResolvedValue({
            id: userId,
            email: 'test@example.com',
            roles: ['viewer'],
        });
        yield (0, auth_1.authMiddleware)(mockRequest, mockResponse, mockNext);
        expect(prisma_1.prisma.user.findUnique).toHaveBeenCalledWith({
            where: { id: userId },
            select: { id: true, email: true, roles: true },
        });
        expect(mockRequest.user).toEqual({
            id: userId,
            email: 'test@example.com',
            roles: ['viewer'],
        });
        expect(mockNext).toHaveBeenCalled();
    }));
    it('should reject request without token', () => __awaiter(void 0, void 0, void 0, function* () {
        yield (0, auth_1.authMiddleware)(mockRequest, mockResponse, mockNext);
        expect(mockResponse.status).toHaveBeenCalledWith(401);
        expect(mockResponse.json).toHaveBeenCalledWith({ error: 'Unauthorized' });
        expect(mockNext).not.toHaveBeenCalled();
    }));
    it('should reject invalid token', () => __awaiter(void 0, void 0, void 0, function* () {
        mockRequest.cookies = { token: 'invalid-token' };
        yield (0, auth_1.authMiddleware)(mockRequest, mockResponse, mockNext);
        expect(mockResponse.status).toHaveBeenCalledWith(401);
        expect(mockResponse.json).toHaveBeenCalledWith({ error: 'Invalid token' });
        expect(mockNext).not.toHaveBeenCalled();
    }));
    it('should reject expired token', () => __awaiter(void 0, void 0, void 0, function* () {
        // Mock jwt.verify to throw expired error
        jest.mock('../../../src/utils/jwt', () => ({
            verifyToken: jest.fn(() => {
                const error = new Error('jwt expired');
                error.name = 'TokenExpiredError';
                throw error;
            }),
        }));
        const token = 'expired-token';
        mockRequest.cookies = { token: token };
        yield (0, auth_1.authMiddleware)(mockRequest, mockResponse, mockNext);
        expect(mockResponse.status).toHaveBeenCalledWith(401);
        expect(mockResponse.json).toHaveBeenCalledWith({ error: 'Token expired' });
        expect(mockNext).not.toHaveBeenCalled();
    }));
    it('should reject token for non-existent user', () => __awaiter(void 0, void 0, void 0, function* () {
        const token = jsonwebtoken_1.default.sign({ id: 'non-existent', email: 'test@example.com' }, process.env.JWT_SECRET);
        mockRequest.cookies = { token: token };
        prisma_1.prisma.user.findUnique.mockResolvedValue(null);
        yield (0, auth_1.authMiddleware)(mockRequest, mockResponse, mockNext);
        expect(mockResponse.status).toHaveBeenCalledWith(401);
        expect(mockResponse.json).toHaveBeenCalledWith({ error: 'User not found' });
        expect(mockNext).not.toHaveBeenCalled();
    }));
    it('should handle database errors', () => __awaiter(void 0, void 0, void 0, function* () {
        const token = jsonwebtoken_1.default.sign({ id: 'test-user-id', email: 'test@example.com' }, process.env.JWT_SECRET);
        mockRequest.cookies = { token: token };
        prisma_1.prisma.user.findUnique.mockRejectedValue(new Error('DB Error'));
        yield (0, auth_1.authMiddleware)(mockRequest, mockResponse, mockNext);
        expect(mockResponse.status).toHaveBeenCalledWith(500);
        expect(mockResponse.json).toHaveBeenCalledWith({
            error: 'Internal server error',
        });
        expect(mockNext).not.toHaveBeenCalled();
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,