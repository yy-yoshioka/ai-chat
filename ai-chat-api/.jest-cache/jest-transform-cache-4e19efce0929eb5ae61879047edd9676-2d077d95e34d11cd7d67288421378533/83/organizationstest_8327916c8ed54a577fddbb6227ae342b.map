{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/integration/organizations.test.ts","mappings":";;;;;;;;;;;;;;AAAA,0DAAgC;AAChC,wDAAgC;AAChC,iDAA8C;AAC9C,gEAA+B;AAC/B,2CAAsC;AAEtC,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;IACpC,IAAI,SAAiB,CAAC;IACtB,IAAI,aAAqB,CAAC;IAC1B,IAAI,MAAc,CAAC;IACnB,IAAI,UAAkB,CAAC;IACvB,IAAI,cAAsB,CAAC;IAE3B,UAAU,CAAC,GAAS,EAAE;QACpB,2BAA2B;QAC3B,MAAM,YAAY,GAAG,MAAM,eAAM,CAAC,YAAY,CAAC,MAAM,CAAC;YACpD,IAAI,EAAE;gBACJ,IAAI,EAAE,mBAAmB;gBACzB,IAAI,EAAE,UAAU;gBAChB,QAAQ,EAAE,EAAE,SAAS,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE;aACxC;SACF,CAAC,CAAC;QACH,cAAc,GAAG,YAAY,CAAC,EAAE,CAAC;QAEjC,sBAAsB;QACtB,MAAM,IAAI,GAAG,MAAM,eAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACpC,IAAI,EAAE;gBACJ,KAAK,EAAE,kBAAkB;gBACzB,QAAQ,EAAE,iBAAiB;gBAC3B,IAAI,EAAE,cAAc;gBACpB,KAAK,EAAE,CAAC,aAAI,CAAC,MAAM,CAAC;gBACpB,cAAc;aACf;SACF,CAAC,CAAC;QACH,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC;QACjB,SAAS,GAAG,sBAAG,CAAC,IAAI,CAClB,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,EACtC,OAAO,CAAC,GAAG,CAAC,UAAW,EACvB,EAAE,SAAS,EAAE,IAAI,EAAE,CACpB,CAAC;QAEF,mBAAmB;QACnB,MAAM,QAAQ,GAAG,MAAM,eAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACxC,IAAI,EAAE;gBACJ,KAAK,EAAE,sBAAsB;gBAC7B,QAAQ,EAAE,iBAAiB;gBAC3B,IAAI,EAAE,WAAW;gBACjB,KAAK,EAAE,CAAC,aAAI,CAAC,SAAS,CAAC;gBACvB,cAAc;aACf;SACF,CAAC,CAAC;QACH,UAAU,GAAG,QAAQ,CAAC,EAAE,CAAC;QACzB,aAAa,GAAG,sBAAG,CAAC,IAAI,CACtB,EAAE,MAAM,EAAE,QAAQ,CAAC,EAAE,EAAE,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,EAC9C,OAAO,CAAC,GAAG,CAAC,UAAW,EACvB,EAAE,SAAS,EAAE,IAAI,EAAE,CACpB,CAAC;QAEF,mBAAmB;QACnB,MAAM,eAAM,CAAC,MAAM,CAAC,UAAU,CAAC;YAC7B,IAAI,EAAE;gBACJ;oBACE,SAAS,EAAE,SAAS;oBACpB,IAAI,EAAE,eAAe;oBACrB,SAAS,EAAE,CACT,MAAM,eAAM,CAAC,OAAO,CAAC,MAAM,CAAC;wBAC1B,IAAI,EAAE;4BACJ,IAAI,EAAE,cAAc;4BACpB,KAAK,EAAE,qBAAqB;4BAC5B,cAAc;yBACf;qBACF,CAAC,CACH,CAAC,EAAE;iBACL;aACF;SACF,CAAC,CAAC;QAEH,MAAM,eAAM,CAAC,GAAG,CAAC,UAAU,CAAC;YAC1B,IAAI,EAAE;gBACJ;oBACE,QAAQ,EAAE,YAAY;oBACtB,MAAM,EAAE,eAAe;oBACvB,cAAc;iBACf;gBACD;oBACE,QAAQ,EAAE,YAAY;oBACtB,MAAM,EAAE,eAAe;oBACvB,cAAc;iBACf;aACF;SACF,CAAC,CAAC;IACL,CAAC,CAAA,CAAC,CAAC;IAEH,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;QACtC,EAAE,CAAC,2DAA2D,EAAE,GAAS,EAAE;YACzE,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,aAAG,CAAC;iBAChC,GAAG,CAAC,oBAAoB,CAAC;iBACzB,GAAG,CAAC,QAAQ,EAAE,cAAc,SAAS,EAAE,CAAC,CAAC;YAE5C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;YAC3D,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,EAAE,mBAAmB,CAAC,CAAC;YAClE,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;YACzD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YACrD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QACtD,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,GAAS,EAAE;YAC/D,mCAAmC;YACnC,MAAM,UAAU,GAAG,MAAM,eAAM,CAAC,IAAI,CAAC,MAAM,CAAC;gBAC1C,IAAI,EAAE;oBACJ,KAAK,EAAE,oBAAoB;oBAC3B,QAAQ,EAAE,iBAAiB;iBAC5B;aACF,CAAC,CAAC;YACH,MAAM,WAAW,GAAG,sBAAG,CAAC,IAAI,CAC1B,EAAE,MAAM,EAAE,UAAU,CAAC,EAAE,EAAE,KAAK,EAAE,UAAU,CAAC,KAAK,EAAE,EAClD,OAAO,CAAC,GAAG,CAAC,UAAW,EACvB,EAAE,SAAS,EAAE,IAAI,EAAE,CACpB,CAAC;YAEF,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,aAAG,CAAC;iBAChC,GAAG,CAAC,oBAAoB,CAAC;iBACzB,GAAG,CAAC,QAAQ,EAAE,cAAc,WAAW,EAAE,CAAC,CAAC;YAE9C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,OAAO,EAAE,wBAAwB,CAAC,CAAC;QAC1E,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;QAC5C,EAAE,CAAC,uCAAuC,EAAE,GAAS,EAAE;YACrD,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,aAAG,CAAC;iBAChC,GAAG,CAAC,0BAA0B,CAAC;iBAC/B,GAAG,CAAC,QAAQ,EAAE,cAAc,SAAS,EAAE,CAAC,CAAC;YAE5C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;YACtD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;YACpD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;YACxD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;YACtD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YACrD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;YACpD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;QACxD,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,GAAS,EAAE;YACvD,2BAA2B;YAC3B,MAAM,eAAM,CAAC,IAAI,CAAC,MAAM,CAAC;gBACvB,KAAK,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE;gBACrB,IAAI,EAAE,EAAE,SAAS,EAAE,IAAI,IAAI,EAAE,EAAE;aAChC,CAAC,CAAC;YAEH,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,aAAG,CAAC;iBAChC,GAAG,CAAC,0BAA0B,CAAC;iBAC/B,GAAG,CAAC,QAAQ,EAAE,cAAc,SAAS,EAAE,CAAC,CAAC;YAE5C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACvD,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;QACtC,EAAE,CAAC,8CAA8C,EAAE,GAAS,EAAE;YAC5D,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,aAAG,CAAC;iBAChC,GAAG,CAAC,oBAAoB,CAAC;iBACzB,GAAG,CAAC,QAAQ,EAAE,cAAc,aAAa,EAAE,CAAC;iBAC5C,IAAI,CAAC,EAAE,IAAI,EAAE,sBAAsB,EAAE,CAAC,CAAC;YAE1C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,EAAE,sBAAsB,CAAC,CAAC;QACvE,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,kDAAkD,EAAE,GAAS,EAAE;YAChE,MAAM,WAAW,GAAG;gBAClB,SAAS,EAAE;oBACT,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;oBAC9B,KAAK,EAAE,MAAM;iBACd;aACF,CAAC;YAEF,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,aAAG,CAAC;iBAChC,GAAG,CAAC,oBAAoB,CAAC;iBACzB,GAAG,CAAC,QAAQ,EAAE,cAAc,aAAa,EAAE,CAAC;iBAC5C,IAAI,CAAC,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC,CAAC;YAEnC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAElC,2CAA2C;YAC3C,MAAM,UAAU,GAAG,MAAM,eAAM,CAAC,YAAY,CAAC,UAAU,CAAC;gBACtD,KAAK,EAAE,EAAE,EAAE,EAAE,cAAc,EAAE;aAC9B,CAAC,CAAC;YACH,MAAM,CAAC,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,QAAQ,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QACpD,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,GAAS,EAAE;YACrD,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,aAAG,CAAC;iBAChC,GAAG,CAAC,oBAAoB,CAAC;iBACzB,GAAG,CAAC,QAAQ,EAAE,cAAc,SAAS,EAAE,CAAC;iBACxC,IAAI,CAAC,EAAE,IAAI,EAAE,sBAAsB,EAAE,CAAC,CAAC;YAE1C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,OAAO,EAAE,0BAA0B,CAAC,CAAC;QAC5E,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,GAAS,EAAE;YACzD,oBAAoB;YACpB,MAAM,KAAK,GAAG,MAAM,eAAM,CAAC,IAAI,CAAC,MAAM,CAAC;gBACrC,IAAI,EAAE;oBACJ,KAAK,EAAE,mBAAmB;oBAC1B,QAAQ,EAAE,iBAAiB;oBAC3B,KAAK,EAAE,CAAC,aAAI,CAAC,KAAK,CAAC;oBACnB,cAAc;iBACf;aACF,CAAC,CAAC;YACH,MAAM,UAAU,GAAG,sBAAG,CAAC,IAAI,CACzB,EAAE,MAAM,EAAE,KAAK,CAAC,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,EACxC,OAAO,CAAC,GAAG,CAAC,UAAW,EACvB,EAAE,SAAS,EAAE,IAAI,EAAE,CACpB,CAAC;YAEF,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,aAAG,CAAC;iBAChC,GAAG,CAAC,oBAAoB,CAAC;iBACzB,GAAG,CAAC,QAAQ,EAAE,cAAc,UAAU,EAAE,CAAC;iBACzC,IAAI,CAAC,EAAE,IAAI,EAAE,eAAe,EAAE,CAAC,CAAC;YAEnC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;QAChE,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,GAAS,EAAE;YACxD,IAAI;iBACD,KAAK,CAAC,eAAM,CAAC,YAAY,EAAE,QAAQ,CAAC;iBACpC,qBAAqB,CAAC,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;YAEhD,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,aAAG,CAAC;iBAChC,GAAG,CAAC,oBAAoB,CAAC;iBACzB,GAAG,CAAC,QAAQ,EAAE,cAAc,aAAa,EAAE,CAAC;iBAC5C,IAAI,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;YAE1B,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAClC,OAAO,EACP,+BAA+B,CAChC,CAAC;QACJ,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/integration/organizations.test.ts"],"sourcesContent":["import request from 'supertest';\nimport app from '../../src/app';\nimport { prisma } from '../../src/lib/prisma';\nimport jwt from 'jsonwebtoken';\nimport { Role } from '@prisma/client';\n\ndescribe('Organizations Routes', () => {\n  let authToken: string;\n  let orgAdminToken: string;\n  let userId: string;\n  let orgAdminId: string;\n  let organizationId: string;\n\n  beforeEach(async () => {\n    // Create test organization\n    const organization = await prisma.organization.create({\n      data: {\n        name: 'Test Organization',\n        slug: 'test-org',\n        settings: { dashboard: { layout: [] } },\n      },\n    });\n    organizationId = organization.id;\n\n    // Create regular user\n    const user = await prisma.user.create({\n      data: {\n        email: 'user@example.com',\n        password: 'hashed_password',\n        name: 'Regular User',\n        roles: [Role.viewer],\n        organizationId,\n      },\n    });\n    userId = user.id;\n    authToken = jwt.sign(\n      { userId: user.id, email: user.email },\n      process.env.JWT_SECRET!,\n      { expiresIn: '1d' }\n    );\n\n    // Create org admin\n    const orgAdmin = await prisma.user.create({\n      data: {\n        email: 'orgadmin@example.com',\n        password: 'hashed_password',\n        name: 'Org Admin',\n        roles: [Role.org_admin],\n        organizationId,\n      },\n    });\n    orgAdminId = orgAdmin.id;\n    orgAdminToken = jwt.sign(\n      { userId: orgAdmin.id, email: orgAdmin.email },\n      process.env.JWT_SECRET!,\n      { expiresIn: '1d' }\n    );\n\n    // Create test data\n    await prisma.widget.createMany({\n      data: [\n        {\n          widgetKey: 'widget1',\n          name: 'Test Widget 1',\n          companyId: (\n            await prisma.company.create({\n              data: {\n                name: 'Test Company',\n                email: 'company@example.com',\n                organizationId,\n              },\n            })\n          ).id,\n        },\n      ],\n    });\n\n    await prisma.fAQ.createMany({\n      data: [\n        {\n          question: 'Test FAQ 1',\n          answer: 'Test Answer 1',\n          organizationId,\n        },\n        {\n          question: 'Test FAQ 2',\n          answer: 'Test Answer 2',\n          organizationId,\n        },\n      ],\n    });\n  });\n\n  describe('GET /api/organizations', () => {\n    it('should return organization details for authenticated user', async () => {\n      const response = await request(app)\n        .get('/api/organizations')\n        .set('Cookie', `auth-token=${authToken}`);\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty('id', organizationId);\n      expect(response.body).toHaveProperty('name', 'Test Organization');\n      expect(response.body).toHaveProperty('slug', 'test-org');\n      expect(response.body).toHaveProperty('userCount', 2);\n      expect(response.body).toHaveProperty('widgetCount', 1);\n      expect(response.body).toHaveProperty('plan', 'pro');\n    });\n\n    it('should return 404 for user without organization', async () => {\n      // Create user without organization\n      const orphanUser = await prisma.user.create({\n        data: {\n          email: 'orphan@example.com',\n          password: 'hashed_password',\n        },\n      });\n      const orphanToken = jwt.sign(\n        { userId: orphanUser.id, email: orphanUser.email },\n        process.env.JWT_SECRET!,\n        { expiresIn: '1d' }\n      );\n\n      const response = await request(app)\n        .get('/api/organizations')\n        .set('Cookie', `auth-token=${orphanToken}`);\n\n      expect(response.status).toBe(404);\n      expect(response.body).toHaveProperty('error', 'Organization not found');\n    });\n  });\n\n  describe('GET /api/organizations/stats', () => {\n    it('should return organization statistics', async () => {\n      const response = await request(app)\n        .get('/api/organizations/stats')\n        .set('Cookie', `auth-token=${authToken}`);\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty('totalUsers', 2);\n      expect(response.body).toHaveProperty('activeUsers');\n      expect(response.body).toHaveProperty('totalWidgets', 1);\n      expect(response.body).toHaveProperty('totalChats', 0);\n      expect(response.body).toHaveProperty('totalFaqs', 2);\n      expect(response.body).toHaveProperty('storageUsed');\n      expect(response.body).toHaveProperty('apiCallsToday');\n    });\n\n    it('should calculate active users correctly', async () => {\n      // Update user to be active\n      await prisma.user.update({\n        where: { id: userId },\n        data: { updatedAt: new Date() },\n      });\n\n      const response = await request(app)\n        .get('/api/organizations/stats')\n        .set('Cookie', `auth-token=${authToken}`);\n\n      expect(response.status).toBe(200);\n      expect(response.body.activeUsers).toBeGreaterThan(0);\n    });\n  });\n\n  describe('PUT /api/organizations', () => {\n    it('should update organization name as org admin', async () => {\n      const response = await request(app)\n        .put('/api/organizations')\n        .set('Cookie', `auth-token=${orgAdminToken}`)\n        .send({ name: 'Updated Organization' });\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty('name', 'Updated Organization');\n    });\n\n    it('should update organization settings as org admin', async () => {\n      const newSettings = {\n        dashboard: {\n          layout: ['widget1', 'widget2'],\n          theme: 'dark',\n        },\n      };\n\n      const response = await request(app)\n        .put('/api/organizations')\n        .set('Cookie', `auth-token=${orgAdminToken}`)\n        .send({ settings: newSettings });\n\n      expect(response.status).toBe(200);\n\n      // Verify settings were updated in database\n      const updatedOrg = await prisma.organization.findUnique({\n        where: { id: organizationId },\n      });\n      expect(updatedOrg?.settings).toEqual(newSettings);\n    });\n\n    it('should return 403 for non-admin users', async () => {\n      const response = await request(app)\n        .put('/api/organizations')\n        .set('Cookie', `auth-token=${authToken}`)\n        .send({ name: 'Updated Organization' });\n\n      expect(response.status).toBe(403);\n      expect(response.body).toHaveProperty('error', 'Insufficient permissions');\n    });\n\n    it('should allow owner to update organization', async () => {\n      // Create owner user\n      const owner = await prisma.user.create({\n        data: {\n          email: 'owner@example.com',\n          password: 'hashed_password',\n          roles: [Role.owner],\n          organizationId,\n        },\n      });\n      const ownerToken = jwt.sign(\n        { userId: owner.id, email: owner.email },\n        process.env.JWT_SECRET!,\n        { expiresIn: '1d' }\n      );\n\n      const response = await request(app)\n        .put('/api/organizations')\n        .set('Cookie', `auth-token=${ownerToken}`)\n        .send({ name: 'Owner Updated' });\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty('name', 'Owner Updated');\n    });\n\n    it('should handle database errors gracefully', async () => {\n      jest\n        .spyOn(prisma.organization, 'update')\n        .mockRejectedValueOnce(new Error('DB Error'));\n\n      const response = await request(app)\n        .put('/api/organizations')\n        .set('Cookie', `auth-token=${orgAdminToken}`)\n        .send({ name: 'Test' });\n\n      expect(response.status).toBe(500);\n      expect(response.body).toHaveProperty(\n        'error',\n        'Failed to update organization'\n      );\n    });\n  });\n});\n"],"version":3}