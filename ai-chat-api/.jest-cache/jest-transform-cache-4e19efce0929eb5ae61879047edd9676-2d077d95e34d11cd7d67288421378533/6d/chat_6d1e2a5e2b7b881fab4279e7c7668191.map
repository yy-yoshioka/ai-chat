{"version":3,"names":["cov_1m9rutsmic","actualCoverage","express_1","s","require","prisma_1","auth_1","requireValidWidget_1","rateLimiter_1","knowledgeBaseService_1","webhookService_1","router","Router","callChatGPT","userMessage","conversationHistory","b","faqs","kbContext","f","apiKey","process","env","OPENAI_API_KEY","responses","Math","floor","random","length","systemPrompt","map","question","answer","join","messages","role","content","response","fetch","method","headers","Authorization","body","JSON","stringify","model","OPENAI_MODEL","max_tokens","temperature","top_p","frequency_penalty","presence_penalty","ok","errorData","json","console","error","Error","status","statusText","data","message","_c","_b","_a","choices","handleChatRequest","req","res","isWidgetRequest","trim","widget","rateLimitResult","rateLimiter","incrementAndCheck","widgetId","id","limit","period","allowed","resetTime","kbResults","searchKnowledgeBase","r","log","prisma","fAQ","findMany","where","OR","contains","take","recentChats","chatLog","orderBy","createdAt","userId","user","reverse","flatMap","chat","create","findUnique","include","company","_d","organizationId","webhookService","triggerWebhook","chatId","widgetName","name","timestamp","Date","toISOString","catch","sources","slice","includes","post","authMiddleware","__awaiter","requireValidWidget","get","page","query","pageNumber","parseInt","limitNumber","chats","skip","total","count","pagination","pages","ceil","exports","default"],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/routes/chat.ts"],"sourcesContent":["import { Router, Request, Response } from 'express';\nimport { prisma } from '../lib/prisma';\nimport { authMiddleware } from '../middleware/auth';\nimport {\n  requireValidWidget,\n  WidgetRequest,\n} from '../middleware/requireValidWidget';\nimport { rateLimiter } from '../utils/rateLimiter';\nimport { searchKnowledgeBase } from '../services/knowledgeBaseService';\nimport { webhookService } from '../services/webhookService';\nimport type { UserPayload } from '../utils/jwt';\n\nconst router = Router();\n\ninterface ChatRequest {\n  message: string;\n  widgetKey?: string;\n}\n\ninterface AuthRequest extends Request {\n  user?: UserPayload;\n}\n\ninterface OpenAIMessage {\n  role: 'system' | 'user' | 'assistant';\n  content: string;\n}\n\ninterface OpenAIResponse {\n  choices: { message: { content: string } }[];\n  error?: {\n    message: string;\n    type: string;\n  };\n}\n\nasync function callChatGPT(\n  userMessage: string,\n  conversationHistory: OpenAIMessage[] = [],\n  faqs: { question: string; answer: string }[] = [],\n  kbContext: string = ''\n): Promise<string> {\n  // Check if OpenAI API key is properly configured\n  const apiKey = process.env.OPENAI_API_KEY;\n  if (!apiKey || apiKey === 'your_openai_api_key_here') {\n    // Return a mock response for testing purposes\n    const responses = [\n      `こんにちは！「${userMessage}」についてお答えします。これはテスト用のレスポンスです。実際のOpenAI APIを使用するには、環境変数OPENAI_API_KEYに有効なAPIキーを設定してください。`,\n      `ご質問ありがとうございます。「${userMessage}」について考えてみました。現在はテストモードで動作しており、実際のAI応答を得るにはOpenAI APIキーの設定が必要です。`,\n      `「${userMessage}」についてのご質問ですね。現在はデモモードで動作しています。より詳細で正確な回答を得るには、有効なOpenAI APIキーを設定してください。`,\n    ];\n    // Return a random mock response\n    return responses[Math.floor(Math.random() * responses.length)];\n  }\n\n  // システムプロンプトを改善\n  const systemPrompt = `あなたは親切で知識豊富なAIアシスタントです。以下の特徴を持って回答してください：\n\n1. 日本語で自然で親しみやすい回答をする\n2. 質問に対して具体的で有用な情報を提供する\n3. 分からないことは正直に「分からない」と答える\n4. 必要に応じて追加の質問や clarification を求める\n5. 回答は適度な長さで、読みやすく構造化する\n\n${\n  kbContext\n    ? `\n以下のナレッジベースの情報を参考にしてください：\n${kbContext}\n`\n    : ''\n}\n\n${\n  faqs.length > 0\n    ? `\n以下のFAQ情報も参考にしてください：\n${faqs.map((f) => `Q: ${f.question}\\nA: ${f.answer}`).join('\\n\\n')}\n`\n    : ''\n}\n\nユーザーの質問に対して、親切で正確な回答を日本語で提供してください。`;\n\n  const messages: OpenAIMessage[] = [\n    {\n      role: 'system',\n      content: systemPrompt,\n    },\n    ...conversationHistory,\n    {\n      role: 'user',\n      content: userMessage,\n    },\n  ];\n\n  try {\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${apiKey}`,\n      },\n      body: JSON.stringify({\n        model: process.env.OPENAI_MODEL || 'gpt-3.5-turbo',\n        messages,\n        max_tokens: 1000,\n        temperature: 0.7,\n        top_p: 1,\n        frequency_penalty: 0,\n        presence_penalty: 0,\n      }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      console.error('OpenAI API error:', errorData);\n      throw new Error(\n        `OpenAI API error: ${response.status} ${response.statusText}`\n      );\n    }\n\n    const data = (await response.json()) as OpenAIResponse;\n\n    if (data.error) {\n      console.error('OpenAI error:', data.error);\n      throw new Error(`OpenAI error: ${data.error.message}`);\n    }\n\n    return (\n      data.choices?.[0]?.message?.content ||\n      'すみません、回答を生成できませんでした。'\n    );\n  } catch (error) {\n    console.error('Error calling ChatGPT:', error);\n    throw error;\n  }\n}\n\n// Chat endpoint that handles both authenticated users and widget requests\nasync function handleChatRequest(\n  req: AuthRequest & WidgetRequest,\n  res: Response,\n  isWidgetRequest: boolean = false\n): Promise<void> {\n  try {\n    const { message } = req.body as ChatRequest;\n\n    if (\n      !message ||\n      typeof message !== 'string' ||\n      message.trim().length === 0\n    ) {\n      res.status(400).json({\n        error: 'メッセージが必要です',\n        message: 'Message is required',\n      });\n      return;\n    }\n\n    // メッセージの長さ制限\n    if (message.length > 2000) {\n      res.status(400).json({\n        error: 'メッセージが長すぎます（2000文字以内）',\n        message: 'Message too long (max 2000 characters)',\n      });\n      return;\n    }\n\n    // Rate limiting for widget requests\n    if (isWidgetRequest && req.widget) {\n      const rateLimitResult = await rateLimiter.incrementAndCheck({\n        widgetId: req.widget.id,\n        limit: 50, // 50 requests per period\n        period: 3600, // 1 hour\n      });\n\n      if (!rateLimitResult.allowed) {\n        res.status(429).json({\n          error: 'Rate limit exceeded. Please try again later.',\n          resetTime: rateLimitResult.resetTime,\n        });\n        return;\n      }\n    }\n\n    // Knowledge Base検索\n    let kbResults: Array<{\n      score: number;\n      content: string;\n      metadata: unknown;\n    }> = [];\n    let kbContext = '';\n    if (isWidgetRequest && req.widget) {\n      try {\n        kbResults = await searchKnowledgeBase(req.widget.id, message);\n        kbContext = kbResults.map((r) => r.content).join('\\n\\n');\n      } catch (error) {\n        console.log('Knowledge base search failed:', error);\n      }\n    }\n\n    // 関連するFAQを検索（キーワードマッチング）\n    const faqs = await prisma.fAQ.findMany({\n      where: {\n        OR: [\n          { question: { contains: message } },\n          { answer: { contains: message } },\n        ],\n      },\n      take: 3,\n    });\n\n    // 過去の会話履歴を取得（最新5件）\n    let recentChats;\n    if (isWidgetRequest && req.widget) {\n      // For widget requests, get recent chats for this widget\n      recentChats = await prisma.chatLog.findMany({\n        where: {\n          widgetId: req.widget.id,\n        },\n        orderBy: {\n          createdAt: 'desc',\n        },\n        take: 5,\n      });\n    } else {\n      // For authenticated users, get their personal chat history\n      recentChats = await prisma.chatLog.findMany({\n        where: {\n          userId: req.user?.id,\n        },\n        orderBy: {\n          createdAt: 'desc',\n        },\n        take: 5,\n      });\n    }\n\n    // 会話履歴をOpenAI形式に変換\n    const conversationHistory: OpenAIMessage[] = recentChats\n      .reverse() // 古い順に並び替え\n      .flatMap((chat: { question: string; answer: string }) => [\n        { role: 'user' as const, content: chat.question },\n        { role: 'assistant' as const, content: chat.answer },\n      ]);\n\n    // ChatGPT API呼び出し\n    const answer = await callChatGPT(\n      message,\n      conversationHistory,\n      faqs,\n      kbContext\n    );\n\n    // チャットログを保存\n    const chatLog = await prisma.chatLog.create({\n      data: {\n        question: message,\n        answer,\n        userId: isWidgetRequest ? null : req.user?.id,\n        widgetId: isWidgetRequest ? req.widget?.id : null,\n      },\n    });\n\n    // Trigger webhook for chat.created event\n    if (isWidgetRequest && req.widget) {\n      // Get organization ID from widget\n      const widget = await prisma.widget.findUnique({\n        where: { id: req.widget.id },\n        include: { company: true },\n      });\n\n      if (widget?.company?.organizationId) {\n        webhookService\n          .triggerWebhook(widget.company.organizationId, 'chat.created', {\n            chatId: chatLog.id,\n            widgetId: req.widget.id,\n            widgetName: req.widget.name,\n            question: message,\n            answer,\n            timestamp: new Date().toISOString(),\n          })\n          .catch((error) => {\n            console.error('Failed to trigger webhook:', error);\n          });\n      }\n    }\n\n    res.json({\n      answer,\n      timestamp: new Date().toISOString(),\n      sources: kbResults.slice(0, 3), // 上位3件のソースを返す\n    });\n  } catch (error) {\n    console.error('Chat error:', error);\n\n    if (error instanceof Error) {\n      if (error.message.includes('OPENAI_API_KEY')) {\n        res.status(500).json({\n          error: 'OpenAI APIキーが設定されていません',\n          message: 'OpenAI API key not configured',\n        });\n        return;\n      }\n\n      if (\n        error.message.includes('rate limit') ||\n        error.message.includes('quota')\n      ) {\n        res.status(429).json({\n          error:\n            'APIの利用制限に達しました。しばらく時間をおいてからお試しください。',\n          message: 'Rate limit exceeded',\n        });\n        return;\n      }\n    }\n\n    res.status(500).json({\n      error: '申し訳ございません。一時的なエラーが発生しました。',\n      message: 'Internal server error',\n    });\n  }\n}\n\n// Authenticated user chat endpoint\nrouter.post('/', authMiddleware, async (req: AuthRequest, res: Response) => {\n  await handleChatRequest(req as AuthRequest & WidgetRequest, res, false);\n});\n\n// Widget chat endpoint (no authentication required)\nrouter.post(\n  '/widget/:widgetKey',\n  requireValidWidget,\n  async (req: WidgetRequest, res: Response) => {\n    await handleChatRequest(req as AuthRequest & WidgetRequest, res, true);\n  }\n);\n\n// チャット履歴取得エンドポイント\nrouter.get(\n  '/history',\n  authMiddleware,\n  async (req: AuthRequest, res: Response) => {\n    try {\n      const { page = 1, limit = 20 } = req.query;\n      const pageNumber = parseInt(page as string);\n      const limitNumber = parseInt(limit as string);\n\n      const chats = await prisma.chatLog.findMany({\n        where: {\n          userId: req.user?.id,\n        },\n        orderBy: {\n          createdAt: 'desc',\n        },\n        skip: (pageNumber - 1) * limitNumber,\n        take: limitNumber,\n      });\n\n      const total = await prisma.chatLog.count({\n        where: {\n          userId: req.user?.id,\n        },\n      });\n\n      res.json({\n        chats,\n        pagination: {\n          page: pageNumber,\n          limit: limitNumber,\n          total,\n          pages: Math.ceil(total / limitNumber),\n        },\n      });\n    } catch (error) {\n      console.error('Error fetching chat history:', error);\n      res.status(500).json({\n        error: 'チャット履歴の取得に失敗しました',\n        message: 'Failed to fetch chat history',\n      });\n    }\n  }\n);\n\nexport default router;\n"],"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","ignoreList":[]}