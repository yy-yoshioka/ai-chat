{"version":3,"names":["express_1","cov_1whxj8fcvr","s","require","auth_1","jwt_1","password_1","prisma_1","router","Router","post","req","res","f","__awaiter","email","password","body","console","log","b","status","json","message","user","prisma","findUnique","where","isPasswordValid","verifyPassword","signToken","id","isAdmin","_password","userData","__rest","error","name","existingUser","hashedPassword","hashPassword","create","data","get","authMiddleware","_a","exports","default"],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/routes/auth.ts"],"sourcesContent":["import { Router, Request, Response } from 'express';\nimport { authMiddleware } from '../middleware/auth';\nimport { signToken } from '../utils/jwt';\nimport { hashPassword, verifyPassword } from '../utils/password';\nimport { prisma } from '../lib/prisma';\n\nconst router = Router();\n\n// POST /auth/login - User login\nrouter.post('/login', async (req: Request, res: Response) => {\n  try {\n    const { email, password } = req.body;\n\n    console.log(email, password);\n\n    // Simple validation\n    if (!email || !password) {\n      return res\n        .status(400)\n        .json({ message: 'Email and password are required' });\n    }\n\n    // Find user by email\n    const user = await prisma.user.findUnique({\n      where: { email },\n    });\n\n    if (!user) {\n      return res.status(401).json({ message: 'Invalid credentials' });\n    }\n\n    // Verify password\n    const isPasswordValid = await verifyPassword(password, user.password);\n\n    if (!isPasswordValid) {\n      return res.status(401).json({ message: 'Invalid credentials' });\n    }\n\n    // Generate JWT and set cookie\n    signToken({ id: user.id, email: user.email, isAdmin: user.isAdmin }, res);\n\n    // Return user data (excluding password)\n    const { password: _password, ...userData } = user;\n    res.status(200).json({\n      message: 'Login successful',\n      user: userData,\n    });\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\n// POST /auth/signup - User registration\nrouter.post('/signup', async (req: Request, res: Response) => {\n  try {\n    const { email, password, name } = req.body;\n\n    // Simple validation\n    if (!email || !password) {\n      return res\n        .status(400)\n        .json({ message: 'Email and password are required' });\n    }\n\n    // Check if user already exists\n    const existingUser = await prisma.user.findUnique({\n      where: { email },\n    });\n\n    if (existingUser) {\n      return res.status(409).json({ message: 'User already exists' });\n    }\n\n    // Hash password\n    const hashedPassword = await hashPassword(password);\n\n    // Create new user\n    const user = await prisma.user.create({\n      data: {\n        email,\n        password: hashedPassword,\n        name: name || null,\n      },\n    });\n\n    // Generate JWT and set cookie\n    signToken({ id: user.id, email: user.email, isAdmin: user.isAdmin }, res);\n\n    // Return user data (excluding password)\n    const { password: _password, ...userData } = user;\n    res.status(201).json({\n      message: 'User created successfully',\n      user: userData,\n    });\n  } catch (error) {\n    console.error('Signup error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\n// GET /auth/me - Get current user info (protected route)\nrouter.get('/me', authMiddleware, async (req: Request, res: Response) => {\n  try {\n    // Get user from database using the ID from JWT\n    const user = await prisma.user.findUnique({\n      where: { id: req.user?.id },\n    });\n\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n\n    // Return user data (excluding password)\n    const { password: _password, ...userData } = user;\n    res.status(200).json({\n      message: 'User authenticated',\n      user: userData,\n    });\n  } catch (error) {\n    console.error('Auth/me error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\nexport default router;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAAA,SAAA;AAAA;AAAA,CAAAC,cAAA,GAAAC,CAAA,QAAAC,OAAA;AACA,MAAAC,MAAA;AAAA;AAAA,CAAAH,cAAA,GAAAC,CAAA,QAAAC,OAAA;AACA,MAAAE,KAAA;AAAA;AAAA,CAAAJ,cAAA,GAAAC,CAAA,QAAAC,OAAA;AACA,MAAAG,UAAA;AAAA;AAAA,CAAAL,cAAA,GAAAC,CAAA,QAAAC,OAAA;AACA,MAAAI,QAAA;AAAA;AAAA,CAAAN,cAAA,GAAAC,CAAA,QAAAC,OAAA;AAEA,MAAMK,MAAM;AAAA;AAAA,CAAAP,cAAA,GAAAC,CAAA,QAAG,IAAAF,SAAA,CAAAS,MAAM,GAAE;AAEvB;AAAA;AAAAR,cAAA,GAAAC,CAAA;AACAM,MAAM,CAACE,IAAI,CAAC,QAAQ,EAAE,CAAOC,GAAY,EAAEC,GAAa,KAAI;EAAA;EAAAX,cAAA,GAAAY,CAAA;EAAAZ,cAAA,GAAAC,CAAA;EAAA,OAAAY,SAAA;IAAA;IAAAb,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAC,CAAA;IAC1D,IAAI;MACF,MAAM;QAAEa,KAAK;QAAEC;MAAQ,CAAE;MAAA;MAAA,CAAAf,cAAA,GAAAC,CAAA,QAAGS,GAAG,CAACM,IAAI;MAAC;MAAAhB,cAAA,GAAAC,CAAA;MAErCgB,OAAO,CAACC,GAAG,CAACJ,KAAK,EAAEC,QAAQ,CAAC;MAE5B;MAAA;MAAAf,cAAA,GAAAC,CAAA;MACA;MAAI;MAAA,CAAAD,cAAA,GAAAmB,CAAA,YAACL,KAAK;MAAA;MAAA,CAAAd,cAAA,GAAAmB,CAAA,WAAI,CAACJ,QAAQ,GAAE;QAAA;QAAAf,cAAA,GAAAmB,CAAA;QAAAnB,cAAA,GAAAC,CAAA;QACvB,OAAOU,GAAG,CACPS,MAAM,CAAC,GAAG,CAAC,CACXC,IAAI,CAAC;UAAEC,OAAO,EAAE;QAAiC,CAAE,CAAC;MACzD,CAAC;MAAA;MAAA;QAAAtB,cAAA,GAAAmB,CAAA;MAAA;MAED;MACA,MAAMI,IAAI;MAAA;MAAA,CAAAvB,cAAA,GAAAC,CAAA,QAAG,MAAMK,QAAA,CAAAkB,MAAM,CAACD,IAAI,CAACE,UAAU,CAAC;QACxCC,KAAK,EAAE;UAAEZ;QAAK;OACf,CAAC;MAAC;MAAAd,cAAA,GAAAC,CAAA;MAEH,IAAI,CAACsB,IAAI,EAAE;QAAA;QAAAvB,cAAA,GAAAmB,CAAA;QAAAnB,cAAA,GAAAC,CAAA;QACT,OAAOU,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAAEC,OAAO,EAAE;QAAqB,CAAE,CAAC;MACjE,CAAC;MAAA;MAAA;QAAAtB,cAAA,GAAAmB,CAAA;MAAA;MAED;MACA,MAAMQ,eAAe;MAAA;MAAA,CAAA3B,cAAA,GAAAC,CAAA,QAAG,MAAM,IAAAI,UAAA,CAAAuB,cAAc,EAACb,QAAQ,EAAEQ,IAAI,CAACR,QAAQ,CAAC;MAAC;MAAAf,cAAA,GAAAC,CAAA;MAEtE,IAAI,CAAC0B,eAAe,EAAE;QAAA;QAAA3B,cAAA,GAAAmB,CAAA;QAAAnB,cAAA,GAAAC,CAAA;QACpB,OAAOU,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAAEC,OAAO,EAAE;QAAqB,CAAE,CAAC;MACjE,CAAC;MAAA;MAAA;QAAAtB,cAAA,GAAAmB,CAAA;MAAA;MAED;MAAAnB,cAAA,GAAAC,CAAA;MACA,IAAAG,KAAA,CAAAyB,SAAS,EAAC;QAAEC,EAAE,EAAEP,IAAI,CAACO,EAAE;QAAEhB,KAAK,EAAES,IAAI,CAACT,KAAK;QAAEiB,OAAO,EAAER,IAAI,CAACQ;MAAO,CAAE,EAAEpB,GAAG,CAAC;MAEzE;MACA,MAAM;UAAEI,QAAQ,EAAEiB;QAAS;QAAA;QAAA,CAAAhC,cAAA,GAAAC,CAAA,QAAkBsB,IAAI;QAAjBU,QAAQ;QAAA;QAAA,CAAAjC,cAAA,GAAAC,CAAA,QAAAiC,MAAA,CAAKX,IAAI,EAA3C,YAAoC,CAAO;MAAC;MAAAvB,cAAA,GAAAC,CAAA;MAClDU,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACnBC,OAAO,EAAE,kBAAkB;QAC3BC,IAAI,EAAEU;OACP,CAAC;IACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;MAAA;MAAAnC,cAAA,GAAAC,CAAA;MACdgB,OAAO,CAACkB,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MAAC;MAAAnC,cAAA,GAAAC,CAAA;MACrCU,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAuB,CAAE,CAAC;IAC5D;EACF,CAAC;AAAA,EAAC;AAEF;AAAA;AAAAtB,cAAA,GAAAC,CAAA;AACAM,MAAM,CAACE,IAAI,CAAC,SAAS,EAAE,CAAOC,GAAY,EAAEC,GAAa,KAAI;EAAA;EAAAX,cAAA,GAAAY,CAAA;EAAAZ,cAAA,GAAAC,CAAA;EAAA,OAAAY,SAAA;IAAA;IAAAb,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAC,CAAA;IAC3D,IAAI;MACF,MAAM;QAAEa,KAAK;QAAEC,QAAQ;QAAEqB;MAAI,CAAE;MAAA;MAAA,CAAApC,cAAA,GAAAC,CAAA,QAAGS,GAAG,CAACM,IAAI;MAE1C;MAAA;MAAAhB,cAAA,GAAAC,CAAA;MACA;MAAI;MAAA,CAAAD,cAAA,GAAAmB,CAAA,YAACL,KAAK;MAAA;MAAA,CAAAd,cAAA,GAAAmB,CAAA,WAAI,CAACJ,QAAQ,GAAE;QAAA;QAAAf,cAAA,GAAAmB,CAAA;QAAAnB,cAAA,GAAAC,CAAA;QACvB,OAAOU,GAAG,CACPS,MAAM,CAAC,GAAG,CAAC,CACXC,IAAI,CAAC;UAAEC,OAAO,EAAE;QAAiC,CAAE,CAAC;MACzD,CAAC;MAAA;MAAA;QAAAtB,cAAA,GAAAmB,CAAA;MAAA;MAED;MACA,MAAMkB,YAAY;MAAA;MAAA,CAAArC,cAAA,GAAAC,CAAA,QAAG,MAAMK,QAAA,CAAAkB,MAAM,CAACD,IAAI,CAACE,UAAU,CAAC;QAChDC,KAAK,EAAE;UAAEZ;QAAK;OACf,CAAC;MAAC;MAAAd,cAAA,GAAAC,CAAA;MAEH,IAAIoC,YAAY,EAAE;QAAA;QAAArC,cAAA,GAAAmB,CAAA;QAAAnB,cAAA,GAAAC,CAAA;QAChB,OAAOU,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAAEC,OAAO,EAAE;QAAqB,CAAE,CAAC;MACjE,CAAC;MAAA;MAAA;QAAAtB,cAAA,GAAAmB,CAAA;MAAA;MAED;MACA,MAAMmB,cAAc;MAAA;MAAA,CAAAtC,cAAA,GAAAC,CAAA,QAAG,MAAM,IAAAI,UAAA,CAAAkC,YAAY,EAACxB,QAAQ,CAAC;MAEnD;MACA,MAAMQ,IAAI;MAAA;MAAA,CAAAvB,cAAA,GAAAC,CAAA,QAAG,MAAMK,QAAA,CAAAkB,MAAM,CAACD,IAAI,CAACiB,MAAM,CAAC;QACpCC,IAAI,EAAE;UACJ3B,KAAK;UACLC,QAAQ,EAAEuB,cAAc;UACxBF,IAAI;UAAE;UAAA,CAAApC,cAAA,GAAAmB,CAAA,WAAAiB,IAAI;UAAA;UAAA,CAAApC,cAAA,GAAAmB,CAAA,WAAI,IAAI;;OAErB,CAAC;MAEF;MAAA;MAAAnB,cAAA,GAAAC,CAAA;MACA,IAAAG,KAAA,CAAAyB,SAAS,EAAC;QAAEC,EAAE,EAAEP,IAAI,CAACO,EAAE;QAAEhB,KAAK,EAAES,IAAI,CAACT,KAAK;QAAEiB,OAAO,EAAER,IAAI,CAACQ;MAAO,CAAE,EAAEpB,GAAG,CAAC;MAEzE;MACA,MAAM;UAAEI,QAAQ,EAAEiB;QAAS;QAAA;QAAA,CAAAhC,cAAA,GAAAC,CAAA,QAAkBsB,IAAI;QAAjBU,QAAQ;QAAA;QAAA,CAAAjC,cAAA,GAAAC,CAAA,QAAAiC,MAAA,CAAKX,IAAI,EAA3C,YAAoC,CAAO;MAAC;MAAAvB,cAAA,GAAAC,CAAA;MAClDU,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACnBC,OAAO,EAAE,2BAA2B;QACpCC,IAAI,EAAEU;OACP,CAAC;IACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;MAAA;MAAAnC,cAAA,GAAAC,CAAA;MACdgB,OAAO,CAACkB,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MAAC;MAAAnC,cAAA,GAAAC,CAAA;MACtCU,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAuB,CAAE,CAAC;IAC5D;EACF,CAAC;AAAA,EAAC;AAEF;AAAA;AAAAtB,cAAA,GAAAC,CAAA;AACAM,MAAM,CAACmC,GAAG,CAAC,KAAK,EAAEvC,MAAA,CAAAwC,cAAc,EAAE,CAAOjC,GAAY,EAAEC,GAAa,KAAI;EAAA;EAAAX,cAAA,GAAAY,CAAA;EAAAZ,cAAA,GAAAC,CAAA;EAAA,OAAAY,SAAA;IAAA;IAAAb,cAAA,GAAAY,CAAA;;;;IACtE,IAAI;MACF;MACA,MAAMW,IAAI;MAAA;MAAA,CAAAvB,cAAA,GAAAC,CAAA,QAAG,MAAMK,QAAA,CAAAkB,MAAM,CAACD,IAAI,CAACE,UAAU,CAAC;QACxCC,KAAK,EAAE;UAAEI,EAAE;UAAE;UAAA,CAAA9B,cAAA,GAAAmB,CAAA,YAAAyB,EAAA,GAAAlC,GAAG,CAACa,IAAI;UAAA;UAAA,CAAAvB,cAAA,GAAAmB,CAAA,WAAAyB,EAAA;UAAA;UAAA,CAAA5C,cAAA,GAAAmB,CAAA;UAAA;UAAA,CAAAnB,cAAA,GAAAmB,CAAA,WAAAyB,EAAA,CAAEd,EAAE;QAAA;OAC1B,CAAC;MAAC;MAAA9B,cAAA,GAAAC,CAAA;MAEH,IAAI,CAACsB,IAAI,EAAE;QAAA;QAAAvB,cAAA,GAAAmB,CAAA;QAAAnB,cAAA,GAAAC,CAAA;QACT,OAAOU,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAAEC,OAAO,EAAE;QAAgB,CAAE,CAAC;MAC5D,CAAC;MAAA;MAAA;QAAAtB,cAAA,GAAAmB,CAAA;MAAA;MAED;MACA,MAAM;UAAEJ,QAAQ,EAAEiB;QAAS;QAAA;QAAA,CAAAhC,cAAA,GAAAC,CAAA,QAAkBsB,IAAI;QAAjBU,QAAQ;QAAA;QAAA,CAAAjC,cAAA,GAAAC,CAAA,QAAAiC,MAAA,CAAKX,IAAI,EAA3C,YAAoC,CAAO;MAAC;MAAAvB,cAAA,GAAAC,CAAA;MAClDU,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACnBC,OAAO,EAAE,oBAAoB;QAC7BC,IAAI,EAAEU;OACP,CAAC;IACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;MAAA;MAAAnC,cAAA,GAAAC,CAAA;MACdgB,OAAO,CAACkB,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MAAC;MAAAnC,cAAA,GAAAC,CAAA;MACvCU,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAuB,CAAE,CAAC;IAC5D;EACF,CAAC;AAAA,EAAC;AAAC;AAAAtB,cAAA,GAAAC,CAAA;AAEH4C,OAAA,CAAAC,OAAA,GAAevC,MAAM","ignoreList":[]}