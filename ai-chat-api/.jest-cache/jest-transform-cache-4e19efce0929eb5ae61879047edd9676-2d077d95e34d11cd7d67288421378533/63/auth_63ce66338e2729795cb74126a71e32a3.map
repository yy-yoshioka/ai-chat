{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/middleware/auth.ts","mappings":";;;;;;;;;;;;AACA,sCAAwD;AACxD,0CAAuC;AASvC,4BAA4B;AACrB,MAAM,cAAc,GAAG,CAC5B,GAAY,EACZ,GAAa,EACb,IAAkB,EAClB,EAAE;;IACF,IAAI,CAAC;QACH,IAAI,KAAyB,CAAC;QAE9B,mEAAmE;QACnE,MAAM,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC;QAC7C,IAAI,UAAU,IAAI,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;YACnD,KAAK,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,0BAA0B;QAC7D,CAAC;QAED,gEAAgE;QAChE,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,KAAK,GAAG,MAAA,GAAG,CAAC,OAAO,0CAAE,KAAK,CAAC;QAC7B,CAAC;QAED,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,cAAc,EAAE,CAAC,CAAC;QACzD,CAAC;QAED,0CAA0C;QAC1C,IAAI,IAAI,CAAC;QACT,IAAI,CAAC;YACH,IAAI,GAAG,IAAA,iBAAW,EAAC,KAAK,CAAC,CAAC;QAC5B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,KAAK,YAAY,KAAK,IAAI,KAAK,CAAC,OAAO,KAAK,aAAa,EAAE,CAAC;gBAC9D,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,eAAe,EAAE,CAAC,CAAC;YAC1D,CAAC;YACD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,eAAe,EAAE,CAAC,CAAC;QAC1D,CAAC;QAED,6BAA6B;QAC7B,MAAM,MAAM,GAAG,MAAM,eAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAC1C,KAAK,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE;YACtB,MAAM,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE;SAC/C,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,gBAAgB,EAAE,CAAC,CAAC;QAC3D,CAAC;QAED,GAAG,CAAC,IAAI,mCAAQ,IAAI,KAAE,KAAK,EAAE,MAAM,CAAC,KAAK,GAAE,CAAC;QAC5C,IAAI,EAAE,CAAC;IACT,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;QAC/C,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,uBAAuB,EAAE,CAAC,CAAC;IAClE,CAAC;AACH,CAAC,CAAA,CAAC;AAlDW,QAAA,cAAc,kBAkDzB","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/middleware/auth.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { verifyToken, UserPayload } from '../utils/jwt';\nimport { prisma } from '../lib/prisma';\n\n// Extend Express Request type to include user\ndeclare module 'express' {\n  interface Request {\n    user?: UserPayload & { roles?: string[] };\n  }\n}\n\n// Authentication middleware\nexport const authMiddleware = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    let token: string | undefined;\n\n    // Try to get token from Authorization header first (for API calls)\n    const authHeader = req.headers.authorization;\n    if (authHeader && authHeader.startsWith('Bearer ')) {\n      token = authHeader.substring(7); // Remove 'Bearer ' prefix\n    }\n\n    // If no token in header, try cookies (for direct browser calls)\n    if (!token) {\n      token = req.cookies?.token;\n    }\n\n    if (!token) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    // Verify token and attach user to request\n    let user;\n    try {\n      user = verifyToken(token);\n    } catch (error) {\n      if (error instanceof Error && error.message === 'jwt expired') {\n        return res.status(401).json({ error: 'Token expired' });\n      }\n      return res.status(401).json({ error: 'Invalid token' });\n    }\n\n    // Check if user still exists\n    const dbUser = await prisma.user.findUnique({\n      where: { id: user.id },\n      select: { id: true, email: true, roles: true },\n    });\n\n    if (!dbUser) {\n      return res.status(401).json({ error: 'User not found' });\n    }\n\n    req.user = { ...user, roles: dbUser.roles };\n    next();\n  } catch (error) {\n    console.error('Auth middleware error:', error);\n    return res.status(500).json({ error: 'Internal server error' });\n  }\n};\n"],"version":3}