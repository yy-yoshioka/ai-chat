e40af743f9fae8e766866e5ffb25b86c
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const prisma_1 = require("../lib/prisma");
const auth_1 = require("../middleware/auth");
const requireValidWidget_1 = require("../middleware/requireValidWidget");
const rateLimiter_1 = require("../utils/rateLimiter");
const knowledgeBaseService_1 = require("../services/knowledgeBaseService");
const webhookService_1 = require("../services/webhookService");
const router = (0, express_1.Router)();
function callChatGPT(userMessage, conversationHistory = [], faqs = [], kbContext = '') {
    var _a, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        // Check if OpenAI API key is properly configured
        const apiKey = process.env.OPENAI_API_KEY;
        if (!apiKey || apiKey === 'your_openai_api_key_here') {
            // Return a mock response for testing purposes
            const responses = [
                `こんにちは！「${userMessage}」についてお答えします。これはテスト用のレスポンスです。実際のOpenAI APIを使用するには、環境変数OPENAI_API_KEYに有効なAPIキーを設定してください。`,
                `ご質問ありがとうございます。「${userMessage}」について考えてみました。現在はテストモードで動作しており、実際のAI応答を得るにはOpenAI APIキーの設定が必要です。`,
                `「${userMessage}」についてのご質問ですね。現在はデモモードで動作しています。より詳細で正確な回答を得るには、有効なOpenAI APIキーを設定してください。`,
            ];
            // Return a random mock response
            return responses[Math.floor(Math.random() * responses.length)];
        }
        // システムプロンプトを改善
        const systemPrompt = `あなたは親切で知識豊富なAIアシスタントです。以下の特徴を持って回答してください：

1. 日本語で自然で親しみやすい回答をする
2. 質問に対して具体的で有用な情報を提供する
3. 分からないことは正直に「分からない」と答える
4. 必要に応じて追加の質問や clarification を求める
5. 回答は適度な長さで、読みやすく構造化する

${kbContext
            ? `
以下のナレッジベースの情報を参考にしてください：
${kbContext}
`
            : ''}

${faqs.length > 0
            ? `
以下のFAQ情報も参考にしてください：
${faqs.map((f) => `Q: ${f.question}\nA: ${f.answer}`).join('\n\n')}
`
            : ''}

ユーザーの質問に対して、親切で正確な回答を日本語で提供してください。`;
        const messages = [
            {
                role: 'system',
                content: systemPrompt,
            },
            ...conversationHistory,
            {
                role: 'user',
                content: userMessage,
            },
        ];
        try {
            const response = yield fetch('https://api.openai.com/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${apiKey}`,
                },
                body: JSON.stringify({
                    model: process.env.OPENAI_MODEL || 'gpt-3.5-turbo',
                    messages,
                    max_tokens: 1000,
                    temperature: 0.7,
                    top_p: 1,
                    frequency_penalty: 0,
                    presence_penalty: 0,
                }),
            });
            if (!response.ok) {
                const errorData = yield response.json();
                console.error('OpenAI API error:', errorData);
                throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);
            }
            const data = (yield response.json());
            if (data.error) {
                console.error('OpenAI error:', data.error);
                throw new Error(`OpenAI error: ${data.error.message}`);
            }
            return (((_c = (_b = (_a = data.choices) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.message) === null || _c === void 0 ? void 0 : _c.content) ||
                'すみません、回答を生成できませんでした。');
        }
        catch (error) {
            console.error('Error calling ChatGPT:', error);
            throw error;
        }
    });
}
// Chat endpoint that handles both authenticated users and widget requests
function handleChatRequest(req, res, isWidgetRequest = false) {
    var _a, _b, _c, _d;
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const { message } = req.body;
            if (!message ||
                typeof message !== 'string' ||
                message.trim().length === 0) {
                res.status(400).json({
                    error: 'メッセージが必要です',
                    message: 'Message is required',
                });
                return;
            }
            // メッセージの長さ制限
            if (message.length > 2000) {
                res.status(400).json({
                    error: 'メッセージが長すぎます（2000文字以内）',
                    message: 'Message too long (max 2000 characters)',
                });
                return;
            }
            // Rate limiting for widget requests
            if (isWidgetRequest && req.widget) {
                const rateLimitResult = yield rateLimiter_1.rateLimiter.incrementAndCheck({
                    widgetId: req.widget.id,
                    limit: 50, // 50 requests per period
                    period: 3600, // 1 hour
                });
                if (!rateLimitResult.allowed) {
                    res.status(429).json({
                        error: 'Rate limit exceeded. Please try again later.',
                        resetTime: rateLimitResult.resetTime,
                    });
                    return;
                }
            }
            // Knowledge Base検索
            let kbResults = [];
            let kbContext = '';
            if (isWidgetRequest && req.widget) {
                try {
                    kbResults = yield (0, knowledgeBaseService_1.searchKnowledgeBase)(req.widget.id, message);
                    kbContext = kbResults.map((r) => r.content).join('\n\n');
                }
                catch (error) {
                    console.log('Knowledge base search failed:', error);
                }
            }
            // 関連するFAQを検索（キーワードマッチング）
            const faqs = yield prisma_1.prisma.fAQ.findMany({
                where: {
                    OR: [
                        { question: { contains: message } },
                        { answer: { contains: message } },
                    ],
                },
                take: 3,
            });
            // 過去の会話履歴を取得（最新5件）
            let recentChats;
            if (isWidgetRequest && req.widget) {
                // For widget requests, get recent chats for this widget
                recentChats = yield prisma_1.prisma.chatLog.findMany({
                    where: {
                        widgetId: req.widget.id,
                    },
                    orderBy: {
                        createdAt: 'desc',
                    },
                    take: 5,
                });
            }
            else {
                // For authenticated users, get their personal chat history
                recentChats = yield prisma_1.prisma.chatLog.findMany({
                    where: {
                        userId: (_a = req.user) === null || _a === void 0 ? void 0 : _a.id,
                    },
                    orderBy: {
                        createdAt: 'desc',
                    },
                    take: 5,
                });
            }
            // 会話履歴をOpenAI形式に変換
            const conversationHistory = recentChats
                .reverse() // 古い順に並び替え
                .flatMap((chat) => [
                { role: 'user', content: chat.question },
                { role: 'assistant', content: chat.answer },
            ]);
            // ChatGPT API呼び出し
            const answer = yield callChatGPT(message, conversationHistory, faqs, kbContext);
            // チャットログを保存
            const chatLog = yield prisma_1.prisma.chatLog.create({
                data: {
                    question: message,
                    answer,
                    userId: isWidgetRequest ? null : (_b = req.user) === null || _b === void 0 ? void 0 : _b.id,
                    widgetId: isWidgetRequest ? (_c = req.widget) === null || _c === void 0 ? void 0 : _c.id : null,
                },
            });
            // Trigger webhook for chat.created event
            if (isWidgetRequest && req.widget) {
                // Get organization ID from widget
                const widget = yield prisma_1.prisma.widget.findUnique({
                    where: { id: req.widget.id },
                    include: { company: true },
                });
                if ((_d = widget === null || widget === void 0 ? void 0 : widget.company) === null || _d === void 0 ? void 0 : _d.organizationId) {
                    webhookService_1.webhookService
                        .triggerWebhook(widget.company.organizationId, 'chat.created', {
                        chatId: chatLog.id,
                        widgetId: req.widget.id,
                        widgetName: req.widget.name,
                        question: message,
                        answer,
                        timestamp: new Date().toISOString(),
                    })
                        .catch((error) => {
                        console.error('Failed to trigger webhook:', error);
                    });
                }
            }
            res.json({
                answer,
                timestamp: new Date().toISOString(),
                sources: kbResults.slice(0, 3), // 上位3件のソースを返す
            });
        }
        catch (error) {
            console.error('Chat error:', error);
            if (error instanceof Error) {
                if (error.message.includes('OPENAI_API_KEY')) {
                    res.status(500).json({
                        error: 'OpenAI APIキーが設定されていません',
                        message: 'OpenAI API key not configured',
                    });
                    return;
                }
                if (error.message.includes('rate limit') ||
                    error.message.includes('quota')) {
                    res.status(429).json({
                        error: 'APIの利用制限に達しました。しばらく時間をおいてからお試しください。',
                        message: 'Rate limit exceeded',
                    });
                    return;
                }
            }
            res.status(500).json({
                error: '申し訳ございません。一時的なエラーが発生しました。',
                message: 'Internal server error',
            });
        }
    });
}
// Authenticated user chat endpoint
router.post('/', auth_1.authMiddleware, (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    yield handleChatRequest(req, res, false);
}));
// Widget chat endpoint (no authentication required)
router.post('/widget/:widgetKey', requireValidWidget_1.requireValidWidget, (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    yield handleChatRequest(req, res, true);
}));
// チャット履歴取得エンドポイント
router.get('/history', auth_1.authMiddleware, (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    try {
        const { page = 1, limit = 20 } = req.query;
        const pageNumber = parseInt(page);
        const limitNumber = parseInt(limit);
        const chats = yield prisma_1.prisma.chatLog.findMany({
            where: {
                userId: (_a = req.user) === null || _a === void 0 ? void 0 : _a.id,
            },
            orderBy: {
                createdAt: 'desc',
            },
            skip: (pageNumber - 1) * limitNumber,
            take: limitNumber,
        });
        const total = yield prisma_1.prisma.chatLog.count({
            where: {
                userId: (_b = req.user) === null || _b === void 0 ? void 0 : _b.id,
            },
        });
        res.json({
            chats,
            pagination: {
                page: pageNumber,
                limit: limitNumber,
                total,
                pages: Math.ceil(total / limitNumber),
            },
        });
    }
    catch (error) {
        console.error('Error fetching chat history:', error);
        res.status(500).json({
            error: 'チャット履歴の取得に失敗しました',
            message: 'Failed to fetch chat history',
        });
    }
}));
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,