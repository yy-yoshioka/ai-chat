{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/routes/chat.ts","mappings":"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","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/routes/chat.ts"],"sourcesContent":["import { Router, Request, Response } from 'express';\nimport { prisma } from '../lib/prisma';\nimport { authMiddleware } from '../middleware/auth';\nimport {\n  requireValidWidget,\n  WidgetRequest,\n} from '../middleware/requireValidWidget';\nimport { rateLimiter } from '../utils/rateLimiter';\nimport { searchKnowledgeBase } from '../services/knowledgeBaseService';\nimport { webhookService } from '../services/webhookService';\nimport type { UserPayload } from '../utils/jwt';\n\nconst router = Router();\n\ninterface ChatRequest {\n  message: string;\n  widgetKey?: string;\n}\n\ninterface AuthRequest extends Request {\n  user?: UserPayload;\n}\n\ninterface OpenAIMessage {\n  role: 'system' | 'user' | 'assistant';\n  content: string;\n}\n\ninterface OpenAIResponse {\n  choices: { message: { content: string } }[];\n  error?: {\n    message: string;\n    type: string;\n  };\n}\n\nasync function callChatGPT(\n  userMessage: string,\n  conversationHistory: OpenAIMessage[] = [],\n  faqs: { question: string; answer: string }[] = [],\n  kbContext: string = ''\n): Promise<string> {\n  // Check if OpenAI API key is properly configured\n  const apiKey = process.env.OPENAI_API_KEY;\n  if (!apiKey || apiKey === 'your_openai_api_key_here') {\n    // Return a mock response for testing purposes\n    const responses = [\n      `こんにちは！「${userMessage}」についてお答えします。これはテスト用のレスポンスです。実際のOpenAI APIを使用するには、環境変数OPENAI_API_KEYに有効なAPIキーを設定してください。`,\n      `ご質問ありがとうございます。「${userMessage}」について考えてみました。現在はテストモードで動作しており、実際のAI応答を得るにはOpenAI APIキーの設定が必要です。`,\n      `「${userMessage}」についてのご質問ですね。現在はデモモードで動作しています。より詳細で正確な回答を得るには、有効なOpenAI APIキーを設定してください。`,\n    ];\n    // Return a random mock response\n    return responses[Math.floor(Math.random() * responses.length)];\n  }\n\n  // システムプロンプトを改善\n  const systemPrompt = `あなたは親切で知識豊富なAIアシスタントです。以下の特徴を持って回答してください：\n\n1. 日本語で自然で親しみやすい回答をする\n2. 質問に対して具体的で有用な情報を提供する\n3. 分からないことは正直に「分からない」と答える\n4. 必要に応じて追加の質問や clarification を求める\n5. 回答は適度な長さで、読みやすく構造化する\n\n${\n  kbContext\n    ? `\n以下のナレッジベースの情報を参考にしてください：\n${kbContext}\n`\n    : ''\n}\n\n${\n  faqs.length > 0\n    ? `\n以下のFAQ情報も参考にしてください：\n${faqs.map((f) => `Q: ${f.question}\\nA: ${f.answer}`).join('\\n\\n')}\n`\n    : ''\n}\n\nユーザーの質問に対して、親切で正確な回答を日本語で提供してください。`;\n\n  const messages: OpenAIMessage[] = [\n    {\n      role: 'system',\n      content: systemPrompt,\n    },\n    ...conversationHistory,\n    {\n      role: 'user',\n      content: userMessage,\n    },\n  ];\n\n  try {\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${apiKey}`,\n      },\n      body: JSON.stringify({\n        model: process.env.OPENAI_MODEL || 'gpt-3.5-turbo',\n        messages,\n        max_tokens: 1000,\n        temperature: 0.7,\n        top_p: 1,\n        frequency_penalty: 0,\n        presence_penalty: 0,\n      }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      console.error('OpenAI API error:', errorData);\n      throw new Error(\n        `OpenAI API error: ${response.status} ${response.statusText}`\n      );\n    }\n\n    const data = (await response.json()) as OpenAIResponse;\n\n    if (data.error) {\n      console.error('OpenAI error:', data.error);\n      throw new Error(`OpenAI error: ${data.error.message}`);\n    }\n\n    return (\n      data.choices?.[0]?.message?.content ||\n      'すみません、回答を生成できませんでした。'\n    );\n  } catch (error) {\n    console.error('Error calling ChatGPT:', error);\n    throw error;\n  }\n}\n\n// Chat endpoint that handles both authenticated users and widget requests\nasync function handleChatRequest(\n  req: AuthRequest & WidgetRequest,\n  res: Response,\n  isWidgetRequest: boolean = false\n): Promise<void> {\n  try {\n    const { message } = req.body as ChatRequest;\n\n    if (\n      !message ||\n      typeof message !== 'string' ||\n      message.trim().length === 0\n    ) {\n      res.status(400).json({\n        error: 'メッセージが必要です',\n        message: 'Message is required',\n      });\n      return;\n    }\n\n    // メッセージの長さ制限\n    if (message.length > 2000) {\n      res.status(400).json({\n        error: 'メッセージが長すぎます（2000文字以内）',\n        message: 'Message too long (max 2000 characters)',\n      });\n      return;\n    }\n\n    // Rate limiting for widget requests\n    if (isWidgetRequest && req.widget) {\n      const rateLimitResult = await rateLimiter.incrementAndCheck({\n        widgetId: req.widget.id,\n        limit: 50, // 50 requests per period\n        period: 3600, // 1 hour\n      });\n\n      if (!rateLimitResult.allowed) {\n        res.status(429).json({\n          error: 'Rate limit exceeded. Please try again later.',\n          resetTime: rateLimitResult.resetTime,\n        });\n        return;\n      }\n    }\n\n    // Knowledge Base検索\n    let kbResults: Array<{\n      score: number;\n      content: string;\n      metadata: unknown;\n    }> = [];\n    let kbContext = '';\n    if (isWidgetRequest && req.widget) {\n      try {\n        kbResults = await searchKnowledgeBase(req.widget.id, message);\n        kbContext = kbResults.map((r) => r.content).join('\\n\\n');\n      } catch (error) {\n        console.log('Knowledge base search failed:', error);\n      }\n    }\n\n    // 関連するFAQを検索（キーワードマッチング）\n    const faqs = await prisma.fAQ.findMany({\n      where: {\n        OR: [\n          { question: { contains: message } },\n          { answer: { contains: message } },\n        ],\n      },\n      take: 3,\n    });\n\n    // 過去の会話履歴を取得（最新5件）\n    let recentChats;\n    if (isWidgetRequest && req.widget) {\n      // For widget requests, get recent chats for this widget\n      recentChats = await prisma.chatLog.findMany({\n        where: {\n          widgetId: req.widget.id,\n        },\n        orderBy: {\n          createdAt: 'desc',\n        },\n        take: 5,\n      });\n    } else {\n      // For authenticated users, get their personal chat history\n      recentChats = await prisma.chatLog.findMany({\n        where: {\n          userId: req.user?.id,\n        },\n        orderBy: {\n          createdAt: 'desc',\n        },\n        take: 5,\n      });\n    }\n\n    // 会話履歴をOpenAI形式に変換\n    const conversationHistory: OpenAIMessage[] = recentChats\n      .reverse() // 古い順に並び替え\n      .flatMap((chat: { question: string; answer: string }) => [\n        { role: 'user' as const, content: chat.question },\n        { role: 'assistant' as const, content: chat.answer },\n      ]);\n\n    // ChatGPT API呼び出し\n    const answer = await callChatGPT(\n      message,\n      conversationHistory,\n      faqs,\n      kbContext\n    );\n\n    // チャットログを保存\n    const chatLog = await prisma.chatLog.create({\n      data: {\n        question: message,\n        answer,\n        userId: isWidgetRequest ? null : req.user?.id,\n        widgetId: isWidgetRequest ? req.widget?.id : null,\n      },\n    });\n\n    // Trigger webhook for chat.created event\n    if (isWidgetRequest && req.widget) {\n      // Get organization ID from widget\n      const widget = await prisma.widget.findUnique({\n        where: { id: req.widget.id },\n        include: { company: true },\n      });\n\n      if (widget?.company?.organizationId) {\n        webhookService\n          .triggerWebhook(widget.company.organizationId, 'chat.created', {\n            chatId: chatLog.id,\n            widgetId: req.widget.id,\n            widgetName: req.widget.name,\n            question: message,\n            answer,\n            timestamp: new Date().toISOString(),\n          })\n          .catch((error) => {\n            console.error('Failed to trigger webhook:', error);\n          });\n      }\n    }\n\n    res.json({\n      answer,\n      timestamp: new Date().toISOString(),\n      sources: kbResults.slice(0, 3), // 上位3件のソースを返す\n    });\n  } catch (error) {\n    console.error('Chat error:', error);\n\n    if (error instanceof Error) {\n      if (error.message.includes('OPENAI_API_KEY')) {\n        res.status(500).json({\n          error: 'OpenAI APIキーが設定されていません',\n          message: 'OpenAI API key not configured',\n        });\n        return;\n      }\n\n      if (\n        error.message.includes('rate limit') ||\n        error.message.includes('quota')\n      ) {\n        res.status(429).json({\n          error:\n            'APIの利用制限に達しました。しばらく時間をおいてからお試しください。',\n          message: 'Rate limit exceeded',\n        });\n        return;\n      }\n    }\n\n    res.status(500).json({\n      error: '申し訳ございません。一時的なエラーが発生しました。',\n      message: 'Internal server error',\n    });\n  }\n}\n\n// Authenticated user chat endpoint\nrouter.post('/', authMiddleware, async (req: AuthRequest, res: Response) => {\n  await handleChatRequest(req as AuthRequest & WidgetRequest, res, false);\n});\n\n// Widget chat endpoint (no authentication required)\nrouter.post(\n  '/widget/:widgetKey',\n  requireValidWidget,\n  async (req: WidgetRequest, res: Response) => {\n    await handleChatRequest(req as AuthRequest & WidgetRequest, res, true);\n  }\n);\n\n// チャット履歴取得エンドポイント\nrouter.get(\n  '/history',\n  authMiddleware,\n  async (req: AuthRequest, res: Response) => {\n    try {\n      const { page = 1, limit = 20 } = req.query;\n      const pageNumber = parseInt(page as string);\n      const limitNumber = parseInt(limit as string);\n\n      const chats = await prisma.chatLog.findMany({\n        where: {\n          userId: req.user?.id,\n        },\n        orderBy: {\n          createdAt: 'desc',\n        },\n        skip: (pageNumber - 1) * limitNumber,\n        take: limitNumber,\n      });\n\n      const total = await prisma.chatLog.count({\n        where: {\n          userId: req.user?.id,\n        },\n      });\n\n      res.json({\n        chats,\n        pagination: {\n          page: pageNumber,\n          limit: limitNumber,\n          total,\n          pages: Math.ceil(total / limitNumber),\n        },\n      });\n    } catch (error) {\n      console.error('Error fetching chat history:', error);\n      res.status(500).json({\n        error: 'チャット履歴の取得に失敗しました',\n        message: 'Failed to fetch chat history',\n      });\n    }\n  }\n);\n\nexport default router;\n"],"version":3}