{"version":3,"names":["cov_1d2x1bxizy","actualCoverage","socket_io_1","s","require","jsonwebtoken_1","__importDefault","prisma_1","initializeWebSocket","httpServer","f","io","Server","cors","origin","b","process","env","FRONTEND_URL","methods","credentials","transports","use","socket","next","__awaiter","token","handshake","auth","widgetKey","decoded","default","verify","JWT_SECRET","userId","widget","prisma","findUnique","where","isActive","Error","error","on","console","log","id","join","data","message","chatLog","create","question","answer","widgetId","_a","emit","messageId","timestamp","createdAt","setTimeout","aiResponse","update","response","Date","room","to","isTyping","exports"],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/lib/websocket.ts"],"sourcesContent":["import { Server as SocketIOServer, Socket } from 'socket.io';\nimport { Server as HTTPServer } from 'http';\nimport jwt from 'jsonwebtoken';\nimport { prisma } from './prisma';\n\ninterface AuthenticatedSocket extends Socket {\n  userId?: string;\n  widgetKey?: string;\n}\n\ninterface ChatMessageData {\n  message: string;\n  conversationId?: string;\n}\n\ninterface TypingData {\n  isTyping: boolean;\n}\n\nexport function initializeWebSocket(httpServer: HTTPServer) {\n  const io = new SocketIOServer(httpServer, {\n    cors: {\n      origin: [\n        'http://localhost:3000',\n        'http://localhost:8000',\n        process.env.FRONTEND_URL || 'http://localhost:3000',\n      ],\n      methods: ['GET', 'POST'],\n      credentials: true,\n    },\n    transports: ['websocket', 'polling'],\n  });\n\n  // Authentication middleware\n  io.use(async (socket: AuthenticatedSocket, next: (err?: Error) => void) => {\n    try {\n      const token = socket.handshake.auth.token;\n      const widgetKey = socket.handshake.auth.widgetKey;\n\n      if (token) {\n        // Authenticated user\n        const decoded = jwt.verify(token, process.env.JWT_SECRET!) as {\n          userId: string;\n        };\n        socket.userId = decoded.userId;\n      } else if (widgetKey) {\n        // Widget user\n        const widget = await prisma.widget.findUnique({\n          where: { widgetKey, isActive: true },\n        });\n\n        if (!widget) {\n          return next(new Error('Invalid widget key'));\n        }\n\n        socket.widgetKey = widgetKey;\n      } else {\n        return next(new Error('Authentication required'));\n      }\n\n      next();\n    } catch (error) {\n      next(new Error('Authentication failed'));\n    }\n  });\n\n  io.on('connection', (socket: AuthenticatedSocket) => {\n    console.log(`Client connected: ${socket.id}`);\n\n    // Join room based on user type\n    if (socket.userId) {\n      socket.join(`user:${socket.userId}`);\n    } else if (socket.widgetKey) {\n      socket.join(`widget:${socket.widgetKey}`);\n    }\n\n    // Handle chat messages\n    socket.on('chat:message', async (data: ChatMessageData) => {\n      try {\n        const { message } = data;\n\n        // Save message to database\n        const chatLog = await prisma.chatLog.create({\n          data: {\n            question: message,\n            answer: '', // Will be updated when AI responds\n            userId: socket.userId || null,\n            widgetId: socket.widgetKey\n              ? (\n                  await prisma.widget.findUnique({\n                    where: { widgetKey: socket.widgetKey },\n                  })\n                )?.id\n              : null,\n          },\n        });\n\n        // Emit message received confirmation\n        socket.emit('chat:message:received', {\n          messageId: chatLog.id,\n          timestamp: chatLog.createdAt,\n        });\n\n        // TODO: Process with AI and emit response\n        // This would integrate with your existing AI chat logic\n\n        // Simulate AI response for now\n        setTimeout(async () => {\n          const aiResponse =\n            'This is a WebSocket response. AI integration pending.';\n\n          // Update chat log with AI response\n          await prisma.chatLog.update({\n            where: { id: chatLog.id },\n            data: { answer: aiResponse },\n          });\n\n          // Emit AI response\n          socket.emit('chat:response', {\n            messageId: chatLog.id,\n            response: aiResponse,\n            timestamp: new Date(),\n          });\n        }, 1000);\n      } catch (error) {\n        console.error('Chat message error:', error);\n        socket.emit('chat:error', {\n          error: 'Failed to process message',\n        });\n      }\n    });\n\n    // Handle typing indicators\n    socket.on('chat:typing', (data: TypingData) => {\n      const room = socket.userId\n        ? `user:${socket.userId}`\n        : `widget:${socket.widgetKey}`;\n      socket.to(room).emit('chat:typing', {\n        userId: socket.userId || 'anonymous',\n        isTyping: data.isTyping,\n      });\n    });\n\n    // Handle disconnect\n    socket.on('disconnect', () => {\n      console.log(`Client disconnected: ${socket.id}`);\n    });\n  });\n\n  return io;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}