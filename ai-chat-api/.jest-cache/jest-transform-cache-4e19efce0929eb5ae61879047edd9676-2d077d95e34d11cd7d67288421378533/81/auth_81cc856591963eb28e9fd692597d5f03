d71e01baef7fa950af4122c457a84b33
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const auth_1 = require("../middleware/auth");
const jwt_1 = require("../utils/jwt");
const password_1 = require("../utils/password");
const prisma_1 = require("../lib/prisma");
const router = (0, express_1.Router)();
// POST /auth/login - User login
router.post('/login', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { email, password } = req.body;
        console.log(email, password);
        // Simple validation
        if (!email || !password) {
            return res
                .status(400)
                .json({ message: 'Email and password are required' });
        }
        // Find user by email
        const user = yield prisma_1.prisma.user.findUnique({
            where: { email },
        });
        if (!user) {
            return res.status(401).json({ message: 'Invalid credentials' });
        }
        // Verify password
        const isPasswordValid = yield (0, password_1.verifyPassword)(password, user.password);
        if (!isPasswordValid) {
            return res.status(401).json({ message: 'Invalid credentials' });
        }
        // Generate JWT and set cookie
        (0, jwt_1.signToken)({ id: user.id, email: user.email, isAdmin: user.isAdmin }, res);
        // Return user data (excluding password)
        const { password: _password } = user, userData = __rest(user, ["password"]);
        res.status(200).json({
            message: 'Login successful',
            user: userData,
        });
    }
    catch (error) {
        console.error('Login error:', error);
        res.status(500).json({ message: 'Internal server error' });
    }
}));
// POST /auth/signup - User registration
router.post('/signup', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { email, password, name } = req.body;
        // Simple validation
        if (!email || !password) {
            return res
                .status(400)
                .json({ message: 'Email and password are required' });
        }
        // Check if user already exists
        const existingUser = yield prisma_1.prisma.user.findUnique({
            where: { email },
        });
        if (existingUser) {
            return res.status(409).json({ message: 'User already exists' });
        }
        // Hash password
        const hashedPassword = yield (0, password_1.hashPassword)(password);
        // Create new user
        const user = yield prisma_1.prisma.user.create({
            data: {
                email,
                password: hashedPassword,
                name: name || null,
            },
        });
        // Generate JWT and set cookie
        (0, jwt_1.signToken)({ id: user.id, email: user.email, isAdmin: user.isAdmin }, res);
        // Return user data (excluding password)
        const { password: _password } = user, userData = __rest(user, ["password"]);
        res.status(201).json({
            message: 'User created successfully',
            user: userData,
        });
    }
    catch (error) {
        console.error('Signup error:', error);
        res.status(500).json({ message: 'Internal server error' });
    }
}));
// GET /auth/me - Get current user info (protected route)
router.get('/me', auth_1.authMiddleware, (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    try {
        // Get user from database using the ID from JWT
        const user = yield prisma_1.prisma.user.findUnique({
            where: { id: (_a = req.user) === null || _a === void 0 ? void 0 : _a.id },
        });
        if (!user) {
            return res.status(404).json({ message: 'User not found' });
        }
        // Return user data (excluding password)
        const { password: _password } = user, userData = __rest(user, ["password"]);
        res.status(200).json({
            message: 'User authenticated',
            user: userData,
        });
    }
    catch (error) {
        console.error('Auth/me error:', error);
        res.status(500).json({ message: 'Internal server error' });
    }
}));
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,