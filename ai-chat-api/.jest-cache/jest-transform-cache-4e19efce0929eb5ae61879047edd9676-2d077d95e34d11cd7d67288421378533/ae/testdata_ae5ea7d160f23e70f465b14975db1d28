ced7bfea80998d2eb2679ba81bee6d22
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockPrismaTransaction = exports.createMockSocket = exports.createMockNext = exports.createMockResponse = exports.createMockRequest = exports.mockFile = exports.mockAuthHeader = exports.generateExpiredToken = exports.generateTestToken = exports.testAPIKey = exports.testSecurityAuditLog = exports.testDataRetentionPolicy = exports.testIncident = exports.testWebhook = exports.testKnowledgeBase = exports.testFAQ = exports.testChatLog = exports.testWidget = exports.testCompany = exports.testOrganization = exports.testUser = exports.testPasswordHash = void 0;
const client_1 = require("@prisma/client");
const bcrypt_1 = __importDefault(require("bcrypt"));
const jwt = __importStar(require("jsonwebtoken"));
// Generate a test password hash
exports.testPasswordHash = bcrypt_1.default.hashSync('password123', 10);
exports.testUser = {
    id: 'user-test-123',
    email: 'test@example.com',
    name: 'Test User',
    password: exports.testPasswordHash,
    roles: [client_1.Role.owner],
    organizationId: 'org-test-123',
    emailVerified: true,
    emailVerificationToken: null,
    resetPasswordToken: null,
    resetPasswordExpires: null,
    lastLoginAt: new Date('2024-01-01'),
    createdAt: new Date('2024-01-01'),
    updatedAt: new Date('2024-01-01'),
};
exports.testOrganization = {
    id: 'org-test-123',
    name: 'Test Organization',
    slug: 'test-org',
    plan: client_1.PlanType.pro,
    stripeCustomerId: 'cus_test_123',
    stripeSubscriptionId: 'sub_test_123',
    trialEndsAt: null,
    settings: {},
    createdAt: new Date('2024-01-01'),
    updatedAt: new Date('2024-01-01'),
};
exports.testCompany = {
    id: 'company-test-123',
    name: 'Test Company',
    organizationId: 'org-test-123',
    createdAt: new Date('2024-01-01'),
    updatedAt: new Date('2024-01-01'),
};
exports.testWidget = {
    id: 'widget-test-123',
    name: 'Test Widget',
    widgetKey: 'wk_test_123',
    themeColor: '#3B82F6',
    welcomeMessage: 'Welcome to our support!',
    placeholderText: 'Type your question here...',
    status: 'active',
    settings: {},
    companyId: 'company-test-123',
    createdAt: new Date('2024-01-01'),
    updatedAt: new Date('2024-01-01'),
};
exports.testChatLog = {
    id: 'chat-test-123',
    widgetId: 'widget-test-123',
    sessionId: 'session-test-123',
    userMessage: 'Hello, I need help',
    aiResponse: 'Hello! How can I assist you today?',
    feedback: null,
    metadata: {},
    createdAt: new Date('2024-01-01'),
    updatedAt: new Date('2024-01-01'),
};
exports.testFAQ = {
    id: 'faq-test-123',
    question: 'How do I reset my password?',
    answer: 'You can reset your password by clicking the "Forgot Password" link on the login page.',
    category: 'Account',
    isPublished: true,
    organizationId: 'org-test-123',
    createdAt: new Date('2024-01-01'),
    updatedAt: new Date('2024-01-01'),
};
exports.testKnowledgeBase = {
    id: 'kb-test-123',
    title: 'Test Document',
    content: 'This is test content for knowledge base',
    url: 'https://example.com/test.pdf',
    metadata: {},
    widgetId: 'widget-test-123',
    createdAt: new Date('2024-01-01'),
    updatedAt: new Date('2024-01-01'),
};
exports.testWebhook = {
    id: 'webhook-test-123',
    name: 'Test Webhook',
    url: 'https://example.com/webhook',
    events: ['chat.message', 'chat.feedback'],
    isActive: true,
    secret: 'webhook-secret-123',
    metadata: {},
    organizationId: 'org-test-123',
    createdAt: new Date('2024-01-01'),
    updatedAt: new Date('2024-01-01'),
};
exports.testIncident = {
    id: 'incident-test-123',
    title: 'Test Service Outage',
    description: 'Testing incident management',
    severity: 'medium',
    status: 'investigating',
    affectedServices: ['chat', 'api'],
    startedAt: new Date('2024-01-01'),
    resolvedAt: null,
    createdAt: new Date('2024-01-01'),
    updatedAt: new Date('2024-01-01'),
};
exports.testDataRetentionPolicy = {
    id: 'retention-test-123',
    name: 'Test Retention Policy',
    dataType: 'chat_logs',
    retentionDays: 90,
    isActive: true,
    organizationId: 'org-test-123',
    createdAt: new Date('2024-01-01'),
    updatedAt: new Date('2024-01-01'),
};
exports.testSecurityAuditLog = {
    id: 'audit-test-123',
    userId: 'user-test-123',
    action: 'user.login',
    resourceType: 'user',
    resourceId: 'user-test-123',
    metadata: {
        ip: '192.168.1.1',
        userAgent: 'Mozilla/5.0',
    },
    organizationId: 'org-test-123',
    createdAt: new Date('2024-01-01'),
};
exports.testAPIKey = {
    id: 'apikey-test-123',
    name: 'Test API Key',
    key: 'ak_test_123456789',
    hashedKey: bcrypt_1.default.hashSync('ak_test_123456789', 10),
    permissions: ['read:widgets', 'write:widgets'],
    expiresAt: new Date('2025-01-01'),
    lastUsedAt: null,
    createdAt: new Date('2024-01-01'),
    updatedAt: new Date('2024-01-01'),
};
// JWT test tokens
const generateTestToken = (userId, organizationId, expiresIn = '1h') => {
    return jwt.sign({ id: userId, organizationId }, process.env.JWT_SECRET || 'test-secret', { expiresIn });
};
exports.generateTestToken = generateTestToken;
const generateExpiredToken = (userId, organizationId) => {
    return jwt.sign({ id: userId, organizationId }, process.env.JWT_SECRET || 'test-secret', { expiresIn: '-1h' });
};
exports.generateExpiredToken = generateExpiredToken;
// Mock authentication header
const mockAuthHeader = (userId = 'user-test-123', organizationId = 'org-test-123') => ({
    authorization: `Bearer ${(0, exports.generateTestToken)(userId, organizationId)}`,
});
exports.mockAuthHeader = mockAuthHeader;
// Mock file for upload tests
exports.mockFile = {
    fieldname: 'file',
    originalname: 'test.pdf',
    encoding: '7bit',
    mimetype: 'application/pdf',
    destination: '/tmp',
    filename: 'test-123.pdf',
    path: '/tmp/test-123.pdf',
    size: 1024 * 1024, // 1MB
    buffer: Buffer.from('test file content'),
    stream: null,
};
// Mock request and response objects
const createMockRequest = (overrides = {}) => (Object.assign({ headers: {}, params: {}, query: {}, body: {}, user: null, file: null, files: [] }, overrides));
exports.createMockRequest = createMockRequest;
const createMockResponse = () => {
    const res = {};
    res.status = jest.fn().mockReturnValue(res);
    res.json = jest.fn().mockReturnValue(res);
    res.send = jest.fn().mockReturnValue(res);
    res.setHeader = jest.fn().mockReturnValue(res);
    res.cookie = jest.fn().mockReturnValue(res);
    res.clearCookie = jest.fn().mockReturnValue(res);
    res.redirect = jest.fn().mockReturnValue(res);
    res.end = jest.fn().mockReturnValue(res);
    return res;
};
exports.createMockResponse = createMockResponse;
const createMockNext = () => jest.fn();
exports.createMockNext = createMockNext;
// Mock WebSocket connection
const createMockSocket = (id = 'socket-test-123') => ({
    id,
    emit: jest.fn(),
    on: jest.fn(),
    join: jest.fn(),
    leave: jest.fn(),
    disconnect: jest.fn(),
    rooms: new Set([id]),
    data: {},
});
exports.createMockSocket = createMockSocket;
// Mock Prisma transaction
const mockPrismaTransaction = (prisma) => {
    return jest.fn((callback) => {
        if (typeof callback === 'function') {
            return callback(prisma);
        }
        return Promise.all(callback);
    });
};
exports.mockPrismaTransaction = mockPrismaTransaction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,