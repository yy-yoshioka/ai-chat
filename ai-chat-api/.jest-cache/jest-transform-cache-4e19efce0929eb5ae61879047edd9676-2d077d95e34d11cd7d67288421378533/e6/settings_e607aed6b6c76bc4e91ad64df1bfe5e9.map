{"version":3,"names":["express_1","cov_1uvep4zaop","s","__importDefault","require","auth_1","organizationAccess_1","settingsService","__importStar","router","default","Router","get","authMiddleware","orgAccessMiddleware","req","res","f","__awaiter","apiKeys","listAPIKeys","organizationId","json","error","status","post","name","body","b","trim","apiKey","createAPIKey","delete","deleteAPIKey","params","id","send","settings","getNotificationSettings","put","updateNotificationSettings","notifications","getUserNotifications","_a","user","parseInt","query","limit","patch","markNotificationAsRead","markAllNotificationsAsRead","_b","count","getUnreadNotificationCount","_c","exports"],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/routes/settings.ts"],"sourcesContent":["import express from 'express';\nimport { authMiddleware as requireAuth } from '../middleware/auth';\nimport { orgAccessMiddleware as requireOrgAccess } from '../middleware/organizationAccess';\nimport * as settingsService from '../services/settingsService';\n\n// Extend Express Request type\ndeclare module 'express' {\n  interface Request {\n    organizationId?: string;\n  }\n}\n\nconst router = express.Router();\n\n// API Keys\nrouter.get('/api-keys', requireAuth, requireOrgAccess, async (req, res) => {\n  try {\n    const apiKeys = await settingsService.listAPIKeys(req.organizationId!);\n    res.json(apiKeys);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch API keys' });\n  }\n});\n\nrouter.post('/api-keys', requireAuth, requireOrgAccess, async (req, res) => {\n  try {\n    const { name } = req.body;\n    if (!name?.trim()) {\n      return res.status(400).json({ error: 'Name is required' });\n    }\n\n    const apiKey = await settingsService.createAPIKey(\n      req.organizationId!,\n      name\n    );\n    res.status(201).json(apiKey);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to create API key' });\n  }\n});\n\nrouter.delete(\n  '/api-keys/:id',\n  requireAuth,\n  requireOrgAccess,\n  async (req, res) => {\n    try {\n      await settingsService.deleteAPIKey(req.params.id, req.organizationId!);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to delete API key' });\n    }\n  }\n);\n\n// Notification Settings\nrouter.get(\n  '/notifications',\n  requireAuth,\n  requireOrgAccess,\n  async (req, res) => {\n    try {\n      const settings = await settingsService.getNotificationSettings(\n        req.organizationId!\n      );\n      res.json(settings);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch notification settings' });\n    }\n  }\n);\n\nrouter.put(\n  '/notifications',\n  requireAuth,\n  requireOrgAccess,\n  async (req, res) => {\n    try {\n      const settings = await settingsService.updateNotificationSettings(\n        req.organizationId!,\n        req.body\n      );\n      res.json(settings);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to update notification settings' });\n    }\n  }\n);\n\n// User Notifications\nrouter.get(\n  '/notifications/list',\n  requireAuth,\n  requireOrgAccess,\n  async (req, res) => {\n    try {\n      const notifications = await settingsService.getUserNotifications(\n        req.organizationId!,\n        req.user?.id,\n        parseInt(req.query.limit as string) || 50\n      );\n      res.json(notifications);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch notifications' });\n    }\n  }\n);\n\nrouter.patch(\n  '/notifications/:id/read',\n  requireAuth,\n  requireOrgAccess,\n  async (req, res) => {\n    try {\n      await settingsService.markNotificationAsRead(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to mark notification as read' });\n    }\n  }\n);\n\nrouter.patch(\n  '/notifications/read-all',\n  requireAuth,\n  requireOrgAccess,\n  async (req, res) => {\n    try {\n      await settingsService.markAllNotificationsAsRead(\n        req.organizationId!,\n        req.user?.id\n      );\n      res.status(204).send();\n    } catch (error) {\n      res\n        .status(500)\n        .json({ error: 'Failed to mark all notifications as read' });\n    }\n  }\n);\n\nrouter.get(\n  '/notifications/unread-count',\n  requireAuth,\n  requireOrgAccess,\n  async (req, res) => {\n    try {\n      const count = await settingsService.getUnreadNotificationCount(\n        req.organizationId!,\n        req.user?.id\n      );\n      res.json({ count });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to get unread count' });\n    }\n  }\n);\n\nexport default router;\n"],"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","ignoreList":[]}