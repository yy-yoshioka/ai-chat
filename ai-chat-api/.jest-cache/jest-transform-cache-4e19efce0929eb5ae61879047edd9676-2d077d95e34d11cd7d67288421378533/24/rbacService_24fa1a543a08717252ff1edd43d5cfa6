9c8cf7a1710575f6575eaf9f0915e003
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOrganizationUsers = exports.revokePermission = exports.grantPermission = exports.hasAnyPermission = exports.hasPermission = exports.getUserPermissions = exports.initializeRolePermissions = void 0;
const prisma_1 = require("../lib/prisma");
// Default role permissions mapping
const DEFAULT_ROLE_PERMISSIONS = {
    owner: [
        'ORG_READ',
        'ORG_WRITE',
        'ORG_DELETE',
        'ORG_INVITE_USERS',
        'WIDGET_READ',
        'WIDGET_WRITE',
        'WIDGET_DELETE',
        'WIDGET_CONFIGURE',
        'CHAT_READ',
        'CHAT_MODERATE',
        'CHAT_EXPORT',
        'KB_READ',
        'KB_WRITE',
        'KB_DELETE',
        'KB_TRAIN',
        'ANALYTICS_READ',
        'ANALYTICS_EXPORT',
        'SETTINGS_READ',
        'SETTINGS_WRITE',
        'BILLING_READ',
        'BILLING_WRITE',
    ],
    org_admin: [
        'ORG_READ',
        'ORG_WRITE',
        'ORG_INVITE_USERS',
        'WIDGET_READ',
        'WIDGET_WRITE',
        'WIDGET_DELETE',
        'WIDGET_CONFIGURE',
        'CHAT_READ',
        'CHAT_MODERATE',
        'CHAT_EXPORT',
        'KB_READ',
        'KB_WRITE',
        'KB_DELETE',
        'KB_TRAIN',
        'ANALYTICS_READ',
        'ANALYTICS_EXPORT',
        'SETTINGS_READ',
        'SETTINGS_WRITE',
    ],
    editor: [
        'ORG_READ',
        'WIDGET_READ',
        'WIDGET_WRITE',
        'WIDGET_CONFIGURE',
        'CHAT_READ',
        'CHAT_MODERATE',
        'KB_READ',
        'KB_WRITE',
        'KB_TRAIN',
        'ANALYTICS_READ',
        'SETTINGS_READ',
    ],
    viewer: [
        'ORG_READ',
        'WIDGET_READ',
        'CHAT_READ',
        'KB_READ',
        'ANALYTICS_READ',
        'SETTINGS_READ',
    ],
    api_user: [
        'WIDGET_READ',
        'WIDGET_CONFIGURE',
        'CHAT_READ',
        'KB_READ',
    ],
    read_only: [
        'ORG_READ',
        'WIDGET_READ',
        'CHAT_READ',
        'KB_READ',
        'ANALYTICS_READ',
    ],
};
const initializeRolePermissions = () => __awaiter(void 0, void 0, void 0, function* () {
    for (const [role, permissions] of Object.entries(DEFAULT_ROLE_PERMISSIONS)) {
        for (const permission of permissions) {
            yield prisma_1.prisma.rolePermission.upsert({
                where: {
                    role_permission: {
                        role: role,
                        permission: permission,
                    },
                },
                update: {},
                create: {
                    role: role,
                    permission: permission,
                },
            });
        }
    }
});
exports.initializeRolePermissions = initializeRolePermissions;
const getUserPermissions = (userId, organizationId) => __awaiter(void 0, void 0, void 0, function* () {
    const user = yield prisma_1.prisma.user.findUnique({
        where: { id: userId },
        include: {
            permissionOverrides: {
                where: { organizationId },
            },
        },
    });
    if (!user) {
        return [];
    }
    // Get base permissions from roles
    const rolePermissions = yield prisma_1.prisma.rolePermission.findMany({
        where: {
            role: {
                in: user.roles,
            },
        },
        select: { permission: true },
    });
    const permissions = new Set(rolePermissions.map((rp) => rp.permission));
    // Apply permission overrides
    for (const override of user.permissionOverrides) {
        if (override.granted) {
            permissions.add(override.permission);
        }
        else {
            permissions.delete(override.permission);
        }
    }
    return Array.from(permissions);
});
exports.getUserPermissions = getUserPermissions;
const hasPermission = (userId, organizationId, permission) => __awaiter(void 0, void 0, void 0, function* () {
    const permissions = yield (0, exports.getUserPermissions)(userId, organizationId);
    return permissions.includes(permission);
});
exports.hasPermission = hasPermission;
const hasAnyPermission = (userId, organizationId, permissions) => __awaiter(void 0, void 0, void 0, function* () {
    const userPermissions = yield (0, exports.getUserPermissions)(userId, organizationId);
    return permissions.some((p) => userPermissions.includes(p));
});
exports.hasAnyPermission = hasAnyPermission;
const grantPermission = (userId, organizationId, permission, grantedBy) => __awaiter(void 0, void 0, void 0, function* () {
    return prisma_1.prisma.userPermissionOverride.upsert({
        where: {
            userId_organizationId_permission: {
                userId,
                organizationId,
                permission,
            },
        },
        update: {
            granted: true,
            createdBy: grantedBy,
        },
        create: {
            userId,
            organizationId,
            permission,
            granted: true,
            createdBy: grantedBy,
        },
    });
});
exports.grantPermission = grantPermission;
const revokePermission = (userId, organizationId, permission, revokedBy) => __awaiter(void 0, void 0, void 0, function* () {
    return prisma_1.prisma.userPermissionOverride.upsert({
        where: {
            userId_organizationId_permission: {
                userId,
                organizationId,
                permission,
            },
        },
        update: {
            granted: false,
            createdBy: revokedBy,
        },
        create: {
            userId,
            organizationId,
            permission,
            granted: false,
            createdBy: revokedBy,
        },
    });
});
exports.revokePermission = revokePermission;
const getOrganizationUsers = (organizationId) => __awaiter(void 0, void 0, void 0, function* () {
    return prisma_1.prisma.user.findMany({
        where: { organizationId },
        select: {
            id: true,
            email: true,
            name: true,
            roles: true,
            permissionOverrides: {
                where: { organizationId },
                select: {
                    permission: true,
                    granted: true,
                },
            },
        },
    });
});
exports.getOrganizationUsers = getOrganizationUsers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,