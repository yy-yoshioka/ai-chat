{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/services/securityService.ts","mappings":"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","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/services/securityService.ts"],"sourcesContent":["import { prisma } from '../lib/prisma';\nimport { logger } from '../lib/logger';\n\ninterface SecurityEventData {\n  organizationId?: string;\n  userId?: string;\n  action: string;\n  resource?: string;\n  resourceId?: string;\n  success: boolean;\n  ipAddress?: string;\n  userAgent?: string;\n  details?: Record<string, any>;\n  risk_level?: 'low' | 'medium' | 'high' | 'critical';\n}\n\ninterface DataAccessData {\n  organizationId: string;\n  userId?: string;\n  table_name: string;\n  operation: string;\n  record_ids: string[];\n  query_hash?: string;\n}\n\nexport const logSecurityEvent = async (data: SecurityEventData) => {\n  try {\n    await prisma.securityAuditLog.create({\n      data: {\n        organizationId: data.organizationId,\n        userId: data.userId,\n        action: data.action,\n        resource: data.resource,\n        resourceId: data.resourceId,\n        success: data.success,\n        ipAddress: data.ipAddress,\n        userAgent: data.userAgent,\n        details: data.details,\n        risk_level: data.risk_level || 'low',\n      },\n    });\n\n    // Log high-risk events to application logger\n    if (data.risk_level === 'high' || data.risk_level === 'critical') {\n      logger.warn('High-risk security event detected', {\n        ...data,\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    // Check for suspicious patterns\n    await checkSuspiciousActivity(data);\n  } catch (error) {\n    logger.error('Failed to log security event', {\n      error: error instanceof Error ? error.message : error,\n      eventData: data,\n    });\n  }\n};\n\nexport const logDataAccess = async (data: DataAccessData) => {\n  try {\n    await prisma.dataAccessLog.create({\n      data,\n    });\n  } catch (error) {\n    logger.error('Failed to log data access', {\n      error: error instanceof Error ? error.message : error,\n      accessData: data,\n    });\n  }\n};\n\nconst checkSuspiciousActivity = async (event: SecurityEventData) => {\n  if (!event.userId || !event.organizationId) return;\n\n  const timeWindow = new Date();\n  timeWindow.setMinutes(timeWindow.getMinutes() - 15); // 15 minutes\n\n  // Check for multiple failed attempts\n  const failedAttempts = await prisma.securityAuditLog.count({\n    where: {\n      userId: event.userId,\n      organizationId: event.organizationId,\n      success: false,\n      createdAt: {\n        gte: timeWindow,\n      },\n    },\n  });\n\n  if (failedAttempts >= 5) {\n    await logSecurityEvent({\n      organizationId: event.organizationId,\n      userId: event.userId,\n      action: 'suspicious_activity_detected',\n      success: true,\n      details: {\n        pattern: 'multiple_failed_attempts',\n        count: failedAttempts,\n        timeWindow: '15_minutes',\n      },\n      risk_level: 'critical',\n    });\n\n    // Could trigger additional security measures here\n    // e.g., temporary account lock, notification to admins\n  }\n};\n\nexport const getSecurityReport = async (\n  organizationId: string,\n  startDate: Date,\n  endDate: Date\n) => {\n  const [\n    totalEvents,\n    failedEvents,\n    highRiskEvents,\n    topActions,\n    topUsers,\n    dataAccess,\n  ] = await Promise.all([\n    // Total security events\n    prisma.securityAuditLog.count({\n      where: {\n        organizationId,\n        createdAt: { gte: startDate, lte: endDate },\n      },\n    }),\n\n    // Failed events\n    prisma.securityAuditLog.count({\n      where: {\n        organizationId,\n        success: false,\n        createdAt: { gte: startDate, lte: endDate },\n      },\n    }),\n\n    // High-risk events\n    prisma.securityAuditLog.count({\n      where: {\n        organizationId,\n        risk_level: { in: ['high', 'critical'] },\n        createdAt: { gte: startDate, lte: endDate },\n      },\n    }),\n\n    // Top actions\n    prisma.securityAuditLog.groupBy({\n      by: ['action'],\n      where: {\n        organizationId,\n        createdAt: { gte: startDate, lte: endDate },\n      },\n      _count: { action: true },\n      orderBy: { _count: { action: 'desc' } },\n      take: 10,\n    }),\n\n    // Top users by activity\n    prisma.securityAuditLog.groupBy({\n      by: ['userId'],\n      where: {\n        organizationId,\n        userId: { not: null },\n        createdAt: { gte: startDate, lte: endDate },\n      },\n      _count: { userId: true },\n      orderBy: { _count: { userId: 'desc' } },\n      take: 10,\n    }),\n\n    // Data access summary\n    prisma.dataAccessLog.groupBy({\n      by: ['table_name', 'operation'],\n      where: {\n        organizationId,\n        createdAt: { gte: startDate, lte: endDate },\n      },\n      _count: { table_name: true },\n    }),\n  ]);\n\n  return {\n    summary: {\n      totalEvents,\n      failedEvents,\n      highRiskEvents,\n      successRate:\n        totalEvents > 0\n          ? (((totalEvents - failedEvents) / totalEvents) * 100).toFixed(2)\n          : '100',\n    },\n    topActions: topActions.map((item) => ({\n      action: item.action,\n      count: item._count.action,\n    })),\n    topUsers,\n    dataAccess: dataAccess.map((item) => ({\n      table: item.table_name,\n      operation: item.operation,\n      count: item._count.table_name,\n    })),\n  };\n};\n\nexport const getAnomalousActivity = async (organizationId: string) => {\n  const timeWindow = new Date();\n  timeWindow.setHours(timeWindow.getHours() - 24); // Last 24 hours\n\n  // Users with unusual access patterns\n  const suspiciousUsers = await prisma.securityAuditLog.findMany({\n    where: {\n      organizationId,\n      createdAt: { gte: timeWindow },\n      OR: [\n        { risk_level: 'critical' },\n        { action: 'suspicious_activity_detected' },\n      ],\n    },\n    include: {\n      user: {\n        select: { email: true, name: true },\n      },\n    },\n  });\n\n  // Unusual data access patterns\n  const unusualDataAccess = await prisma.dataAccessLog.groupBy({\n    by: ['userId', 'table_name'],\n    where: {\n      organizationId,\n      createdAt: { gte: timeWindow },\n    },\n    _count: { table_name: true },\n    having: {\n      table_name: { _count: { gt: 100 } }, // More than 100 accesses\n    },\n  });\n\n  return {\n    suspiciousUsers,\n    unusualDataAccess,\n  };\n};\n"],"version":3}