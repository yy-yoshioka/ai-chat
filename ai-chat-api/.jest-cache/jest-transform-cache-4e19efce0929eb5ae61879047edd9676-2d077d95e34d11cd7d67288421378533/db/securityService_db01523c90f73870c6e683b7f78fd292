645c6f360a565a5b2b931aa35ea78791
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAnomalousActivity = exports.getSecurityReport = exports.logDataAccess = exports.logSecurityEvent = void 0;
const prisma_1 = require("../lib/prisma");
const logger_1 = require("../lib/logger");
const logSecurityEvent = (data) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        yield prisma_1.prisma.securityAuditLog.create({
            data: {
                organizationId: data.organizationId,
                userId: data.userId,
                action: data.action,
                resource: data.resource,
                resourceId: data.resourceId,
                success: data.success,
                ipAddress: data.ipAddress,
                userAgent: data.userAgent,
                details: data.details,
                risk_level: data.risk_level || 'low',
            },
        });
        // Log high-risk events to application logger
        if (data.risk_level === 'high' || data.risk_level === 'critical') {
            logger_1.logger.warn('High-risk security event detected', Object.assign(Object.assign({}, data), { timestamp: new Date().toISOString() }));
        }
        // Check for suspicious patterns
        yield checkSuspiciousActivity(data);
    }
    catch (error) {
        logger_1.logger.error('Failed to log security event', {
            error: error instanceof Error ? error.message : error,
            eventData: data,
        });
    }
});
exports.logSecurityEvent = logSecurityEvent;
const logDataAccess = (data) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        yield prisma_1.prisma.dataAccessLog.create({
            data,
        });
    }
    catch (error) {
        logger_1.logger.error('Failed to log data access', {
            error: error instanceof Error ? error.message : error,
            accessData: data,
        });
    }
});
exports.logDataAccess = logDataAccess;
const checkSuspiciousActivity = (event) => __awaiter(void 0, void 0, void 0, function* () {
    if (!event.userId || !event.organizationId)
        return;
    const timeWindow = new Date();
    timeWindow.setMinutes(timeWindow.getMinutes() - 15); // 15 minutes
    // Check for multiple failed attempts
    const failedAttempts = yield prisma_1.prisma.securityAuditLog.count({
        where: {
            userId: event.userId,
            organizationId: event.organizationId,
            success: false,
            createdAt: {
                gte: timeWindow,
            },
        },
    });
    if (failedAttempts >= 5) {
        yield (0, exports.logSecurityEvent)({
            organizationId: event.organizationId,
            userId: event.userId,
            action: 'suspicious_activity_detected',
            success: true,
            details: {
                pattern: 'multiple_failed_attempts',
                count: failedAttempts,
                timeWindow: '15_minutes',
            },
            risk_level: 'critical',
        });
        // Could trigger additional security measures here
        // e.g., temporary account lock, notification to admins
    }
});
const getSecurityReport = (organizationId, startDate, endDate) => __awaiter(void 0, void 0, void 0, function* () {
    const [totalEvents, failedEvents, highRiskEvents, topActions, topUsers, dataAccess,] = yield Promise.all([
        // Total security events
        prisma_1.prisma.securityAuditLog.count({
            where: {
                organizationId,
                createdAt: { gte: startDate, lte: endDate },
            },
        }),
        // Failed events
        prisma_1.prisma.securityAuditLog.count({
            where: {
                organizationId,
                success: false,
                createdAt: { gte: startDate, lte: endDate },
            },
        }),
        // High-risk events
        prisma_1.prisma.securityAuditLog.count({
            where: {
                organizationId,
                risk_level: { in: ['high', 'critical'] },
                createdAt: { gte: startDate, lte: endDate },
            },
        }),
        // Top actions
        prisma_1.prisma.securityAuditLog.groupBy({
            by: ['action'],
            where: {
                organizationId,
                createdAt: { gte: startDate, lte: endDate },
            },
            _count: { action: true },
            orderBy: { _count: { action: 'desc' } },
            take: 10,
        }),
        // Top users by activity
        prisma_1.prisma.securityAuditLog.groupBy({
            by: ['userId'],
            where: {
                organizationId,
                userId: { not: null },
                createdAt: { gte: startDate, lte: endDate },
            },
            _count: { userId: true },
            orderBy: { _count: { userId: 'desc' } },
            take: 10,
        }),
        // Data access summary
        prisma_1.prisma.dataAccessLog.groupBy({
            by: ['table_name', 'operation'],
            where: {
                organizationId,
                createdAt: { gte: startDate, lte: endDate },
            },
            _count: { table_name: true },
        }),
    ]);
    return {
        summary: {
            totalEvents,
            failedEvents,
            highRiskEvents,
            successRate: totalEvents > 0
                ? (((totalEvents - failedEvents) / totalEvents) * 100).toFixed(2)
                : '100',
        },
        topActions: topActions.map((item) => ({
            action: item.action,
            count: item._count.action,
        })),
        topUsers,
        dataAccess: dataAccess.map((item) => ({
            table: item.table_name,
            operation: item.operation,
            count: item._count.table_name,
        })),
    };
});
exports.getSecurityReport = getSecurityReport;
const getAnomalousActivity = (organizationId) => __awaiter(void 0, void 0, void 0, function* () {
    const timeWindow = new Date();
    timeWindow.setHours(timeWindow.getHours() - 24); // Last 24 hours
    // Users with unusual access patterns
    const suspiciousUsers = yield prisma_1.prisma.securityAuditLog.findMany({
        where: {
            organizationId,
            createdAt: { gte: timeWindow },
            OR: [
                { risk_level: 'critical' },
                { action: 'suspicious_activity_detected' },
            ],
        },
        include: {
            user: {
                select: { email: true, name: true },
            },
        },
    });
    // Unusual data access patterns
    const unusualDataAccess = yield prisma_1.prisma.dataAccessLog.groupBy({
        by: ['userId', 'table_name'],
        where: {
            organizationId,
            createdAt: { gte: timeWindow },
        },
        _count: { table_name: true },
        having: {
            table_name: { _count: { gt: 100 } }, // More than 100 accesses
        },
    });
    return {
        suspiciousUsers,
        unusualDataAccess,
    };
});
exports.getAnomalousActivity = getAnomalousActivity;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,