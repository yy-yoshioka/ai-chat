{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/utils/widgetKey.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAAiC;AAEjC;;;GAGG;AACH,SAAgB,iBAAiB;IAC/B,OAAO,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAChD,CAAC;AAFD,8CAEC;AAED;;;;GAIG;AACH,SAAgB,gBAAgB,CAAC,GAAW;IAC1C,gFAAgF;IAChF,MAAM,SAAS,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC7C,MAAM,YAAY,GAAG,wBAAwB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,uDAAuD;IAEhH,OAAO,SAAS,IAAI,YAAY,CAAC;AACnC,CAAC;AAND,4CAMC","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/utils/widgetKey.ts"],"sourcesContent":["import * as crypto from 'crypto';\n\n/**\n * Generate a cryptographically secure widget key\n * @returns A 64-character hexadecimal string\n */\nexport function generateWidgetKey(): string {\n  return crypto.randomBytes(32).toString('hex');\n}\n\n/**\n * Validate widget key format\n * @param key The widget key to validate\n * @returns True if the key is valid format\n */\nexport function isValidWidgetKey(key: string): boolean {\n  // Allow both new format (64 hex characters) and legacy format (for development)\n  const newFormat = /^[0-9a-f]{64}$/.test(key);\n  const legacyFormat = /^[a-zA-Z0-9\\-_]{3,50}$/.test(key); // Allow alphanumeric, hyphens, underscores, 3-50 chars\n\n  return newFormat || legacyFormat;\n}\n"],"version":3}