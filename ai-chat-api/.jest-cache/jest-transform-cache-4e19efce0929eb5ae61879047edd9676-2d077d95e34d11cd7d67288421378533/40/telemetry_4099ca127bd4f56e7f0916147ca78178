7d0130ea15fe02b4e045367f184576db
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.recordMetric = exports.customMetrics = exports.initializeTelemetry = void 0;
const sdk_node_1 = require("@opentelemetry/sdk-node");
const sdk_metrics_1 = require("@opentelemetry/sdk-metrics");
const resources_1 = require("@opentelemetry/resources");
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
const exporter_metrics_otlp_http_1 = require("@opentelemetry/exporter-metrics-otlp-http");
const auto_instrumentations_node_1 = require("@opentelemetry/auto-instrumentations-node");
const logger_1 = require("./logger");
function initializeTelemetry() {
    try {
        const serviceName = process.env.OTEL_SERVICE_NAME || 'ai-chat-api';
        const metricsEndpoint = process.env.OTEL_EXPORTER_OTLP_METRICS_ENDPOINT;
        if (!metricsEndpoint) {
            logger_1.logger.info('OpenTelemetry metrics endpoint not configured, skipping initialization');
            return null;
        }
        // Create metric exporter
        const metricExporter = new exporter_metrics_otlp_http_1.OTLPMetricExporter({
            url: metricsEndpoint,
            headers: {},
        });
        // Create metric reader
        const metricReader = new sdk_metrics_1.PeriodicExportingMetricReader({
            exporter: metricExporter,
            exportIntervalMillis: 60000, // Export every minute
        });
        // Configure resource
        const resource = (0, resources_1.resourceFromAttributes)({
            [semantic_conventions_1.SemanticResourceAttributes.SERVICE_NAME]: serviceName,
            [semantic_conventions_1.SemanticResourceAttributes.SERVICE_VERSION]: process.env.npm_package_version || '1.0.0',
            [semantic_conventions_1.SemanticResourceAttributes.DEPLOYMENT_ENVIRONMENT]: process.env.NODE_ENV || 'development',
        });
        // Initialize SDK
        const sdk = new sdk_node_1.NodeSDK({
            resource,
            instrumentations: [
                (0, auto_instrumentations_node_1.getNodeAutoInstrumentations)({
                    '@opentelemetry/instrumentation-fs': {
                        enabled: false, // Disable fs instrumentation to reduce noise
                    },
                    '@opentelemetry/instrumentation-http': {
                        requestHook: (span, request) => {
                            // Add custom attributes to HTTP spans
                            if ('url' in request && request.url) {
                                span.setAttribute('http.url.path', request.url);
                            }
                        },
                    },
                    '@opentelemetry/instrumentation-express': {
                        requestHook: (span, info) => {
                            // Add custom attributes to Express spans
                            if (info.request) {
                                span.setAttribute('express.route', info.layerPath || 'unknown');
                            }
                        },
                    },
                }),
            ],
            metricReader,
        });
        // Initialize the SDK
        sdk.start();
        logger_1.logger.info('OpenTelemetry initialized', {
            serviceName,
            metricsEndpoint,
        });
        // Handle graceful shutdown
        process.on('SIGTERM', () => {
            sdk
                .shutdown()
                .then(() => logger_1.logger.info('OpenTelemetry terminated'))
                .catch((error) => logger_1.logger.error('Error shutting down OpenTelemetry', error));
        });
        return sdk;
    }
    catch (error) {
        logger_1.logger.error('Failed to initialize OpenTelemetry', error);
        return null;
    }
}
exports.initializeTelemetry = initializeTelemetry;
// Custom metrics helper
const api_1 = require("@opentelemetry/api");
const meter = api_1.metrics.getMeter('ai-chat-api', '1.0.0');
// Create custom metrics
exports.customMetrics = {
    // HTTP request duration histogram
    httpRequestDuration: meter.createHistogram('http_request_duration', {
        description: 'Duration of HTTP requests in milliseconds',
        unit: 'ms',
        valueType: api_1.ValueType.DOUBLE,
    }),
    // Active connections gauge
    activeConnections: meter.createUpDownCounter('active_connections', {
        description: 'Number of active connections',
        unit: '1',
        valueType: api_1.ValueType.INT,
    }),
    // Chat completion counter
    chatCompletions: meter.createCounter('chat_completions', {
        description: 'Number of chat completions',
        unit: '1',
        valueType: api_1.ValueType.INT,
    }),
    // Knowledge base operations counter
    knowledgeBaseOps: meter.createCounter('knowledge_base_operations', {
        description: 'Number of knowledge base operations',
        unit: '1',
        valueType: api_1.ValueType.INT,
    }),
    // Widget usage counter
    widgetUsage: meter.createCounter('widget_usage', {
        description: 'Number of widget interactions',
        unit: '1',
        valueType: api_1.ValueType.INT,
    }),
    // Error counter
    errors: meter.createCounter('errors', {
        description: 'Number of errors',
        unit: '1',
        valueType: api_1.ValueType.INT,
    }),
};
// Helper function to record metric with attributes
function recordMetric(metric, value, attributes) {
    try {
        if ('add' in metric) {
            metric.add(value, attributes);
        }
        else if ('record' in metric) {
            metric.record(value, attributes);
        }
    }
    catch (error) {
        logger_1.logger.error('Failed to record metric', {
            error,
            metric,
            value,
            attributes,
        });
    }
}
exports.recordMetric = recordMetric;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,