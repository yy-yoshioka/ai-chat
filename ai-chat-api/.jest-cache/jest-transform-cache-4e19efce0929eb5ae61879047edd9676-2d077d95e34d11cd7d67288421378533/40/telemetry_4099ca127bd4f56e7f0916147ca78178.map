{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/lib/telemetry.ts","mappings":"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","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/lib/telemetry.ts"],"sourcesContent":["import { NodeSDK } from '@opentelemetry/sdk-node';\nimport { PeriodicExportingMetricReader } from '@opentelemetry/sdk-metrics';\nimport { resourceFromAttributes } from '@opentelemetry/resources';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { OTLPMetricExporter } from '@opentelemetry/exporter-metrics-otlp-http';\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\nimport { logger } from './logger';\n\nexport function initializeTelemetry(): NodeSDK | null {\n  try {\n    const serviceName = process.env.OTEL_SERVICE_NAME || 'ai-chat-api';\n    const metricsEndpoint = process.env.OTEL_EXPORTER_OTLP_METRICS_ENDPOINT;\n\n    if (!metricsEndpoint) {\n      logger.info(\n        'OpenTelemetry metrics endpoint not configured, skipping initialization'\n      );\n      return null;\n    }\n\n    // Create metric exporter\n    const metricExporter = new OTLPMetricExporter({\n      url: metricsEndpoint,\n      headers: {},\n    });\n\n    // Create metric reader\n    const metricReader = new PeriodicExportingMetricReader({\n      exporter: metricExporter,\n      exportIntervalMillis: 60000, // Export every minute\n    });\n\n    // Configure resource\n    const resource = resourceFromAttributes({\n      [SemanticResourceAttributes.SERVICE_NAME]: serviceName,\n      [SemanticResourceAttributes.SERVICE_VERSION]:\n        process.env.npm_package_version || '1.0.0',\n      [SemanticResourceAttributes.DEPLOYMENT_ENVIRONMENT]:\n        process.env.NODE_ENV || 'development',\n    });\n\n    // Initialize SDK\n    const sdk = new NodeSDK({\n      resource,\n      instrumentations: [\n        getNodeAutoInstrumentations({\n          '@opentelemetry/instrumentation-fs': {\n            enabled: false, // Disable fs instrumentation to reduce noise\n          },\n          '@opentelemetry/instrumentation-http': {\n            requestHook: (span, request) => {\n              // Add custom attributes to HTTP spans\n              if ('url' in request && request.url) {\n                span.setAttribute('http.url.path', request.url);\n              }\n            },\n          },\n          '@opentelemetry/instrumentation-express': {\n            requestHook: (span, info) => {\n              // Add custom attributes to Express spans\n              if (info.request) {\n                span.setAttribute(\n                  'express.route',\n                  (info as any).layerPath || 'unknown'\n                );\n              }\n            },\n          },\n        }),\n      ],\n      metricReader,\n    });\n\n    // Initialize the SDK\n    sdk.start();\n\n    logger.info('OpenTelemetry initialized', {\n      serviceName,\n      metricsEndpoint,\n    });\n\n    // Handle graceful shutdown\n    process.on('SIGTERM', () => {\n      sdk\n        .shutdown()\n        .then(() => logger.info('OpenTelemetry terminated'))\n        .catch((error) =>\n          logger.error('Error shutting down OpenTelemetry', error)\n        );\n    });\n\n    return sdk;\n  } catch (error) {\n    logger.error('Failed to initialize OpenTelemetry', error);\n    return null;\n  }\n}\n\n// Custom metrics helper\nimport { metrics, ValueType } from '@opentelemetry/api';\n\nconst meter = metrics.getMeter('ai-chat-api', '1.0.0');\n\n// Create custom metrics\nexport const customMetrics = {\n  // HTTP request duration histogram\n  httpRequestDuration: meter.createHistogram('http_request_duration', {\n    description: 'Duration of HTTP requests in milliseconds',\n    unit: 'ms',\n    valueType: ValueType.DOUBLE,\n  }),\n\n  // Active connections gauge\n  activeConnections: meter.createUpDownCounter('active_connections', {\n    description: 'Number of active connections',\n    unit: '1',\n    valueType: ValueType.INT,\n  }),\n\n  // Chat completion counter\n  chatCompletions: meter.createCounter('chat_completions', {\n    description: 'Number of chat completions',\n    unit: '1',\n    valueType: ValueType.INT,\n  }),\n\n  // Knowledge base operations counter\n  knowledgeBaseOps: meter.createCounter('knowledge_base_operations', {\n    description: 'Number of knowledge base operations',\n    unit: '1',\n    valueType: ValueType.INT,\n  }),\n\n  // Widget usage counter\n  widgetUsage: meter.createCounter('widget_usage', {\n    description: 'Number of widget interactions',\n    unit: '1',\n    valueType: ValueType.INT,\n  }),\n\n  // Error counter\n  errors: meter.createCounter('errors', {\n    description: 'Number of errors',\n    unit: '1',\n    valueType: ValueType.INT,\n  }),\n};\n\n// Helper function to record metric with attributes\nexport function recordMetric(\n  metric: any,\n  value: number,\n  attributes?: Record<string, string | number>\n): void {\n  try {\n    if ('add' in metric) {\n      metric.add(value, attributes);\n    } else if ('record' in metric) {\n      metric.record(value, attributes);\n    }\n  } catch (error) {\n    logger.error('Failed to record metric', {\n      error,\n      metric,\n      value,\n      attributes,\n    });\n  }\n}\n"],"version":3}