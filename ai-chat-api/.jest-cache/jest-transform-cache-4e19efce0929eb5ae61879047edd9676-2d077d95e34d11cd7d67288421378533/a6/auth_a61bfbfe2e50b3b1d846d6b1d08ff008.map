{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/routes/auth.ts","mappings":"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","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/routes/auth.ts"],"sourcesContent":["import { Router, Request, Response } from 'express';\nimport { authMiddleware } from '../middleware/auth';\nimport { signToken } from '../utils/jwt';\nimport { hashPassword, verifyPassword } from '../utils/password';\nimport { prisma } from '../lib/prisma';\n\nconst router = Router();\n\n// POST /auth/login - User login\nrouter.post('/login', async (req: Request, res: Response) => {\n  try {\n    const { email, password } = req.body;\n\n    console.log(email, password);\n\n    // Simple validation\n    if (!email || !password) {\n      return res\n        .status(400)\n        .json({ message: 'Email and password are required' });\n    }\n\n    // Find user by email\n    const user = await prisma.user.findUnique({\n      where: { email },\n    });\n\n    if (!user) {\n      return res.status(401).json({ message: 'Invalid credentials' });\n    }\n\n    // Verify password\n    const isPasswordValid = await verifyPassword(password, user.password);\n\n    if (!isPasswordValid) {\n      return res.status(401).json({ message: 'Invalid credentials' });\n    }\n\n    // Generate JWT and set cookie\n    signToken({ id: user.id, email: user.email, isAdmin: user.isAdmin }, res);\n\n    // Return user data (excluding password)\n    const { password: _password, ...userData } = user;\n    res.status(200).json({\n      message: 'Login successful',\n      user: userData,\n    });\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\n// POST /auth/signup - User registration\nrouter.post('/signup', async (req: Request, res: Response) => {\n  try {\n    const { email, password, name } = req.body;\n\n    // Simple validation\n    if (!email || !password) {\n      return res\n        .status(400)\n        .json({ message: 'Email and password are required' });\n    }\n\n    // Check if user already exists\n    const existingUser = await prisma.user.findUnique({\n      where: { email },\n    });\n\n    if (existingUser) {\n      return res.status(409).json({ message: 'User already exists' });\n    }\n\n    // Hash password\n    const hashedPassword = await hashPassword(password);\n\n    // Create new user\n    const user = await prisma.user.create({\n      data: {\n        email,\n        password: hashedPassword,\n        name: name || null,\n      },\n    });\n\n    // Generate JWT and set cookie\n    signToken({ id: user.id, email: user.email, isAdmin: user.isAdmin }, res);\n\n    // Return user data (excluding password)\n    const { password: _password, ...userData } = user;\n    res.status(201).json({\n      message: 'User created successfully',\n      user: userData,\n    });\n  } catch (error) {\n    console.error('Signup error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\n// GET /auth/me - Get current user info (protected route)\nrouter.get('/me', authMiddleware, async (req: Request, res: Response) => {\n  try {\n    // Get user from database using the ID from JWT\n    const user = await prisma.user.findUnique({\n      where: { id: req.user?.id },\n    });\n\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n\n    // Return user data (excluding password)\n    const { password: _password, ...userData } = user;\n    res.status(200).json({\n      message: 'User authenticated',\n      user: userData,\n    });\n  } catch (error) {\n    console.error('Auth/me error:', error);\n    res.status(500).json({ message: 'Internal server error' });\n  }\n});\n\nexport default router;\n"],"version":3}