{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/routes/dashboard.test.ts","mappings":"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","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/routes/dashboard.test.ts"],"sourcesContent":["import request from 'supertest';\nimport express from 'express';\nimport { prisma } from '../../src/lib/prisma';\nimport dashboardRouter from '../../src/routes/dashboard';\nimport { authMiddleware } from '../../src/middleware/auth';\nimport { metricsMiddleware } from '../../src/middleware/metrics';\nimport {\n  testUser,\n  testOrganization,\n  generateTestToken,\n} from '../fixtures/test-data';\n\n// Mock dependencies\njest.mock('../../src/lib/prisma');\njest.mock('../../src/middleware/auth');\njest.mock('../../src/middleware/metrics');\n\ndescribe('Dashboard Routes', () => {\n  let app: express.Application;\n\n  beforeEach(() => {\n    app = express();\n    app.use(express.json());\n    app.use('/api/dashboard', dashboardRouter);\n\n    // Setup middleware mocks\n    (authMiddleware as jest.Mock).mockImplementation((req, res, next) => {\n      req.user = { ...testUser, organization: testOrganization };\n      next();\n    });\n\n    (metricsMiddleware as jest.Mock).mockImplementation((req, res, next) => {\n      next();\n    });\n\n    // Reset all mocks\n    jest.clearAllMocks();\n  });\n\n  describe('GET /api/dashboard', () => {\n    it('should return dashboard metrics successfully', async () => {\n      const mockTotalChats = 1250;\n      const mockActiveUsers = 45;\n      const mockRecentChats = [\n        { createdAt: new Date('2024-01-15T10:00:00Z') },\n        { createdAt: new Date('2024-01-15T11:30:00Z') },\n        { createdAt: new Date('2024-01-15T14:15:00Z') },\n      ];\n\n      // Mock Prisma queries\n      (prisma.chatLog.count as jest.Mock).mockResolvedValue(mockTotalChats);\n      (prisma.user.count as jest.Mock).mockResolvedValue(mockActiveUsers);\n      (prisma.chatLog.findMany as jest.Mock).mockResolvedValue(mockRecentChats);\n\n      const response = await request(app)\n        .get('/api/dashboard')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        totalChats: mockTotalChats,\n        activeUsers: mockActiveUsers,\n        avgResponseTime: 250, // Hardcoded value\n        errorRate: 0.02, // Hardcoded value\n        timestamp: expect.any(String),\n      });\n\n      // Verify timestamp is valid ISO string\n      expect(new Date(response.body.timestamp)).toBeInstanceOf(Date);\n      expect(new Date(response.body.timestamp).getTime()).toBeGreaterThan(\n        Date.now() - 5000\n      ); // Within last 5 seconds\n    });\n\n    it('should query total chats count correctly', async () => {\n      (prisma.chatLog.count as jest.Mock).mockResolvedValue(100);\n      (prisma.user.count as jest.Mock).mockResolvedValue(10);\n      (prisma.chatLog.findMany as jest.Mock).mockResolvedValue([]);\n\n      await request(app)\n        .get('/api/dashboard')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(prisma.chatLog.count).toHaveBeenCalledWith();\n    });\n\n    it('should query active users in last 24 hours correctly', async () => {\n      (prisma.chatLog.count as jest.Mock).mockResolvedValue(100);\n      (prisma.user.count as jest.Mock).mockResolvedValue(10);\n      (prisma.chatLog.findMany as jest.Mock).mockResolvedValue([]);\n\n      await request(app)\n        .get('/api/dashboard')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\n\n      expect(prisma.user.count).toHaveBeenCalledWith({\n        where: {\n          chatLogs: {\n            some: {\n              createdAt: {\n                gte: expect.any(Date),\n              },\n            },\n          },\n        },\n      });\n\n      // Verify the date is approximately 24 hours ago (within 1 minute tolerance)\n      const callArgs = (prisma.user.count as jest.Mock).mock.calls[0][0];\n      const actualDate = callArgs.where.chatLogs.some.createdAt.gte;\n      const timeDiff = Math.abs(\n        actualDate.getTime() - twentyFourHoursAgo.getTime()\n      );\n      expect(timeDiff).toBeLessThan(60000); // Less than 1 minute difference\n    });\n\n    it('should query recent chats in last 24 hours correctly', async () => {\n      (prisma.chatLog.count as jest.Mock).mockResolvedValue(100);\n      (prisma.user.count as jest.Mock).mockResolvedValue(10);\n      (prisma.chatLog.findMany as jest.Mock).mockResolvedValue([]);\n\n      await request(app)\n        .get('/api/dashboard')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(prisma.chatLog.findMany).toHaveBeenCalledWith({\n        where: {\n          createdAt: {\n            gte: expect.any(Date),\n          },\n        },\n        select: {\n          createdAt: true,\n        },\n      });\n\n      // Verify only createdAt is selected for privacy and performance\n      const callArgs = (prisma.chatLog.findMany as jest.Mock).mock.calls[0][0];\n      expect(callArgs.select).toEqual({ createdAt: true });\n    });\n\n    it('should execute all queries in parallel for performance', async () => {\n      const countDelay = 100;\n      const userCountDelay = 150;\n      const findManyDelay = 120;\n\n      (prisma.chatLog.count as jest.Mock).mockImplementation(\n        () =>\n          new Promise((resolve) => setTimeout(() => resolve(100), countDelay))\n      );\n      (prisma.user.count as jest.Mock).mockImplementation(\n        () =>\n          new Promise((resolve) =>\n            setTimeout(() => resolve(10), userCountDelay)\n          )\n      );\n      (prisma.chatLog.findMany as jest.Mock).mockImplementation(\n        () =>\n          new Promise((resolve) => setTimeout(() => resolve([]), findManyDelay))\n      );\n\n      const startTime = Date.now();\n\n      await request(app)\n        .get('/api/dashboard')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      const endTime = Date.now();\n      const totalTime = endTime - startTime;\n\n      // Should take roughly the time of the longest query (not the sum of all)\n      expect(totalTime).toBeLessThan(\n        countDelay + userCountDelay + findManyDelay\n      );\n      expect(totalTime).toBeGreaterThan(\n        Math.max(countDelay, userCountDelay, findManyDelay) - 50\n      );\n    });\n\n    it('should return hardcoded avgResponseTime and errorRate', async () => {\n      (prisma.chatLog.count as jest.Mock).mockResolvedValue(100);\n      (prisma.user.count as jest.Mock).mockResolvedValue(10);\n      (prisma.chatLog.findMany as jest.Mock).mockResolvedValue([]);\n\n      const response = await request(app)\n        .get('/api/dashboard')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.body.avgResponseTime).toBe(250);\n      expect(response.body.errorRate).toBe(0.02);\n    });\n\n    it('should round avgResponseTime and errorRate appropriately', async () => {\n      (prisma.chatLog.count as jest.Mock).mockResolvedValue(100);\n      (prisma.user.count as jest.Mock).mockResolvedValue(10);\n      (prisma.chatLog.findMany as jest.Mock).mockResolvedValue([]);\n\n      const response = await request(app)\n        .get('/api/dashboard')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      // avgResponseTime should be rounded to nearest integer\n      expect(Number.isInteger(response.body.avgResponseTime)).toBe(true);\n\n      // errorRate should be rounded to 3 decimal places\n      expect(\n        response.body.errorRate.toString().split('.')[1]?.length || 0\n      ).toBeLessThanOrEqual(3);\n    });\n\n    it('should handle zero values gracefully', async () => {\n      (prisma.chatLog.count as jest.Mock).mockResolvedValue(0);\n      (prisma.user.count as jest.Mock).mockResolvedValue(0);\n      (prisma.chatLog.findMany as jest.Mock).mockResolvedValue([]);\n\n      const response = await request(app)\n        .get('/api/dashboard')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        totalChats: 0,\n        activeUsers: 0,\n        avgResponseTime: 250,\n        errorRate: 0.02,\n        timestamp: expect.any(String),\n      });\n    });\n\n    it('should handle large numbers correctly', async () => {\n      const largeChatCount = 999999;\n      const largeUserCount = 50000;\n\n      (prisma.chatLog.count as jest.Mock).mockResolvedValue(largeChatCount);\n      (prisma.user.count as jest.Mock).mockResolvedValue(largeUserCount);\n      (prisma.chatLog.findMany as jest.Mock).mockResolvedValue([]);\n\n      const response = await request(app)\n        .get('/api/dashboard')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body.totalChats).toBe(largeChatCount);\n      expect(response.body.activeUsers).toBe(largeUserCount);\n    });\n\n    it('should handle database errors gracefully', async () => {\n      (prisma.chatLog.count as jest.Mock).mockRejectedValue(\n        new Error('Database connection failed')\n      );\n\n      const response = await request(app)\n        .get('/api/dashboard')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(500);\n      expect(response.body).toEqual({\n        error: 'Failed to fetch dashboard data',\n      });\n    });\n\n    it('should handle partial database failures gracefully', async () => {\n      (prisma.chatLog.count as jest.Mock).mockResolvedValue(100);\n      (prisma.user.count as jest.Mock).mockRejectedValue(\n        new Error('User query failed')\n      );\n      (prisma.chatLog.findMany as jest.Mock).mockResolvedValue([]);\n\n      const response = await request(app)\n        .get('/api/dashboard')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(500);\n      expect(response.body).toEqual({\n        error: 'Failed to fetch dashboard data',\n      });\n    });\n\n    it('should log errors to console', async () => {\n      const consoleErrorSpy = jest\n        .spyOn(console, 'error')\n        .mockImplementation(() => {});\n      const mockError = new Error('Database connection failed');\n\n      (prisma.chatLog.count as jest.Mock).mockRejectedValue(mockError);\n\n      await request(app)\n        .get('/api/dashboard')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\n        'Dashboard error:',\n        mockError\n      );\n\n      consoleErrorSpy.mockRestore();\n    });\n\n    it('should handle null/undefined responses from database', async () => {\n      (prisma.chatLog.count as jest.Mock).mockResolvedValue(null);\n      (prisma.user.count as jest.Mock).mockResolvedValue(undefined);\n      (prisma.chatLog.findMany as jest.Mock).mockResolvedValue(null);\n\n      const response = await request(app)\n        .get('/api/dashboard')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        totalChats: null,\n        activeUsers: undefined,\n        avgResponseTime: 250,\n        errorRate: 0.02,\n        timestamp: expect.any(String),\n      });\n    });\n\n    it('should handle empty recent chats array', async () => {\n      (prisma.chatLog.count as jest.Mock).mockResolvedValue(100);\n      (prisma.user.count as jest.Mock).mockResolvedValue(10);\n      (prisma.chatLog.findMany as jest.Mock).mockResolvedValue([]);\n\n      const response = await request(app)\n        .get('/api/dashboard')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body.totalChats).toBe(100);\n      expect(response.body.activeUsers).toBe(10);\n    });\n\n    it('should handle recent chats with various timestamps', async () => {\n      const recentChats = [\n        { createdAt: new Date('2024-01-15T23:59:59Z') },\n        { createdAt: new Date('2024-01-15T12:00:00Z') },\n        { createdAt: new Date('2024-01-15T00:00:01Z') },\n      ];\n\n      (prisma.chatLog.count as jest.Mock).mockResolvedValue(100);\n      (prisma.user.count as jest.Mock).mockResolvedValue(10);\n      (prisma.chatLog.findMany as jest.Mock).mockResolvedValue(recentChats);\n\n      const response = await request(app)\n        .get('/api/dashboard')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body.totalChats).toBe(100);\n      expect(response.body.activeUsers).toBe(10);\n    });\n  });\n\n  describe('Authentication and authorization', () => {\n    it('should require authentication', async () => {\n      (authMiddleware as jest.Mock).mockImplementationOnce((req, res) => {\n        res.status(401).json({ error: 'Unauthorized' });\n      });\n\n      const response = await request(app).get('/api/dashboard');\n\n      expect(response.status).toBe(401);\n      expect(response.body).toEqual({ error: 'Unauthorized' });\n    });\n\n    it('should not require admin permissions', async () => {\n      // Regular user should be able to access dashboard\n      const regularUser = { ...testUser, roles: ['user'] };\n\n      (authMiddleware as jest.Mock).mockImplementation((req, res, next) => {\n        req.user = { ...regularUser, organization: testOrganization };\n        next();\n      });\n\n      (prisma.chatLog.count as jest.Mock).mockResolvedValue(100);\n      (prisma.user.count as jest.Mock).mockResolvedValue(10);\n      (prisma.chatLog.findMany as jest.Mock).mockResolvedValue([]);\n\n      const response = await request(app)\n        .get('/api/dashboard')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(regularUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n    });\n\n    it('should apply metrics middleware', async () => {\n      const metricsMiddlewareSpy = jest.fn((req, res, next) => next());\n      (metricsMiddleware as jest.Mock).mockImplementation(metricsMiddlewareSpy);\n\n      (prisma.chatLog.count as jest.Mock).mockResolvedValue(100);\n      (prisma.user.count as jest.Mock).mockResolvedValue(10);\n      (prisma.chatLog.findMany as jest.Mock).mockResolvedValue([]);\n\n      await request(app)\n        .get('/api/dashboard')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(metricsMiddlewareSpy).toHaveBeenCalled();\n    });\n\n    it('should apply middleware in correct order', async () => {\n      const middlewareOrder: string[] = [];\n\n      (authMiddleware as jest.Mock).mockImplementation((req, res, next) => {\n        middlewareOrder.push('auth');\n        req.user = { ...testUser, organization: testOrganization };\n        next();\n      });\n\n      (metricsMiddleware as jest.Mock).mockImplementation((req, res, next) => {\n        middlewareOrder.push('metrics');\n        next();\n      });\n\n      (prisma.chatLog.count as jest.Mock).mockResolvedValue(100);\n      (prisma.user.count as jest.Mock).mockResolvedValue(10);\n      (prisma.chatLog.findMany as jest.Mock).mockResolvedValue([]);\n\n      await request(app)\n        .get('/api/dashboard')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(middlewareOrder).toEqual(['auth', 'metrics']);\n    });\n\n    it('should not proceed if auth middleware fails', async () => {\n      (authMiddleware as jest.Mock).mockImplementationOnce((req, res) => {\n        res.status(401).json({ error: 'Token expired' });\n      });\n\n      const metricsMiddlewareSpy = jest.fn();\n      (metricsMiddleware as jest.Mock).mockImplementation(metricsMiddlewareSpy);\n\n      const response = await request(app)\n        .get('/api/dashboard')\n        .set('Authorization', `Bearer invalid-token`);\n\n      expect(response.status).toBe(401);\n      expect(metricsMiddlewareSpy).not.toHaveBeenCalled();\n      expect(prisma.chatLog.count).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Performance considerations', () => {\n    it('should handle concurrent requests efficiently', async () => {\n      (prisma.chatLog.count as jest.Mock).mockResolvedValue(100);\n      (prisma.user.count as jest.Mock).mockResolvedValue(10);\n      (prisma.chatLog.findMany as jest.Mock).mockResolvedValue([]);\n\n      const requests = Array.from({ length: 10 }, () =>\n        request(app)\n          .get('/api/dashboard')\n          .set(\n            'Authorization',\n            `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n          )\n      );\n\n      const responses = await Promise.all(requests);\n\n      responses.forEach((response) => {\n        expect(response.status).toBe(200);\n        expect(response.body.totalChats).toBe(100);\n      });\n\n      expect(prisma.chatLog.count).toHaveBeenCalledTimes(10);\n    });\n\n    it('should not fetch unnecessary data for performance', async () => {\n      (prisma.chatLog.count as jest.Mock).mockResolvedValue(100);\n      (prisma.user.count as jest.Mock).mockResolvedValue(10);\n      (prisma.chatLog.findMany as jest.Mock).mockResolvedValue([]);\n\n      await request(app)\n        .get('/api/dashboard')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      // Verify that only createdAt is selected from recent chats\n      expect(prisma.chatLog.findMany).toHaveBeenCalledWith({\n        where: expect.any(Object),\n        select: { createdAt: true },\n      });\n\n      // Verify that we don't fetch full chat log data\n      const callArgs = (prisma.chatLog.findMany as jest.Mock).mock.calls[0][0];\n      expect(callArgs.select).not.toHaveProperty('question');\n      expect(callArgs.select).not.toHaveProperty('answer');\n      expect(callArgs.select).not.toHaveProperty('user');\n    });\n\n    it('should handle timeout scenarios gracefully', async () => {\n      // Mock a very slow database response\n      (prisma.chatLog.count as jest.Mock).mockImplementation(\n        () => new Promise(() => {}) // Never resolves\n      );\n\n      const response = await request(app)\n        .get('/api/dashboard')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .timeout(1000);\n\n      // The request should timeout, which supertest handles appropriately\n      // In a real scenario, you might want to implement request timeouts in the route handler\n    });\n  });\n\n  describe('Data accuracy and consistency', () => {\n    it('should use consistent 24-hour time window across queries', async () => {\n      (prisma.chatLog.count as jest.Mock).mockResolvedValue(100);\n      (prisma.user.count as jest.Mock).mockResolvedValue(10);\n      (prisma.chatLog.findMany as jest.Mock).mockResolvedValue([]);\n\n      await request(app)\n        .get('/api/dashboard')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      // Both user.count and chatLog.findMany should use the same time threshold\n      const userCountCall = (prisma.user.count as jest.Mock).mock.calls[0][0];\n      const chatLogFindCall = (prisma.chatLog.findMany as jest.Mock).mock\n        .calls[0][0];\n\n      const userDate = userCountCall.where.chatLogs.some.createdAt.gte;\n      const chatDate = chatLogFindCall.where.createdAt.gte;\n\n      // Dates should be very close (within 1 second due to execution time)\n      const timeDiff = Math.abs(userDate.getTime() - chatDate.getTime());\n      expect(timeDiff).toBeLessThan(1000);\n    });\n\n    it('should handle edge case of exactly 24 hours ago', async () => {\n      const exactlyTwentyFourHoursAgo = new Date(\n        Date.now() - 24 * 60 * 60 * 1000\n      );\n\n      (prisma.chatLog.count as jest.Mock).mockResolvedValue(100);\n      (prisma.user.count as jest.Mock).mockResolvedValue(10);\n      (prisma.chatLog.findMany as jest.Mock).mockResolvedValue([\n        { createdAt: exactlyTwentyFourHoursAgo },\n      ]);\n\n      const response = await request(app)\n        .get('/api/dashboard')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body.totalChats).toBe(100);\n    });\n\n    it('should maintain data consistency across parallel queries', async () => {\n      let callCount = 0;\n      const mockData = [150, 25, []]; // totalChats, activeUsers, recentChats\n\n      (prisma.chatLog.count as jest.Mock).mockImplementation(() => {\n        return Promise.resolve(mockData[0]);\n      });\n\n      (prisma.user.count as jest.Mock).mockImplementation(() => {\n        return Promise.resolve(mockData[1]);\n      });\n\n      (prisma.chatLog.findMany as jest.Mock).mockImplementation(() => {\n        return Promise.resolve(mockData[2]);\n      });\n\n      const response = await request(app)\n        .get('/api/dashboard')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body.totalChats).toBe(150);\n      expect(response.body.activeUsers).toBe(25);\n    });\n  });\n});\n"],"version":3}