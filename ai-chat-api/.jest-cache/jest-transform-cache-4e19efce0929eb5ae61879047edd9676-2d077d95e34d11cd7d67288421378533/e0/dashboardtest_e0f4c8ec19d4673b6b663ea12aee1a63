1e84470d4f140baaa7df38bcd3b514c8
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock dependencies
jest.mock('../../src/lib/prisma');
jest.mock('../../src/middleware/auth');
jest.mock('../../src/middleware/metrics');
const supertest_1 = __importDefault(require("supertest"));
const express_1 = __importDefault(require("express"));
const prisma_1 = require("../../src/lib/prisma");
const dashboard_1 = __importDefault(require("../../src/routes/dashboard"));
const auth_1 = require("../../src/middleware/auth");
const metrics_1 = require("../../src/middleware/metrics");
const test_data_1 = require("../fixtures/test-data");
describe('Dashboard Routes', () => {
    let app;
    beforeEach(() => {
        app = (0, express_1.default)();
        app.use(express_1.default.json());
        app.use('/api/dashboard', dashboard_1.default);
        // Setup middleware mocks
        auth_1.authMiddleware.mockImplementation((req, res, next) => {
            req.user = Object.assign(Object.assign({}, test_data_1.testUser), { organization: test_data_1.testOrganization });
            next();
        });
        metrics_1.metricsMiddleware.mockImplementation((req, res, next) => {
            next();
        });
        // Reset all mocks
        jest.clearAllMocks();
    });
    describe('GET /api/dashboard', () => {
        it('should return dashboard metrics successfully', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockTotalChats = 1250;
            const mockActiveUsers = 45;
            const mockRecentChats = [
                { createdAt: new Date('2024-01-15T10:00:00Z') },
                { createdAt: new Date('2024-01-15T11:30:00Z') },
                { createdAt: new Date('2024-01-15T14:15:00Z') },
            ];
            // Mock Prisma queries
            prisma_1.prisma.chatLog.count.mockResolvedValue(mockTotalChats);
            prisma_1.prisma.user.count.mockResolvedValue(mockActiveUsers);
            prisma_1.prisma.chatLog.findMany.mockResolvedValue(mockRecentChats);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/dashboard')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body).toMatchObject({
                totalChats: mockTotalChats,
                activeUsers: mockActiveUsers,
                avgResponseTime: 250, // Hardcoded value
                errorRate: 0.02, // Hardcoded value
                timestamp: expect.any(String),
            });
            // Verify timestamp is valid ISO string
            expect(new Date(response.body.timestamp)).toBeInstanceOf(Date);
            expect(new Date(response.body.timestamp).getTime()).toBeGreaterThan(Date.now() - 5000); // Within last 5 seconds
        }));
        it('should query total chats count correctly', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.chatLog.count.mockResolvedValue(100);
            prisma_1.prisma.user.count.mockResolvedValue(10);
            prisma_1.prisma.chatLog.findMany.mockResolvedValue([]);
            yield (0, supertest_1.default)(app)
                .get('/api/dashboard')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(prisma_1.prisma.chatLog.count).toHaveBeenCalledWith();
        }));
        it('should query active users in last 24 hours correctly', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.chatLog.count.mockResolvedValue(100);
            prisma_1.prisma.user.count.mockResolvedValue(10);
            prisma_1.prisma.chatLog.findMany.mockResolvedValue([]);
            yield (0, supertest_1.default)(app)
                .get('/api/dashboard')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
            expect(prisma_1.prisma.user.count).toHaveBeenCalledWith({
                where: {
                    chatLogs: {
                        some: {
                            createdAt: {
                                gte: expect.any(Date),
                            },
                        },
                    },
                },
            });
            // Verify the date is approximately 24 hours ago (within 1 minute tolerance)
            const callArgs = prisma_1.prisma.user.count.mock.calls[0][0];
            const actualDate = callArgs.where.chatLogs.some.createdAt.gte;
            const timeDiff = Math.abs(actualDate.getTime() - twentyFourHoursAgo.getTime());
            expect(timeDiff).toBeLessThan(60000); // Less than 1 minute difference
        }));
        it('should query recent chats in last 24 hours correctly', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.chatLog.count.mockResolvedValue(100);
            prisma_1.prisma.user.count.mockResolvedValue(10);
            prisma_1.prisma.chatLog.findMany.mockResolvedValue([]);
            yield (0, supertest_1.default)(app)
                .get('/api/dashboard')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(prisma_1.prisma.chatLog.findMany).toHaveBeenCalledWith({
                where: {
                    createdAt: {
                        gte: expect.any(Date),
                    },
                },
                select: {
                    createdAt: true,
                },
            });
            // Verify only createdAt is selected for privacy and performance
            const callArgs = prisma_1.prisma.chatLog.findMany.mock.calls[0][0];
            expect(callArgs.select).toEqual({ createdAt: true });
        }));
        it('should execute all queries in parallel for performance', () => __awaiter(void 0, void 0, void 0, function* () {
            const countDelay = 100;
            const userCountDelay = 150;
            const findManyDelay = 120;
            prisma_1.prisma.chatLog.count.mockImplementation(() => new Promise((resolve) => setTimeout(() => resolve(100), countDelay)));
            prisma_1.prisma.user.count.mockImplementation(() => new Promise((resolve) => setTimeout(() => resolve(10), userCountDelay)));
            prisma_1.prisma.chatLog.findMany.mockImplementation(() => new Promise((resolve) => setTimeout(() => resolve([]), findManyDelay)));
            const startTime = Date.now();
            yield (0, supertest_1.default)(app)
                .get('/api/dashboard')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            const endTime = Date.now();
            const totalTime = endTime - startTime;
            // Should take roughly the time of the longest query (not the sum of all)
            expect(totalTime).toBeLessThan(countDelay + userCountDelay + findManyDelay);
            expect(totalTime).toBeGreaterThan(Math.max(countDelay, userCountDelay, findManyDelay) - 50);
        }));
        it('should return hardcoded avgResponseTime and errorRate', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.chatLog.count.mockResolvedValue(100);
            prisma_1.prisma.user.count.mockResolvedValue(10);
            prisma_1.prisma.chatLog.findMany.mockResolvedValue([]);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/dashboard')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.body.avgResponseTime).toBe(250);
            expect(response.body.errorRate).toBe(0.02);
        }));
        it('should round avgResponseTime and errorRate appropriately', () => __awaiter(void 0, void 0, void 0, function* () {
            var _a;
            prisma_1.prisma.chatLog.count.mockResolvedValue(100);
            prisma_1.prisma.user.count.mockResolvedValue(10);
            prisma_1.prisma.chatLog.findMany.mockResolvedValue([]);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/dashboard')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            // avgResponseTime should be rounded to nearest integer
            expect(Number.isInteger(response.body.avgResponseTime)).toBe(true);
            // errorRate should be rounded to 3 decimal places
            expect(((_a = response.body.errorRate.toString().split('.')[1]) === null || _a === void 0 ? void 0 : _a.length) || 0).toBeLessThanOrEqual(3);
        }));
        it('should handle zero values gracefully', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.chatLog.count.mockResolvedValue(0);
            prisma_1.prisma.user.count.mockResolvedValue(0);
            prisma_1.prisma.chatLog.findMany.mockResolvedValue([]);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/dashboard')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body).toMatchObject({
                totalChats: 0,
                activeUsers: 0,
                avgResponseTime: 250,
                errorRate: 0.02,
                timestamp: expect.any(String),
            });
        }));
        it('should handle large numbers correctly', () => __awaiter(void 0, void 0, void 0, function* () {
            const largeChatCount = 999999;
            const largeUserCount = 50000;
            prisma_1.prisma.chatLog.count.mockResolvedValue(largeChatCount);
            prisma_1.prisma.user.count.mockResolvedValue(largeUserCount);
            prisma_1.prisma.chatLog.findMany.mockResolvedValue([]);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/dashboard')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body.totalChats).toBe(largeChatCount);
            expect(response.body.activeUsers).toBe(largeUserCount);
        }));
        it('should handle database errors gracefully', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.chatLog.count.mockRejectedValue(new Error('Database connection failed'));
            const response = yield (0, supertest_1.default)(app)
                .get('/api/dashboard')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(500);
            expect(response.body).toEqual({
                error: 'Failed to fetch dashboard data',
            });
        }));
        it('should handle partial database failures gracefully', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.chatLog.count.mockResolvedValue(100);
            prisma_1.prisma.user.count.mockRejectedValue(new Error('User query failed'));
            prisma_1.prisma.chatLog.findMany.mockResolvedValue([]);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/dashboard')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(500);
            expect(response.body).toEqual({
                error: 'Failed to fetch dashboard data',
            });
        }));
        it('should log errors to console', () => __awaiter(void 0, void 0, void 0, function* () {
            const consoleErrorSpy = jest
                .spyOn(console, 'error')
                .mockImplementation(() => { });
            const mockError = new Error('Database connection failed');
            prisma_1.prisma.chatLog.count.mockRejectedValue(mockError);
            yield (0, supertest_1.default)(app)
                .get('/api/dashboard')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(consoleErrorSpy).toHaveBeenCalledWith('Dashboard error:', mockError);
            consoleErrorSpy.mockRestore();
        }));
        it('should handle null/undefined responses from database', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.chatLog.count.mockResolvedValue(null);
            prisma_1.prisma.user.count.mockResolvedValue(undefined);
            prisma_1.prisma.chatLog.findMany.mockResolvedValue(null);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/dashboard')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body).toMatchObject({
                totalChats: null,
                activeUsers: undefined,
                avgResponseTime: 250,
                errorRate: 0.02,
                timestamp: expect.any(String),
            });
        }));
        it('should handle empty recent chats array', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.chatLog.count.mockResolvedValue(100);
            prisma_1.prisma.user.count.mockResolvedValue(10);
            prisma_1.prisma.chatLog.findMany.mockResolvedValue([]);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/dashboard')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body.totalChats).toBe(100);
            expect(response.body.activeUsers).toBe(10);
        }));
        it('should handle recent chats with various timestamps', () => __awaiter(void 0, void 0, void 0, function* () {
            const recentChats = [
                { createdAt: new Date('2024-01-15T23:59:59Z') },
                { createdAt: new Date('2024-01-15T12:00:00Z') },
                { createdAt: new Date('2024-01-15T00:00:01Z') },
            ];
            prisma_1.prisma.chatLog.count.mockResolvedValue(100);
            prisma_1.prisma.user.count.mockResolvedValue(10);
            prisma_1.prisma.chatLog.findMany.mockResolvedValue(recentChats);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/dashboard')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body.totalChats).toBe(100);
            expect(response.body.activeUsers).toBe(10);
        }));
    });
    describe('Authentication and authorization', () => {
        it('should require authentication', () => __awaiter(void 0, void 0, void 0, function* () {
            auth_1.authMiddleware.mockImplementationOnce((req, res) => {
                res.status(401).json({ error: 'Unauthorized' });
            });
            const response = yield (0, supertest_1.default)(app).get('/api/dashboard');
            expect(response.status).toBe(401);
            expect(response.body).toEqual({ error: 'Unauthorized' });
        }));
        it('should not require admin permissions', () => __awaiter(void 0, void 0, void 0, function* () {
            // Regular user should be able to access dashboard
            const regularUser = Object.assign(Object.assign({}, test_data_1.testUser), { roles: ['user'] });
            auth_1.authMiddleware.mockImplementation((req, res, next) => {
                req.user = Object.assign(Object.assign({}, regularUser), { organization: test_data_1.testOrganization });
                next();
            });
            prisma_1.prisma.chatLog.count.mockResolvedValue(100);
            prisma_1.prisma.user.count.mockResolvedValue(10);
            prisma_1.prisma.chatLog.findMany.mockResolvedValue([]);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/dashboard')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(regularUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
        }));
        it('should apply metrics middleware', () => __awaiter(void 0, void 0, void 0, function* () {
            const metricsMiddlewareSpy = jest.fn((req, res, next) => next());
            metrics_1.metricsMiddleware.mockImplementation(metricsMiddlewareSpy);
            prisma_1.prisma.chatLog.count.mockResolvedValue(100);
            prisma_1.prisma.user.count.mockResolvedValue(10);
            prisma_1.prisma.chatLog.findMany.mockResolvedValue([]);
            yield (0, supertest_1.default)(app)
                .get('/api/dashboard')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(metricsMiddlewareSpy).toHaveBeenCalled();
        }));
        it('should apply middleware in correct order', () => __awaiter(void 0, void 0, void 0, function* () {
            const middlewareOrder = [];
            auth_1.authMiddleware.mockImplementation((req, res, next) => {
                middlewareOrder.push('auth');
                req.user = Object.assign(Object.assign({}, test_data_1.testUser), { organization: test_data_1.testOrganization });
                next();
            });
            metrics_1.metricsMiddleware.mockImplementation((req, res, next) => {
                middlewareOrder.push('metrics');
                next();
            });
            prisma_1.prisma.chatLog.count.mockResolvedValue(100);
            prisma_1.prisma.user.count.mockResolvedValue(10);
            prisma_1.prisma.chatLog.findMany.mockResolvedValue([]);
            yield (0, supertest_1.default)(app)
                .get('/api/dashboard')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(middlewareOrder).toEqual(['auth', 'metrics']);
        }));
        it('should not proceed if auth middleware fails', () => __awaiter(void 0, void 0, void 0, function* () {
            auth_1.authMiddleware.mockImplementationOnce((req, res) => {
                res.status(401).json({ error: 'Token expired' });
            });
            const metricsMiddlewareSpy = jest.fn();
            metrics_1.metricsMiddleware.mockImplementation(metricsMiddlewareSpy);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/dashboard')
                .set('Authorization', `Bearer invalid-token`);
            expect(response.status).toBe(401);
            expect(metricsMiddlewareSpy).not.toHaveBeenCalled();
            expect(prisma_1.prisma.chatLog.count).not.toHaveBeenCalled();
        }));
    });
    describe('Performance considerations', () => {
        it('should handle concurrent requests efficiently', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.chatLog.count.mockResolvedValue(100);
            prisma_1.prisma.user.count.mockResolvedValue(10);
            prisma_1.prisma.chatLog.findMany.mockResolvedValue([]);
            const requests = Array.from({ length: 10 }, () => (0, supertest_1.default)(app)
                .get('/api/dashboard')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`));
            const responses = yield Promise.all(requests);
            responses.forEach((response) => {
                expect(response.status).toBe(200);
                expect(response.body.totalChats).toBe(100);
            });
            expect(prisma_1.prisma.chatLog.count).toHaveBeenCalledTimes(10);
        }));
        it('should not fetch unnecessary data for performance', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.chatLog.count.mockResolvedValue(100);
            prisma_1.prisma.user.count.mockResolvedValue(10);
            prisma_1.prisma.chatLog.findMany.mockResolvedValue([]);
            yield (0, supertest_1.default)(app)
                .get('/api/dashboard')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            // Verify that only createdAt is selected from recent chats
            expect(prisma_1.prisma.chatLog.findMany).toHaveBeenCalledWith({
                where: expect.any(Object),
                select: { createdAt: true },
            });
            // Verify that we don't fetch full chat log data
            const callArgs = prisma_1.prisma.chatLog.findMany.mock.calls[0][0];
            expect(callArgs.select).not.toHaveProperty('question');
            expect(callArgs.select).not.toHaveProperty('answer');
            expect(callArgs.select).not.toHaveProperty('user');
        }));
        it('should handle timeout scenarios gracefully', () => __awaiter(void 0, void 0, void 0, function* () {
            // Mock a very slow database response
            prisma_1.prisma.chatLog.count.mockImplementation(() => new Promise(() => { }) // Never resolves
            );
            const response = yield (0, supertest_1.default)(app)
                .get('/api/dashboard')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`)
                .timeout(1000);
            // The request should timeout, which supertest handles appropriately
            // In a real scenario, you might want to implement request timeouts in the route handler
        }));
    });
    describe('Data accuracy and consistency', () => {
        it('should use consistent 24-hour time window across queries', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.chatLog.count.mockResolvedValue(100);
            prisma_1.prisma.user.count.mockResolvedValue(10);
            prisma_1.prisma.chatLog.findMany.mockResolvedValue([]);
            yield (0, supertest_1.default)(app)
                .get('/api/dashboard')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            // Both user.count and chatLog.findMany should use the same time threshold
            const userCountCall = prisma_1.prisma.user.count.mock.calls[0][0];
            const chatLogFindCall = prisma_1.prisma.chatLog.findMany.mock
                .calls[0][0];
            const userDate = userCountCall.where.chatLogs.some.createdAt.gte;
            const chatDate = chatLogFindCall.where.createdAt.gte;
            // Dates should be very close (within 1 second due to execution time)
            const timeDiff = Math.abs(userDate.getTime() - chatDate.getTime());
            expect(timeDiff).toBeLessThan(1000);
        }));
        it('should handle edge case of exactly 24 hours ago', () => __awaiter(void 0, void 0, void 0, function* () {
            const exactlyTwentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
            prisma_1.prisma.chatLog.count.mockResolvedValue(100);
            prisma_1.prisma.user.count.mockResolvedValue(10);
            prisma_1.prisma.chatLog.findMany.mockResolvedValue([
                { createdAt: exactlyTwentyFourHoursAgo },
            ]);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/dashboard')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body.totalChats).toBe(100);
        }));
        it('should maintain data consistency across parallel queries', () => __awaiter(void 0, void 0, void 0, function* () {
            let callCount = 0;
            const mockData = [150, 25, []]; // totalChats, activeUsers, recentChats
            prisma_1.prisma.chatLog.count.mockImplementation(() => {
                return Promise.resolve(mockData[0]);
            });
            prisma_1.prisma.user.count.mockImplementation(() => {
                return Promise.resolve(mockData[1]);
            });
            prisma_1.prisma.chatLog.findMany.mockImplementation(() => {
                return Promise.resolve(mockData[2]);
            });
            const response = yield (0, supertest_1.default)(app)
                .get('/api/dashboard')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body.totalChats).toBe(150);
            expect(response.body.activeUsers).toBe(25);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,