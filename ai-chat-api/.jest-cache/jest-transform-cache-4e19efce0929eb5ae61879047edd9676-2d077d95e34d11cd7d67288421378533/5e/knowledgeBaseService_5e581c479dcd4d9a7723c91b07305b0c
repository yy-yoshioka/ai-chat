283a5bdc75433034bddf0215425665d4
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.searchKnowledgeBase = exports.processKnowledgeBaseFile = void 0;
const client_s3_1 = require("@aws-sdk/client-s3");
const js_client_rest_1 = require("@qdrant/js-client-rest");
const openai_1 = require("openai");
const pdf_1 = require("@langchain/community/document_loaders/fs/pdf");
const text_splitter_1 = require("langchain/text_splitter");
const prisma_1 = require("../lib/prisma");
const logger_1 = require("../lib/logger");
const s3Client = new client_s3_1.S3Client({
    endpoint: process.env.S3_ENDPOINT,
    credentials: {
        accessKeyId: process.env.S3_ACCESS_KEY,
        secretAccessKey: process.env.S3_SECRET_KEY,
    },
    forcePathStyle: true,
});
const qdrantClient = new js_client_rest_1.QdrantClient({
    url: process.env.QDRANT_URL,
    apiKey: process.env.QDRANT_API_KEY,
});
const openai = new openai_1.OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
});
function processKnowledgeBaseFile(knowledgeBaseId, s3Key, mimeType) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            // ステータス更新
            yield prisma_1.prisma.knowledgeBase.update({
                where: { id: knowledgeBaseId },
                data: { status: 'processing' },
            });
            // S3からファイル取得
            const s3Response = yield s3Client.send(new client_s3_1.GetObjectCommand({
                Bucket: process.env.S3_BUCKET,
                Key: s3Key,
            }));
            const fileBuffer = yield streamToBuffer(s3Response.Body);
            // ドキュメント読み込みとチャンク分割
            let documents;
            if (mimeType === 'application/pdf') {
                const loader = new pdf_1.PDFLoader(new Blob([fileBuffer]));
                documents = yield loader.load();
            }
            else {
                // テキストファイルの処理
                const text = fileBuffer.toString('utf-8');
                documents = [{ pageContent: text, metadata: {} }];
            }
            // テキスト分割
            const splitter = new text_splitter_1.RecursiveCharacterTextSplitter({
                chunkSize: 1000,
                chunkOverlap: 200,
            });
            const chunks = yield splitter.splitDocuments(documents);
            // 各チャンクをベクトル化
            const vectors = [];
            const collectionName = `org_${knowledgeBaseId.substring(0, 8)}`;
            // コレクション作成（存在しない場合）
            try {
                yield qdrantClient.createCollection(collectionName, {
                    vectors: {
                        size: 1536, // OpenAI embedding dimension
                        distance: 'Cosine',
                    },
                });
            }
            catch (error) {
                // コレクションが既に存在する場合は無視
            }
            for (let i = 0; i < chunks.length; i++) {
                const chunk = chunks[i];
                // OpenAI Embeddings
                const embedding = yield openai.embeddings.create({
                    model: 'text-embedding-ada-002',
                    input: chunk.pageContent,
                });
                const vector = embedding.data[0].embedding;
                // Qdrantに保存
                yield qdrantClient.upsert(collectionName, {
                    wait: true,
                    points: [
                        {
                            id: `${knowledgeBaseId}_${i}`,
                            vector: vector,
                            payload: {
                                knowledgeBaseId,
                                chunkIndex: i,
                                content: chunk.pageContent,
                                metadata: chunk.metadata,
                            },
                        },
                    ],
                });
                vectors.push(`${knowledgeBaseId}_${i}`);
            }
            // DB更新
            yield prisma_1.prisma.knowledgeBase.update({
                where: { id: knowledgeBaseId },
                data: {
                    status: 'completed',
                    chunks: chunks.length,
                    vectors: vectors,
                    processedAt: new Date(),
                },
            });
            logger_1.logger.info('Knowledge base processing completed', {
                knowledgeBaseId,
                chunks: chunks.length,
            });
        }
        catch (error) {
            yield prisma_1.prisma.knowledgeBase.update({
                where: { id: knowledgeBaseId },
                data: {
                    status: 'failed',
                    error: error instanceof Error ? error.message : 'Unknown error',
                },
            });
            throw error;
        }
    });
}
exports.processKnowledgeBaseFile = processKnowledgeBaseFile;
function searchKnowledgeBase(widgetId, query, limit = 5) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            // クエリをベクトル化
            const embedding = yield openai.embeddings.create({
                model: 'text-embedding-ada-002',
                input: query,
            });
            const queryVector = embedding.data[0].embedding;
            // 関連するKnowledge Baseを取得
            const knowledgeBases = yield prisma_1.prisma.knowledgeBase.findMany({
                where: {
                    widgetId,
                    status: 'completed',
                },
            });
            if (knowledgeBases.length === 0) {
                return [];
            }
            const collectionName = `org_${knowledgeBases[0].id.substring(0, 8)}`;
            // ベクトル検索
            const searchResult = yield qdrantClient.search(collectionName, {
                vector: queryVector,
                limit: limit,
                with_payload: true,
            });
            const results = searchResult.map((result) => {
                var _a, _b;
                return ({
                    score: result.score,
                    content: ((_a = result.payload) === null || _a === void 0 ? void 0 : _a.content) || '',
                    metadata: (_b = result.payload) === null || _b === void 0 ? void 0 : _b.metadata,
                });
            });
            return results;
        }
        catch (error) {
            logger_1.logger.error('Knowledge base search failed', { error, widgetId, query });
            return [];
        }
    });
}
exports.searchKnowledgeBase = searchKnowledgeBase;
// Helper function
function streamToBuffer(stream) {
    var _a, stream_1, stream_1_1;
    var _b, e_1, _c, _d;
    return __awaiter(this, void 0, void 0, function* () {
        const chunks = [];
        try {
            for (_a = true, stream_1 = __asyncValues(stream); stream_1_1 = yield stream_1.next(), _b = stream_1_1.done, !_b; _a = true) {
                _d = stream_1_1.value;
                _a = false;
                const chunk = _d;
                chunks.push(Buffer.from(chunk));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_a && !_b && (_c = stream_1.return)) yield _c.call(stream_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return Buffer.concat(chunks);
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,