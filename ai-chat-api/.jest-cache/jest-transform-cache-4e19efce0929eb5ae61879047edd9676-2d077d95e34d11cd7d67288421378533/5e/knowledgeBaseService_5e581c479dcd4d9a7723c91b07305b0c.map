{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/services/knowledgeBaseService.ts","mappings":"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","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/services/knowledgeBaseService.ts"],"sourcesContent":["import { S3Client, GetObjectCommand } from '@aws-sdk/client-s3';\nimport { QdrantClient } from '@qdrant/js-client-rest';\nimport { OpenAI } from 'openai';\nimport { PDFLoader } from '@langchain/community/document_loaders/fs/pdf';\nimport { RecursiveCharacterTextSplitter } from 'langchain/text_splitter';\nimport { prisma } from '../lib/prisma';\nimport { logger } from '../lib/logger';\n\nconst s3Client = new S3Client({\n  endpoint: process.env.S3_ENDPOINT,\n  credentials: {\n    accessKeyId: process.env.S3_ACCESS_KEY!,\n    secretAccessKey: process.env.S3_SECRET_KEY!,\n  },\n  forcePathStyle: true,\n});\n\nconst qdrantClient = new QdrantClient({\n  url: process.env.QDRANT_URL,\n  apiKey: process.env.QDRANT_API_KEY,\n});\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\nexport async function processKnowledgeBaseFile(\n  knowledgeBaseId: string,\n  s3Key: string,\n  mimeType: string\n) {\n  try {\n    // ステータス更新\n    await prisma.knowledgeBase.update({\n      where: { id: knowledgeBaseId },\n      data: { status: 'processing' },\n    });\n\n    // S3からファイル取得\n    const s3Response = await s3Client.send(\n      new GetObjectCommand({\n        Bucket: process.env.S3_BUCKET!,\n        Key: s3Key,\n      })\n    );\n\n    const fileBuffer = await streamToBuffer(\n      s3Response.Body as NodeJS.ReadableStream\n    );\n\n    // ドキュメント読み込みとチャンク分割\n    let documents;\n    if (mimeType === 'application/pdf') {\n      const loader = new PDFLoader(new Blob([fileBuffer]));\n      documents = await loader.load();\n    } else {\n      // テキストファイルの処理\n      const text = fileBuffer.toString('utf-8');\n      documents = [{ pageContent: text, metadata: {} }];\n    }\n\n    // テキスト分割\n    const splitter = new RecursiveCharacterTextSplitter({\n      chunkSize: 1000,\n      chunkOverlap: 200,\n    });\n\n    const chunks = await splitter.splitDocuments(documents);\n\n    // 各チャンクをベクトル化\n    const vectors = [];\n    const collectionName = `org_${knowledgeBaseId.substring(0, 8)}`;\n\n    // コレクション作成（存在しない場合）\n    try {\n      await qdrantClient.createCollection(collectionName, {\n        vectors: {\n          size: 1536, // OpenAI embedding dimension\n          distance: 'Cosine',\n        },\n      });\n    } catch (error) {\n      // コレクションが既に存在する場合は無視\n    }\n\n    for (let i = 0; i < chunks.length; i++) {\n      const chunk = chunks[i];\n\n      // OpenAI Embeddings\n      const embedding = await openai.embeddings.create({\n        model: 'text-embedding-ada-002',\n        input: chunk.pageContent,\n      });\n\n      const vector = embedding.data[0].embedding;\n\n      // Qdrantに保存\n      await qdrantClient.upsert(collectionName, {\n        wait: true,\n        points: [\n          {\n            id: `${knowledgeBaseId}_${i}`,\n            vector: vector,\n            payload: {\n              knowledgeBaseId,\n              chunkIndex: i,\n              content: chunk.pageContent,\n              metadata: chunk.metadata,\n            },\n          },\n        ],\n      });\n\n      vectors.push(`${knowledgeBaseId}_${i}`);\n    }\n\n    // DB更新\n    await prisma.knowledgeBase.update({\n      where: { id: knowledgeBaseId },\n      data: {\n        status: 'completed',\n        chunks: chunks.length,\n        vectors: vectors,\n        processedAt: new Date(),\n      },\n    });\n\n    logger.info('Knowledge base processing completed', {\n      knowledgeBaseId,\n      chunks: chunks.length,\n    });\n  } catch (error) {\n    await prisma.knowledgeBase.update({\n      where: { id: knowledgeBaseId },\n      data: {\n        status: 'failed',\n        error: error instanceof Error ? error.message : 'Unknown error',\n      },\n    });\n    throw error;\n  }\n}\n\nexport async function searchKnowledgeBase(\n  widgetId: string,\n  query: string,\n  limit: number = 5\n) {\n  try {\n    // クエリをベクトル化\n    const embedding = await openai.embeddings.create({\n      model: 'text-embedding-ada-002',\n      input: query,\n    });\n\n    const queryVector = embedding.data[0].embedding;\n\n    // 関連するKnowledge Baseを取得\n    const knowledgeBases = await prisma.knowledgeBase.findMany({\n      where: {\n        widgetId,\n        status: 'completed',\n      },\n    });\n\n    if (knowledgeBases.length === 0) {\n      return [];\n    }\n\n    const collectionName = `org_${knowledgeBases[0].id.substring(0, 8)}`;\n\n    // ベクトル検索\n    const searchResult = await qdrantClient.search(collectionName, {\n      vector: queryVector,\n      limit: limit,\n      with_payload: true,\n    });\n\n    const results = searchResult.map((result) => ({\n      score: result.score,\n      content: (result.payload?.content as string) || '',\n      metadata: result.payload?.metadata,\n    }));\n\n    return results;\n  } catch (error) {\n    logger.error('Knowledge base search failed', { error, widgetId, query });\n    return [];\n  }\n}\n\n// Helper function\nasync function streamToBuffer(stream: NodeJS.ReadableStream): Promise<Buffer> {\n  const chunks: Buffer[] = [];\n  for await (const chunk of stream) {\n    chunks.push(Buffer.from(chunk));\n  }\n  return Buffer.concat(chunks);\n}\n"],"version":3}