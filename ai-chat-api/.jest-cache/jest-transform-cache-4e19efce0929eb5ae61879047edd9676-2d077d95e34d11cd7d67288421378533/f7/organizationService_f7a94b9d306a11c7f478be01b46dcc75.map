{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/services/organizationService.ts","mappings":"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","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/services/organizationService.ts"],"sourcesContent":["import { prisma } from '../lib/prisma';\n\nexport const getUserOrganizations = async (userId: string) => {\n  return prisma.organization.findMany({\n    where: {\n      users: {\n        some: {\n          id: userId,\n        },\n      },\n    },\n    include: {\n      _count: {\n        select: {\n          users: true,\n          companies: {\n            where: {\n              widgets: {\n                some: {},\n              },\n            },\n          },\n        },\n      },\n      companies: {\n        include: {\n          _count: {\n            select: {\n              widgets: true,\n            },\n          },\n        },\n      },\n    },\n    orderBy: { createdAt: 'desc' },\n  });\n};\n\nexport const getOrganizationById = async (id: string, userId: string) => {\n  const organization = await prisma.organization.findFirst({\n    where: {\n      id,\n      users: {\n        some: {\n          id: userId,\n        },\n      },\n    },\n    include: {\n      users: {\n        select: {\n          id: true,\n          email: true,\n          name: true,\n          roles: true,\n        },\n      },\n      companies: {\n        include: {\n          widgets: {\n            select: {\n              id: true,\n              name: true,\n              isActive: true,\n              createdAt: true,\n            },\n          },\n          _count: {\n            select: {\n              widgets: true,\n              users: true,\n            },\n          },\n        },\n      },\n      _count: {\n        select: {\n          users: true,\n        },\n      },\n    },\n  });\n\n  if (!organization) {\n    throw new Error('Organization not found or access denied');\n  }\n\n  return organization;\n};\n\nexport const updateOrganization = async (\n  id: string,\n  userId: string,\n  data: {\n    name?: string;\n    settings?: Record<string, unknown>;\n  }\n) => {\n  // Check if user has permission to update\n  const organization = await prisma.organization.findFirst({\n    where: {\n      id,\n      users: {\n        some: {\n          id: userId,\n          roles: {\n            hasSome: ['owner', 'org_admin'],\n          },\n        },\n      },\n    },\n  });\n\n  if (!organization) {\n    throw new Error('Organization not found or insufficient permissions');\n  }\n\n  return prisma.organization.update({\n    where: { id },\n    data: {\n      name: data.name,\n      settings: data.settings as any,\n      updatedAt: new Date(),\n    },\n  });\n};\n\nexport const getOrganizationStats = async (organizationId: string) => {\n  const [userCount, widgetCount, activeWidgetCount, totalChats, monthlyChats] =\n    await Promise.all([\n      prisma.user.count({\n        where: { organizationId },\n      }),\n      prisma.widget.count({\n        where: {\n          company: {\n            organizationId,\n          },\n        },\n      }),\n      prisma.widget.count({\n        where: {\n          company: {\n            organizationId,\n          },\n          isActive: true,\n        },\n      }),\n      prisma.chatLog.count({\n        where: {\n          widget: {\n            company: {\n              organizationId,\n            },\n          },\n        },\n      }),\n      prisma.chatLog.count({\n        where: {\n          widget: {\n            company: {\n              organizationId,\n            },\n          },\n          createdAt: {\n            gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // Last 30 days\n          },\n        },\n      }),\n    ]);\n\n  return {\n    userCount,\n    widgetCount,\n    activeWidgetCount,\n    totalChats,\n    monthlyChats,\n  };\n};\n"],"version":3}