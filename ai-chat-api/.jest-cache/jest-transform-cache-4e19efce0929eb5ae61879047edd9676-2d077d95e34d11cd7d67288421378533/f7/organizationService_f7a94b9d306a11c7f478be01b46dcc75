f290e5b4ca3020272c1f917264567f64
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOrganizationStats = exports.updateOrganization = exports.getOrganizationById = exports.getUserOrganizations = void 0;
const prisma_1 = require("../lib/prisma");
const getUserOrganizations = (userId) => __awaiter(void 0, void 0, void 0, function* () {
    return prisma_1.prisma.organization.findMany({
        where: {
            users: {
                some: {
                    id: userId,
                },
            },
        },
        include: {
            _count: {
                select: {
                    users: true,
                    companies: {
                        where: {
                            widgets: {
                                some: {},
                            },
                        },
                    },
                },
            },
            companies: {
                include: {
                    _count: {
                        select: {
                            widgets: true,
                        },
                    },
                },
            },
        },
        orderBy: { createdAt: 'desc' },
    });
});
exports.getUserOrganizations = getUserOrganizations;
const getOrganizationById = (id, userId) => __awaiter(void 0, void 0, void 0, function* () {
    const organization = yield prisma_1.prisma.organization.findFirst({
        where: {
            id,
            users: {
                some: {
                    id: userId,
                },
            },
        },
        include: {
            users: {
                select: {
                    id: true,
                    email: true,
                    name: true,
                    roles: true,
                },
            },
            companies: {
                include: {
                    widgets: {
                        select: {
                            id: true,
                            name: true,
                            isActive: true,
                            createdAt: true,
                        },
                    },
                    _count: {
                        select: {
                            widgets: true,
                            users: true,
                        },
                    },
                },
            },
            _count: {
                select: {
                    users: true,
                },
            },
        },
    });
    if (!organization) {
        throw new Error('Organization not found or access denied');
    }
    return organization;
});
exports.getOrganizationById = getOrganizationById;
const updateOrganization = (id, userId, data) => __awaiter(void 0, void 0, void 0, function* () {
    // Check if user has permission to update
    const organization = yield prisma_1.prisma.organization.findFirst({
        where: {
            id,
            users: {
                some: {
                    id: userId,
                    roles: {
                        hasSome: ['owner', 'org_admin'],
                    },
                },
            },
        },
    });
    if (!organization) {
        throw new Error('Organization not found or insufficient permissions');
    }
    return prisma_1.prisma.organization.update({
        where: { id },
        data: {
            name: data.name,
            settings: data.settings,
            updatedAt: new Date(),
        },
    });
});
exports.updateOrganization = updateOrganization;
const getOrganizationStats = (organizationId) => __awaiter(void 0, void 0, void 0, function* () {
    const [userCount, widgetCount, activeWidgetCount, totalChats, monthlyChats] = yield Promise.all([
        prisma_1.prisma.user.count({
            where: { organizationId },
        }),
        prisma_1.prisma.widget.count({
            where: {
                company: {
                    organizationId,
                },
            },
        }),
        prisma_1.prisma.widget.count({
            where: {
                company: {
                    organizationId,
                },
                isActive: true,
            },
        }),
        prisma_1.prisma.chatLog.count({
            where: {
                widget: {
                    company: {
                        organizationId,
                    },
                },
            },
        }),
        prisma_1.prisma.chatLog.count({
            where: {
                widget: {
                    company: {
                        organizationId,
                    },
                },
                createdAt: {
                    gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // Last 30 days
                },
            },
        }),
    ]);
    return {
        userCount,
        widgetCount,
        activeWidgetCount,
        totalChats,
        monthlyChats,
    };
});
exports.getOrganizationStats = getOrganizationStats;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,