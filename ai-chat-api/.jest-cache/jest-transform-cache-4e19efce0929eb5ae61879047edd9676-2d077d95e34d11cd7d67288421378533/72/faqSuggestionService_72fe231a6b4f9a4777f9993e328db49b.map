{"version":3,"names":["cov_kv02mlw3h","actualCoverage","openai_1","s","__importDefault","require","client_1","embeddingWorker_1","prisma","PrismaClient","openai","default","apiKey","process","env","OPENAI_API_KEY","generateFAQFromMessage","message","organizationName","relatedContext","f","systemPrompt","b","response","chat","completions","create","model","messages","role","content","temperature","max_tokens","_b","_a","choices","Error","parsed","JSON","parse","question","answer","confidence","Math","min","max","parseError","error","console","clusterSimilarMessages","clusters","used","Set","has","id","cluster","add","otherMessage","similarity","calculateSimpleSimilarity","push","str1","str2","words1","toLowerCase","split","words2","intersection","filter","word","includes","union","length","calculatePriority","count","recency","score","generateFAQSuggestions","organizationId","limit","log","organization","findUnique","where","unansweredMessages","unansweredMessage","findMany","isProcessed","gte","orderBy","lastAskedAt","take","suggestions","slice","representative","reduce","prev","current","totalCount","sum","msg","avgConfidence","latestDate","latest","Date","relatedMessages","map","join","name","now","getTime","priority","originalMessage","suggestedQuestion","suggestedAnswer","toISOString","Promise","resolve","setTimeout","sort","a","priorityOrder","high","medium","low","exports","approveFAQSuggestion","suggestionId","overrides","findFirst","generated","faq","fAQ","data","weight","isActive","timesUsed","update","queueFAQEmbedding","similarMessages","contains","mode","updateMany","in","rejectFAQSuggestion","reason","runWeeklyFAQSuggestionBatch","organizations","select","org","getFAQSuggestionStats","totalUnanswered","processed","highPriority","all","processingRate"],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/services/faqSuggestionService.ts"],"sourcesContent":["import OpenAI from 'openai';\nimport { PrismaClient } from '@prisma/client';\nimport { queueFAQEmbedding } from './embeddingWorker';\n\nconst prisma = new PrismaClient();\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\n// FAQ提案の型定義\nexport interface FAQSuggestion {\n  id: string;\n  originalMessage: string;\n  suggestedQuestion: string;\n  suggestedAnswer: string;\n  confidence: number;\n  count: number;\n  lastAskedAt: string;\n  priority: 'high' | 'medium' | 'low';\n}\n\n// 未回答メッセージの型定義\ninterface UnansweredMessage {\n  id: string;\n  message: string;\n  count: number;\n  lastAskedAt: Date;\n  confidence: number | null;\n}\n\n// 未回答メッセージからFAQを生成\nasync function generateFAQFromMessage(\n  message: string,\n  organizationName: string,\n  relatedContext?: string\n): Promise<{ question: string; answer: string; confidence: number }> {\n  try {\n    const systemPrompt = `あなたは${organizationName}のカスタマーサポート専門家です。\n\n以下のガイドラインに従って、ユーザーからの質問を適切なFAQに変換してください：\n\n1. ユーザーの意図を明確に理解し、一般的な質問として再構成する\n2. 回答は具体的で実用的な内容にする\n3. 日本語で自然な表現を使用する\n4. 情報が不足している場合は一般的な回答パターンを提供する\n5. 質問は他のユーザーにも役立つように汎用化する\n\n${relatedContext ? `関連情報:\\n${relatedContext}\\n` : ''}\n\nユーザーからの質問: \"${message}\"\n\n以下のJSONフォーマットで応答してください：\n{\n  \"question\": \"整理された質問\",\n  \"answer\": \"詳細な回答\",\n  \"confidence\": 0.0-1.0の信頼度スコア\n}`;\n\n    const response = await openai.chat.completions.create({\n      model: 'gpt-4o',\n      messages: [{ role: 'system', content: systemPrompt }],\n      temperature: 0.3,\n      max_tokens: 800,\n    });\n\n    const content = response.choices[0]?.message?.content;\n    if (!content) {\n      throw new Error('No response from OpenAI');\n    }\n\n    try {\n      const parsed = JSON.parse(content);\n      return {\n        question: parsed.question || message,\n        answer:\n          parsed.answer ||\n          '詳細については、サポートチームまでお問い合わせください。',\n        confidence: Math.min(Math.max(parsed.confidence || 0.5, 0), 1),\n      };\n    } catch (parseError) {\n      // JSON解析に失敗した場合のフォールバック\n      return {\n        question: message,\n        answer: '詳細については、サポートチームまでお問い合わせください。',\n        confidence: 0.3,\n      };\n    }\n  } catch (error) {\n    console.error('Failed to generate FAQ from message:', error);\n    throw error;\n  }\n}\n\n// 類似の質問をクラスタリング\nfunction clusterSimilarMessages(\n  messages: UnansweredMessage[]\n): UnansweredMessage[][] {\n  const clusters: UnansweredMessage[][] = [];\n  const used = new Set<string>();\n\n  for (const message of messages) {\n    if (used.has(message.id)) continue;\n\n    const cluster = [message];\n    used.add(message.id);\n\n    // 簡単な類似度判定（実際にはより高度なアルゴリズムを使用）\n    for (const otherMessage of messages) {\n      if (used.has(otherMessage.id)) continue;\n\n      const similarity = calculateSimpleSimilarity(\n        message.message,\n        otherMessage.message\n      );\n      if (similarity > 0.7) {\n        cluster.push(otherMessage);\n        used.add(otherMessage.id);\n      }\n    }\n\n    clusters.push(cluster);\n  }\n\n  return clusters;\n}\n\n// 簡単な文字列類似度計算\nfunction calculateSimpleSimilarity(str1: string, str2: string): number {\n  const words1 = str1.toLowerCase().split(/\\s+/);\n  const words2 = str2.toLowerCase().split(/\\s+/);\n\n  const intersection = words1.filter((word) => words2.includes(word));\n  const union = [...new Set([...words1, ...words2])];\n\n  return intersection.length / union.length;\n}\n\n// 優先度を計算\nfunction calculatePriority(\n  count: number,\n  confidence: number,\n  recency: number\n): 'high' | 'medium' | 'low' {\n  const score = count * 0.4 + confidence * 0.3 + recency * 0.3;\n\n  if (score > 0.7) return 'high';\n  if (score > 0.4) return 'medium';\n  return 'low';\n}\n\n// FAQ提案を生成\nexport async function generateFAQSuggestions(\n  organizationId: string,\n  limit: number = 50\n): Promise<FAQSuggestion[]> {\n  try {\n    console.log(\n      `Generating FAQ suggestions for organization: ${organizationId}`\n    );\n\n    // 組織情報を取得\n    const organization = await prisma.organization.findUnique({\n      where: { id: organizationId },\n    });\n\n    if (!organization) {\n      throw new Error(`Organization not found: ${organizationId}`);\n    }\n\n    // 未処理の未回答メッセージを取得\n    const unansweredMessages = await prisma.unansweredMessage.findMany({\n      where: {\n        organizationId,\n        isProcessed: false,\n        count: { gte: 2 }, // 2回以上質問されたものを対象\n      },\n      orderBy: [{ count: 'desc' }, { lastAskedAt: 'desc' }],\n      take: limit * 2, // 多めに取得してクラスタリング後に絞り込み\n    });\n\n    console.log(`Found ${unansweredMessages.length} unanswered messages`);\n\n    if (unansweredMessages.length === 0) {\n      return [];\n    }\n\n    // 類似質問をクラスタリング\n    const clusters = clusterSimilarMessages(unansweredMessages);\n\n    // 各クラスターから代表的な質問を選択\n    const suggestions: FAQSuggestion[] = [];\n\n    for (const cluster of clusters.slice(0, limit)) {\n      try {\n        // クラスターの中で最も頻度が高いメッセージを代表として選択\n        const representative = cluster.reduce((prev, current) =>\n          current.count > prev.count ? current : prev\n        );\n\n        // クラスター全体の統計\n        const totalCount = cluster.reduce((sum, msg) => sum + msg.count, 0);\n        const avgConfidence =\n          cluster.reduce((sum, msg) => sum + (msg.confidence || 0), 0) /\n          cluster.length;\n\n        // 最新の日付\n        const latestDate = cluster.reduce((latest, msg) =>\n          new Date(msg.lastAskedAt) > new Date(latest.lastAskedAt)\n            ? msg\n            : latest\n        ).lastAskedAt;\n\n        // 関連コンテキストを構築（クラスター内の他のメッセージ）\n        const relatedMessages = cluster\n          .filter((msg) => msg.id !== representative.id)\n          .map((msg) => msg.message)\n          .slice(0, 3)\n          .join(', ');\n\n        // AIを使ってFAQを生成\n        const { question, answer, confidence } = await generateFAQFromMessage(\n          representative.message,\n          organization.name,\n          relatedMessages\n        );\n\n        // 優先度を計算（頻度、信頼度、最新性を考慮）\n        const recency = Math.max(\n          0,\n          1 -\n            (Date.now() - new Date(latestDate).getTime()) /\n              (30 * 24 * 60 * 60 * 1000)\n        );\n        const priority = calculatePriority(\n          Math.min(totalCount / 10, 1),\n          avgConfidence,\n          recency\n        );\n\n        suggestions.push({\n          id: representative.id,\n          originalMessage: representative.message,\n          suggestedQuestion: question,\n          suggestedAnswer: answer,\n          confidence,\n          count: totalCount,\n          lastAskedAt: latestDate.toISOString(),\n          priority,\n        });\n\n        // API制限を考慮して少し待機\n        await new Promise((resolve) => setTimeout(resolve, 100));\n      } catch (error) {\n        console.error(`Failed to generate suggestion for cluster:`, error);\n        continue;\n      }\n    }\n\n    // 優先度でソート\n    suggestions.sort((a, b) => {\n      const priorityOrder = { high: 3, medium: 2, low: 1 };\n      return (\n        priorityOrder[b.priority] - priorityOrder[a.priority] ||\n        b.count - a.count\n      );\n    });\n\n    console.log(`Generated ${suggestions.length} FAQ suggestions`);\n    return suggestions.slice(0, limit);\n  } catch (error) {\n    console.error('Failed to generate FAQ suggestions:', error);\n    throw error;\n  }\n}\n\n// FAQ提案を承認してFAQに変換\nexport async function approveFAQSuggestion(\n  suggestionId: string,\n  organizationId: string,\n  overrides?: { question?: string; answer?: string; weight?: number }\n): Promise<string> {\n  try {\n    // 未回答メッセージを取得\n    const unansweredMessage = await prisma.unansweredMessage.findFirst({\n      where: {\n        id: suggestionId,\n        organizationId,\n      },\n    });\n\n    if (!unansweredMessage) {\n      throw new Error(`Unanswered message not found: ${suggestionId}`);\n    }\n\n    // FAQを生成（オーバーライドがあれば適用）\n    let question = overrides?.question;\n    let answer = overrides?.answer;\n\n    if (!question || !answer) {\n      const organization = await prisma.organization.findUnique({\n        where: { id: organizationId },\n      });\n\n      const generated = await generateFAQFromMessage(\n        unansweredMessage.message,\n        organization?.name || 'AI Chat'\n      );\n\n      question = question || generated.question;\n      answer = answer || generated.answer;\n    }\n\n    // FAQを作成\n    const faq = await prisma.fAQ.create({\n      data: {\n        organizationId,\n        question,\n        answer,\n        weight:\n          overrides?.weight || Math.max(100 - unansweredMessage.count, 10),\n        isActive: true,\n        timesUsed: 0,\n      },\n    });\n\n    // 未回答メッセージを処理済みにマーク\n    await prisma.unansweredMessage.update({\n      where: { id: suggestionId },\n      data: {\n        isProcessed: true,\n        suggestedQuestion: question,\n        suggestedAnswer: answer,\n      },\n    });\n\n    // エンベディング生成をキューに追加\n    await queueFAQEmbedding(faq.id, organizationId);\n\n    // 類似の未回答メッセージも処理済みにマーク\n    const similarMessages = await prisma.unansweredMessage.findMany({\n      where: {\n        organizationId,\n        isProcessed: false,\n        message: {\n          contains: unansweredMessage.message.split(' ')[0], // 最初の単語で簡単な類似判定\n          mode: 'insensitive',\n        },\n      },\n      take: 5,\n    });\n\n    if (similarMessages.length > 0) {\n      await prisma.unansweredMessage.updateMany({\n        where: {\n          id: { in: similarMessages.map((msg) => msg.id) },\n        },\n        data: {\n          isProcessed: true,\n        },\n      });\n    }\n\n    console.log(`Approved FAQ suggestion: ${question}`);\n    return faq.id;\n  } catch (error) {\n    console.error('Failed to approve FAQ suggestion:', error);\n    throw error;\n  }\n}\n\n// FAQ提案を却下\nexport async function rejectFAQSuggestion(\n  suggestionId: string,\n  organizationId: string,\n  reason?: string\n): Promise<void> {\n  try {\n    await prisma.unansweredMessage.update({\n      where: { id: suggestionId },\n      data: {\n        isProcessed: true,\n        // 却下理由をメモとして保存（必要に応じてスキーマ拡張）\n      },\n    });\n\n    console.log(`Rejected FAQ suggestion: ${suggestionId}, reason: ${reason}`);\n  } catch (error) {\n    console.error('Failed to reject FAQ suggestion:', error);\n    throw error;\n  }\n}\n\n// 週次バッチでFAQ提案を生成\nexport async function runWeeklyFAQSuggestionBatch(): Promise<void> {\n  try {\n    console.log('🔄 Running weekly FAQ suggestion batch...');\n\n    // 全組織を取得\n    const organizations = await prisma.organization.findMany({\n      select: { id: true, name: true },\n    });\n\n    for (const org of organizations) {\n      try {\n        const suggestions = await generateFAQSuggestions(org.id);\n        console.log(\n          `Generated ${suggestions.length} suggestions for ${org.name}`\n        );\n      } catch (error) {\n        console.error(`Failed to generate suggestions for ${org.name}:`, error);\n      }\n    }\n\n    console.log('✅ Weekly FAQ suggestion batch completed');\n  } catch (error) {\n    console.error('❌ Weekly FAQ suggestion batch failed:', error);\n  }\n}\n\n// FAQ提案の統計を取得\nexport async function getFAQSuggestionStats(organizationId: string) {\n  try {\n    const [totalUnanswered, processed, highPriority] = await Promise.all([\n      prisma.unansweredMessage.count({\n        where: { organizationId, isProcessed: false },\n      }),\n      prisma.unansweredMessage.count({\n        where: { organizationId, isProcessed: true },\n      }),\n      prisma.unansweredMessage.count({\n        where: {\n          organizationId,\n          isProcessed: false,\n          count: { gte: 5 }, // 5回以上質問された高優先度項目\n        },\n      }),\n    ]);\n\n    return {\n      totalUnanswered,\n      processed,\n      highPriority,\n      processingRate:\n        totalUnanswered > 0 ? processed / (processed + totalUnanswered) : 0,\n    };\n  } catch (error) {\n    console.error('Failed to get FAQ suggestion stats:', error);\n    return {\n      totalUnanswered: 0,\n      processed: 0,\n      highPriority: 0,\n      processingRate: 0,\n    };\n  }\n}\n"],"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","ignoreList":[]}