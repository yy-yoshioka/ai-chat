9dff32d52de93613c50510412ba16d9a
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const dotenv_1 = __importDefault(require("dotenv"));
const cookie_parser_1 = __importDefault(require("cookie-parser"));
const cors_1 = __importDefault(require("cors"));
const helmet_1 = __importDefault(require("helmet"));
const metrics_1 = require("./middleware/metrics");
const auth_1 = __importDefault(require("./routes/auth"));
const faqs_1 = __importDefault(require("./routes/faqs"));
const chat_1 = __importDefault(require("./routes/chat"));
const admin_1 = __importDefault(require("./routes/admin"));
const widgets_1 = __importDefault(require("./routes/widgets"));
const widgetLoader_1 = require("./routes/widgetLoader");
const prisma_1 = require("./lib/prisma");
const embed_1 = require("./routes/embed");
const analytics_1 = require("./routes/analytics");
const translation_1 = require("./routes/translation");
const billing_1 = require("./routes/billing");
const companies_1 = require("./routes/companies");
const organizations_1 = __importDefault(require("./routes/organizations"));
const users_1 = __importDefault(require("./routes/users"));
const dashboard_1 = __importDefault(require("./routes/dashboard"));
const reports_1 = __importDefault(require("./routes/reports"));
const knowledge_base_1 = __importDefault(require("./routes/knowledge-base"));
const training_1 = __importDefault(require("./routes/training"));
const settings_1 = __importDefault(require("./routes/settings"));
const webhooks_1 = __importDefault(require("./routes/webhooks"));
const status_1 = __importDefault(require("./routes/status"));
const dataRetention_1 = __importDefault(require("./routes/dataRetention"));
const security_1 = __importDefault(require("./routes/security"));
// Load environment variables
dotenv_1.default.config();
// Initialize Express app
const app = (0, express_1.default)();
// Add metrics middleware early
app.use(metrics_1.metricsMiddleware);
// Security headers (except for widget loader which needs to be embeddable)
app.use('/widget-loader', (req, res, next) => {
    // Allow widget loader to be embedded in any site
    res.removeHeader('X-Frame-Options');
    next();
});
app.use((0, helmet_1.default)({
    frameguard: { action: 'sameorigin' }, // Default frame protection
}));
// CORS middleware with different configs for different routes
app.use('/api/widgets/:widgetKey', (0, cors_1.default)({
    origin: '*', // Allow any origin for public widget config
    methods: ['GET'],
    allowedHeaders: ['Content-Type'],
}));
app.use('/api/chat/widget', (0, cors_1.default)({
    origin: '*', // Allow any origin for widget chat
    methods: ['POST'],
    allowedHeaders: ['Content-Type', 'X-Widget-Key'],
}));
app.use('/widget-loader', (0, cors_1.default)({
    origin: '*', // Allow any origin for widget loader
    methods: ['GET'],
    allowedHeaders: ['Content-Type'],
}));
// Default CORS for admin/auth routes
app.use((0, cors_1.default)({
    origin: [
        'http://localhost:3000',
        process.env.FRONTEND_URL || 'http://localhost:3000',
    ], // Your frontend URL(s)
    credentials: true, // Allow cookies to be sent with requests
    methods: ['GET', 'POST', 'PUT', 'DELETE'],
    allowedHeaders: ['Content-Type', 'Authorization'],
}));
// Middleware
app.use(express_1.default.json());
app.use((0, cookie_parser_1.default)());
// Routes
app.get('/', (_req, res) => {
    res.send('Hello from Express + TypeScript!');
});
// Widget loader routes (serve JS files)
app.use('/widget-loader', widgetLoader_1.widgetLoaderRoutes);
// API routes
app.use('/api/auth', auth_1.default);
app.use('/api/faqs', faqs_1.default);
app.use('/api/chat', chat_1.default);
app.use('/api/admin', admin_1.default);
app.use('/api/widgets', widgets_1.default);
app.use('/api/billing', billing_1.billingRoutes);
app.use('/api/embed', embed_1.embedRoutes);
app.use('/api/analytics', analytics_1.analyticsRoutes);
app.use('/api/translation', translation_1.translationRoutes);
app.use('/api/companies', companies_1.companyRoutes);
app.use('/api/organizations', organizations_1.default);
app.use('/api/users', users_1.default);
app.use('/api/dashboard', dashboard_1.default);
app.use('/api/reports', reports_1.default);
app.use('/api', knowledge_base_1.default);
app.use('/api', training_1.default);
app.use('/api/settings', settings_1.default);
app.use('/api/webhooks', webhooks_1.default);
app.use('/api/status', status_1.default);
app.use('/api/data-retention', dataRetention_1.default);
app.use('/api/security', security_1.default);
app.use('/v1/settings', settings_1.default);
app.use('/v1/organizations', organizations_1.default);
app.use('/v1/widgets', widgets_1.default);
// Legacy routes (backwards compatibility)
app.use('/auth', auth_1.default);
app.use('/faqs', faqs_1.default);
app.use('/chat', chat_1.default);
app.use('/admin', admin_1.default);
// For checking that Prisma is connected
app.get('/debug/db', (_req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        // Count users in the database
        const userCount = yield prisma_1.prisma.user.count();
        const widgetCount = yield prisma_1.prisma.widget.count();
        const companyCount = yield prisma_1.prisma.company.count();
        res.json({
            message: 'Database connection working',
            userCount,
            widgetCount,
            companyCount,
        });
    }
    catch (error) {
        console.error('Database error:', error);
        res.status(500).json({ message: 'Database connection error' });
    }
}));
// ✅ [A] ヘルスチェック
app.get('/health', (_req, res) => res.sendStatus(200));
// Add error tracking middleware at the end
app.use(metrics_1.errorTrackingMiddleware);
exports.default = app;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,