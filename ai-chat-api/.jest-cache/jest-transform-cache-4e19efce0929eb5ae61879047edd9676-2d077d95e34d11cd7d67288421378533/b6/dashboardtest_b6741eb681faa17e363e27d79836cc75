258b2b8bf90ac8cdd8e366d125e58d40
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const supertest_1 = __importDefault(require("supertest"));
const app_1 = __importDefault(require("../../src/app"));
const prisma_1 = require("../../src/lib/prisma");
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const client_1 = require("@prisma/client");
describe('Dashboard Routes', () => {
    let authToken;
    let userId;
    let organizationId;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        // Create test organization
        const organization = yield prisma_1.prisma.organization.create({
            data: {
                name: 'Test Organization',
                slug: 'test-org',
            },
        });
        organizationId = organization.id;
        // Create test user
        const user = yield prisma_1.prisma.user.create({
            data: {
                email: 'test@example.com',
                password: 'hashed_password',
                name: 'Test User',
                roles: [client_1.Role.org_admin],
                organizationId,
            },
        });
        userId = user.id;
        // Generate auth token
        authToken = jsonwebtoken_1.default.sign({ userId: user.id, email: user.email }, process.env.JWT_SECRET, { expiresIn: '1d' });
        // Create test data
        yield prisma_1.prisma.chatLog.createMany({
            data: [
                {
                    userId,
                    question: 'Test question 1',
                    answer: 'Test answer 1',
                    tokens: 10,
                },
                {
                    userId,
                    question: 'Test question 2',
                    answer: 'Test answer 2',
                    tokens: 20,
                },
            ],
        });
    }));
    describe('GET /api/dashboard', () => {
        it('should return dashboard metrics for authenticated user', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = yield (0, supertest_1.default)(app_1.default)
                .get('/api/dashboard')
                .set('Cookie', `auth-token=${authToken}`);
            expect(response.status).toBe(200);
            expect(response.body).toHaveProperty('totalChats', 2);
            expect(response.body).toHaveProperty('activeUsers', 1);
            expect(response.body).toHaveProperty('avgResponseTime');
            expect(response.body).toHaveProperty('errorRate');
            expect(response.body).toHaveProperty('timestamp');
        }));
        it('should return 401 for unauthenticated request', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = yield (0, supertest_1.default)(app_1.default).get('/api/dashboard');
            expect(response.status).toBe(401);
            expect(response.body).toHaveProperty('error', 'Unauthorized');
        }));
        it('should return 401 for invalid token', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = yield (0, supertest_1.default)(app_1.default)
                .get('/api/dashboard')
                .set('Cookie', 'auth-token=invalid-token');
            expect(response.status).toBe(401);
            expect(response.body).toHaveProperty('error', 'Invalid token');
        }));
        it('should handle database errors gracefully', () => __awaiter(void 0, void 0, void 0, function* () {
            // Mock prisma to throw error
            jest
                .spyOn(prisma_1.prisma.chatLog, 'count')
                .mockRejectedValueOnce(new Error('DB Error'));
            const response = yield (0, supertest_1.default)(app_1.default)
                .get('/api/dashboard')
                .set('Cookie', `auth-token=${authToken}`);
            expect(response.status).toBe(500);
            expect(response.body).toHaveProperty('error', 'Failed to fetch dashboard data');
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,