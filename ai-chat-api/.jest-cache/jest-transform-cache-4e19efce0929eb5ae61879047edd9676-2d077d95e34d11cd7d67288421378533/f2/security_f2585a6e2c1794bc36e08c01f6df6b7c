9efec127b7b1b70c55d0fbc79692ff50
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.requireIPAllowlist = exports.createOrgRateLimit = exports.logDataAccess = exports.requireAnyPermission = exports.requirePermission = void 0;
const rbacService_1 = require("../services/rbacService");
const securityService_1 = require("../services/securityService");
const express_rate_limit_1 = __importDefault(require("express-rate-limit"));
const prisma_1 = require("../lib/prisma");
const crypto_1 = __importDefault(require("crypto"));
// Enhanced auth middleware with RBAC
const requirePermission = (permission) => {
    return (req, res, next) => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        try {
            if (!((_a = req.user) === null || _a === void 0 ? void 0 : _a.id) || !req.organizationId) {
                yield (0, securityService_1.logSecurityEvent)({
                    action: 'unauthorized_access_attempt',
                    resource: req.path,
                    success: false,
                    ipAddress: req.ip,
                    userAgent: req.get('User-Agent'),
                    risk_level: 'medium',
                });
                return res.status(401).json({ error: 'Authentication required' });
            }
            const hasRequiredPermission = yield (0, rbacService_1.hasPermission)(req.user.id, req.organizationId, permission);
            if (!hasRequiredPermission) {
                yield (0, securityService_1.logSecurityEvent)({
                    userId: req.user.id,
                    organizationId: req.organizationId,
                    action: 'permission_denied',
                    resource: req.path,
                    success: false,
                    ipAddress: req.ip,
                    userAgent: req.get('User-Agent'),
                    details: { required_permission: permission },
                    risk_level: 'medium',
                });
                return res.status(403).json({ error: 'Insufficient permissions' });
            }
            yield (0, securityService_1.logSecurityEvent)({
                userId: req.user.id,
                organizationId: req.organizationId,
                action: 'permission_granted',
                resource: req.path,
                success: true,
                ipAddress: req.ip,
                userAgent: req.get('User-Agent'),
                details: { granted_permission: permission },
                risk_level: 'low',
            });
            next();
        }
        catch (error) {
            yield (0, securityService_1.logSecurityEvent)({
                userId: (_b = req.user) === null || _b === void 0 ? void 0 : _b.id,
                organizationId: req.organizationId,
                action: 'permission_check_error',
                resource: req.path,
                success: false,
                ipAddress: req.ip,
                userAgent: req.get('User-Agent'),
                details: {
                    error: error instanceof Error ? error.message : 'Unknown error',
                },
                risk_level: 'high',
            });
            res.status(500).json({ error: 'Permission check failed' });
        }
    });
};
exports.requirePermission = requirePermission;
const requireAnyPermission = (permissions) => {
    return (req, res, next) => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        try {
            if (!((_a = req.user) === null || _a === void 0 ? void 0 : _a.id) || !req.organizationId) {
                return res.status(401).json({ error: 'Authentication required' });
            }
            const hasRequiredPermissions = yield (0, rbacService_1.hasAnyPermission)(req.user.id, req.organizationId, permissions);
            if (!hasRequiredPermissions) {
                yield (0, securityService_1.logSecurityEvent)({
                    userId: req.user.id,
                    organizationId: req.organizationId,
                    action: 'permission_denied',
                    resource: req.path,
                    success: false,
                    ipAddress: req.ip,
                    userAgent: req.get('User-Agent'),
                    details: { required_permissions: permissions },
                    risk_level: 'medium',
                });
                return res.status(403).json({ error: 'Insufficient permissions' });
            }
            next();
        }
        catch (error) {
            res.status(500).json({ error: 'Permission check failed' });
        }
    });
};
exports.requireAnyPermission = requireAnyPermission;
// Data access logging middleware
const logDataAccess = (tableName, operation) => {
    return (req, res, next) => __awaiter(void 0, void 0, void 0, function* () {
        const originalSend = res.send;
        res.send = function (data) {
            var _a;
            // Log the data access
            if (((_a = req.user) === null || _a === void 0 ? void 0 : _a.id) && req.organizationId) {
                (0, securityService_1.logDataAccess)({
                    organizationId: req.organizationId,
                    userId: req.user.id,
                    table_name: tableName,
                    operation,
                    record_ids: extractRecordIds(req, data),
                    query_hash: generateQueryHash(req),
                }).catch((error) => {
                    console.error('Failed to log data access:', error);
                });
            }
            return originalSend.call(this, data);
        };
        next();
    });
};
exports.logDataAccess = logDataAccess;
// Rate limiting with organization-specific limits
const createOrgRateLimit = (windowMs, maxRequests, message) => {
    return (0, express_rate_limit_1.default)({
        windowMs,
        max: maxRequests,
        message: message || 'Too many requests',
        keyGenerator: (req) => {
            return `${req.organizationId || 'anonymous'}:${req.ip}`;
        },
        skip: (req) => {
            var _a, _b;
            // Skip rate limiting for system admins
            return ((_b = (_a = req.user) === null || _a === void 0 ? void 0 : _a.roles) === null || _b === void 0 ? void 0 : _b.includes('owner')) || false;
        },
    });
};
exports.createOrgRateLimit = createOrgRateLimit;
// IP allowlist middleware
const requireIPAllowlist = (req, res, next) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    try {
        if (!req.organizationId) {
            return next();
        }
        const org = yield prisma_1.prisma.organization.findUnique({
            where: { id: req.organizationId },
            select: { settings: true },
        });
        const ipAllowlist = (_a = org === null || org === void 0 ? void 0 : org.settings) === null || _a === void 0 ? void 0 : _a.ipAllowlist;
        if (ipAllowlist && ipAllowlist.length > 0) {
            const clientIP = req.ip;
            const isAllowed = ipAllowlist.some((allowedIP) => {
                return clientIP && (clientIP === allowedIP || clientIP.startsWith(allowedIP));
            });
            if (!isAllowed) {
                yield (0, securityService_1.logSecurityEvent)({
                    userId: (_b = req.user) === null || _b === void 0 ? void 0 : _b.id,
                    organizationId: req.organizationId,
                    action: 'ip_blocked',
                    resource: req.path,
                    success: false,
                    ipAddress: clientIP,
                    userAgent: req.get('User-Agent'),
                    details: { allowlist: ipAllowlist },
                    risk_level: 'high',
                });
                return res.status(403).json({ error: 'IP address not allowed' });
            }
        }
        next();
    }
    catch (error) {
        next(error);
    }
});
exports.requireIPAllowlist = requireIPAllowlist;
const extractRecordIds = (req, responseData) => {
    var _a;
    // Extract record IDs from request params, body, or response
    const ids = [];
    if (req.params.id)
        ids.push(req.params.id);
    if ((_a = req.body) === null || _a === void 0 ? void 0 : _a.id)
        ids.push(req.body.id);
    try {
        const data = typeof responseData === 'string'
            ? JSON.parse(responseData)
            : responseData;
        if (data === null || data === void 0 ? void 0 : data.id)
            ids.push(data.id);
        if (Array.isArray(data)) {
            data.forEach((item) => {
                if (item === null || item === void 0 ? void 0 : item.id)
                    ids.push(item.id);
            });
        }
    }
    catch (error) {
        // Ignore JSON parse errors
    }
    return ids;
};
const generateQueryHash = (req) => {
    const queryString = `${req.method}:${req.path}:${JSON.stringify(req.query)}`;
    return crypto_1.default.createHash('sha256').update(queryString).digest('hex');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,