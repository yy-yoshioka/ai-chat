{"version":3,"names":["prisma_1","cov_23sfehjr2","s","require","Sentry","__importStar","DataRetentionService","getInstance","f","instance","b","executeRetentionPolicy","console","log","results","Promise","allSettled","cleanupOldMessages","cleanupInactiveAnalytics","cleanupDeletedAccounts","cleanupServerLogs","forEach","result","index","operations","status","value","error","reason","captureException","twoYearsAgo","Date","setFullYear","getFullYear","inactiveOrgs","prisma","company","findMany","where","updatedAt","lt","select","id","length","orgIds","map","org","deletedMessages","chatLog","deleteMany","widget","in","count","oneYearAgo","deletedAnalytics","$executeRaw","Number","thirtyDaysAgo","setDate","getDate","companiesForDeletion","widgets","none","isActive","companyIds","c","deletionResults","$transaction","tx","__awaiter","messagesDeleted","widgetsDeleted","usersDeleted","user","companyId","companiesDeleted","messages","users","companies","ninetyDaysAgo","deletedLogs","scheduleRetentionPolicy","runDaily","now","nextRun","setHours","msUntilNext","getTime","setTimeout","setInterval","toISOString","getRetentionStatus","policies","name","description","retentionPeriod","exports","dataRetentionService"],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/lib/dataRetention.ts"],"sourcesContent":["import { prisma } from './prisma';\nimport * as Sentry from '@sentry/node';\n\nexport class DataRetentionService {\n  private static instance: DataRetentionService;\n\n  static getInstance(): DataRetentionService {\n    if (!DataRetentionService.instance) {\n      DataRetentionService.instance = new DataRetentionService();\n    }\n    return DataRetentionService.instance;\n  }\n\n  async executeRetentionPolicy(): Promise<void> {\n    console.log('Starting data retention policy execution...');\n\n    try {\n      const results = await Promise.allSettled([\n        this.cleanupOldMessages(),\n        this.cleanupInactiveAnalytics(),\n        this.cleanupDeletedAccounts(),\n        this.cleanupServerLogs(),\n      ]);\n\n      // Log results\n      results.forEach((result, index) => {\n        const operations = ['messages', 'analytics', 'accounts', 'logs'];\n        if (result.status === 'fulfilled') {\n          console.log(\n            `✅ ${operations[index]} cleanup completed: ${result.value} records processed`\n          );\n        } else {\n          console.error(\n            `❌ ${operations[index]} cleanup failed:`,\n            result.reason\n          );\n          Sentry.captureException(result.reason);\n        }\n      });\n\n      console.log('Data retention policy execution completed');\n    } catch (error) {\n      console.error('Data retention policy execution failed:', error);\n      Sentry.captureException(error);\n      throw error;\n    }\n  }\n\n  private async cleanupOldMessages(): Promise<number> {\n    const twoYearsAgo = new Date();\n    twoYearsAgo.setFullYear(twoYearsAgo.getFullYear() - 2);\n\n    // Delete messages from inactive organizations (no activity in 2 years)\n    const inactiveOrgs = await prisma.company.findMany({\n      where: {\n        updatedAt: {\n          lt: twoYearsAgo,\n        },\n      },\n      select: { id: true },\n    });\n\n    if (inactiveOrgs.length === 0) {\n      return 0;\n    }\n\n    const orgIds = inactiveOrgs.map((org) => org.id);\n\n    // Delete messages from inactive organizations\n    const deletedMessages = await prisma.chatLog.deleteMany({\n      where: {\n        widget: {\n          company: {\n            id: {\n              in: orgIds,\n            },\n          },\n        },\n      },\n    });\n\n    return deletedMessages.count;\n  }\n\n  private async cleanupInactiveAnalytics(): Promise<number> {\n    const oneYearAgo = new Date();\n    oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);\n\n    // This would be specific to your analytics table structure\n    // For now, we'll assume there's an analytics table\n    try {\n      const deletedAnalytics = await prisma.$executeRaw`\n        DELETE FROM analytics \n        WHERE created_at < ${oneYearAgo} \n        AND aggregated = false\n      `;\n\n      return Number(deletedAnalytics);\n    } catch (error) {\n      // If analytics table doesn't exist, return 0\n      console.log('Analytics table not found or query failed, skipping...');\n      return 0;\n    }\n  }\n\n  private async cleanupDeletedAccounts(): Promise<number> {\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n    // Find companies that have been inactive for more than 30 days\n    // Since there's no deletedAt field, we'll use updatedAt\n    const companiesForDeletion = await prisma.company.findMany({\n      where: {\n        updatedAt: {\n          lt: thirtyDaysAgo,\n        },\n        // Additional check for inactive companies\n        widgets: {\n          none: {\n            isActive: true,\n          },\n        },\n      },\n      select: { id: true },\n    });\n\n    if (companiesForDeletion.length === 0) {\n      return 0;\n    }\n\n    const companyIds = companiesForDeletion.map((c) => c.id);\n\n    // Delete all related data in correct order (respecting foreign key constraints)\n    const deletionResults = await prisma.$transaction(async (tx) => {\n      // Delete messages first\n      const messagesDeleted = await tx.chatLog.deleteMany({\n        where: {\n          widget: {\n            company: {\n              id: { in: companyIds },\n            },\n          },\n        },\n      });\n\n      // Delete widgets\n      const widgetsDeleted = await tx.widget.deleteMany({\n        where: {\n          company: {\n            id: { in: companyIds },\n          },\n        },\n      });\n\n      // Delete users\n      const usersDeleted = await tx.user.deleteMany({\n        where: {\n          companyId: { in: companyIds },\n        },\n      });\n\n      // Finally delete companies\n      const companiesDeleted = await tx.company.deleteMany({\n        where: {\n          id: { in: companyIds },\n        },\n      });\n\n      return {\n        messages: messagesDeleted.count,\n        widgets: widgetsDeleted.count,\n        users: usersDeleted.count,\n        companies: companiesDeleted.count,\n      };\n    });\n\n    console.log('Account cleanup completed:', deletionResults);\n    return deletionResults.companies;\n  }\n\n  private async cleanupServerLogs(): Promise<number> {\n    const ninetyDaysAgo = new Date();\n    ninetyDaysAgo.setDate(ninetyDaysAgo.getDate() - 90);\n\n    // This would typically be handled by log rotation or external log management\n    // For demonstration, we'll assume there's a logs table\n    try {\n      const deletedLogs = await prisma.$executeRaw`\n        DELETE FROM server_logs \n        WHERE created_at < ${ninetyDaysAgo}\n      `;\n\n      return Number(deletedLogs);\n    } catch (error) {\n      // If logs table doesn't exist, return 0\n      console.log('Server logs table not found, skipping...');\n      return 0;\n    }\n  }\n\n  async scheduleRetentionPolicy(): Promise<void> {\n    // Run retention policy daily at 2 AM\n    const runDaily = () => {\n      const now = new Date();\n      const nextRun = new Date();\n      nextRun.setHours(2, 0, 0, 0);\n\n      // If it's already past 2 AM today, schedule for tomorrow\n      if (now > nextRun) {\n        nextRun.setDate(nextRun.getDate() + 1);\n      }\n\n      const msUntilNext = nextRun.getTime() - now.getTime();\n\n      setTimeout(async () => {\n        await this.executeRetentionPolicy();\n        setInterval(() => this.executeRetentionPolicy(), 24 * 60 * 60 * 1000); // 24 hours\n      }, msUntilNext);\n\n      console.log(\n        `Data retention policy scheduled for: ${nextRun.toISOString()}`\n      );\n    };\n\n    runDaily();\n  }\n\n  async getRetentionStatus(): Promise<{\n    lastRun?: Date;\n    nextRun: Date;\n    policies: {\n      name: string;\n      description: string;\n      retentionPeriod: string;\n      status: 'active' | 'inactive';\n    }[];\n  }> {\n    const nextRun = new Date();\n    nextRun.setHours(2, 0, 0, 0);\n    if (new Date() > nextRun) {\n      nextRun.setDate(nextRun.getDate() + 1);\n    }\n\n    return {\n      nextRun,\n      policies: [\n        {\n          name: 'Chat Messages',\n          description: 'Delete messages from inactive organizations',\n          retentionPeriod: '2 years',\n          status: 'active',\n        },\n        {\n          name: 'Analytics Data',\n          description: 'Delete raw analytics data after aggregation',\n          retentionPeriod: '1 year',\n          status: 'active',\n        },\n        {\n          name: 'Deleted Accounts',\n          description: 'Permanently delete account data after grace period',\n          retentionPeriod: '30 days',\n          status: 'active',\n        },\n        {\n          name: 'Server Logs',\n          description: 'Delete old server logs and access logs',\n          retentionPeriod: '90 days',\n          status: 'active',\n        },\n      ],\n    };\n  }\n}\n\nexport const dataRetentionService = DataRetentionService.getInstance();\n"],"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","ignoreList":[]}