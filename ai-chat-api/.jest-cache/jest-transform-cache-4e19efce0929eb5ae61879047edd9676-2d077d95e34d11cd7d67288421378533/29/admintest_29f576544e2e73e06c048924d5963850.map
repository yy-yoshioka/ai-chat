{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/routes/admin.test.ts","mappings":"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","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/routes/admin.test.ts"],"sourcesContent":["import request from 'supertest';\nimport express from 'express';\nimport { prisma } from '../../src/lib/prisma';\nimport adminRouter from '../../src/routes/admin';\nimport { authMiddleware } from '../../src/middleware/auth';\nimport { adminMiddleware } from '../../src/middleware/admin';\nimport {\n  testUser,\n  testOrganization,\n  generateTestToken,\n} from '../fixtures/test-data';\n\n// Mock dependencies\njest.mock('../../src/lib/prisma');\njest.mock('../../src/middleware/auth');\njest.mock('../../src/middleware/admin');\n\ndescribe('Admin Routes', () => {\n  let app: express.Application;\n\n  const adminUser = {\n    ...testUser,\n    id: 'admin-user-id',\n    roles: ['admin'],\n  };\n\n  const mockChatLogs = [\n    {\n      id: 'chat-log-1',\n      question: 'What is your return policy?',\n      answer: 'Our return policy allows returns within 30 days...',\n      sessionId: 'session-123',\n      organizationId: testOrganization.id,\n      createdAt: new Date('2024-01-15T10:00:00Z'),\n      updatedAt: new Date('2024-01-15T10:00:00Z'),\n      user: {\n        id: testUser.id,\n        email: testUser.email,\n      },\n    },\n    {\n      id: 'chat-log-2',\n      question: 'How do I contact support?',\n      answer: 'You can contact our support team at...',\n      sessionId: 'session-456',\n      organizationId: testOrganization.id,\n      createdAt: new Date('2024-01-16T14:30:00Z'),\n      updatedAt: new Date('2024-01-16T14:30:00Z'),\n      user: {\n        id: 'user-2',\n        email: 'user2@example.com',\n      },\n    },\n    {\n      id: 'chat-log-3',\n      question: 'What are your business hours?',\n      answer: 'We are open Monday through Friday...',\n      sessionId: 'session-789',\n      organizationId: testOrganization.id,\n      createdAt: new Date('2024-01-17T09:15:00Z'),\n      updatedAt: new Date('2024-01-17T09:15:00Z'),\n      user: {\n        id: 'user-3',\n        email: 'user3@example.com',\n      },\n    },\n  ];\n\n  beforeEach(() => {\n    app = express();\n    app.use(express.json());\n    app.use('/api/admin', adminRouter);\n\n    // Setup middleware mocks\n    (authMiddleware as jest.Mock).mockImplementation((req, res, next) => {\n      req.user = { ...adminUser, organization: testOrganization };\n      next();\n    });\n\n    (adminMiddleware as jest.Mock).mockImplementation((req, res, next) => {\n      next();\n    });\n\n    // Reset all mocks\n    jest.clearAllMocks();\n  });\n\n  describe('GET /api/admin/chat-logs', () => {\n    it('should return all chat logs with user details', async () => {\n      (prisma.chatLog.findMany as jest.Mock).mockResolvedValue(mockChatLogs);\n\n      const response = await request(app)\n        .get('/api/admin/chat-logs')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveLength(3);\n\n      expect(response.body[0]).toMatchObject({\n        id: 'chat-log-1',\n        question: 'What is your return policy?',\n        answer: 'Our return policy allows returns within 30 days...',\n        sessionId: 'session-123',\n        organizationId: testOrganization.id,\n        user: {\n          id: testUser.id,\n          email: testUser.email,\n        },\n      });\n\n      expect(response.body[1]).toMatchObject({\n        id: 'chat-log-2',\n        question: 'How do I contact support?',\n        user: {\n          id: 'user-2',\n          email: 'user2@example.com',\n        },\n      });\n\n      expect(prisma.chatLog.findMany).toHaveBeenCalledWith({\n        include: { user: { select: { id: true, email: true } } },\n        orderBy: { createdAt: 'desc' },\n      });\n    });\n\n    it('should return empty array when no chat logs exist', async () => {\n      (prisma.chatLog.findMany as jest.Mock).mockResolvedValue([]);\n\n      const response = await request(app)\n        .get('/api/admin/chat-logs')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toEqual([]);\n    });\n\n    it('should handle database errors gracefully', async () => {\n      (prisma.chatLog.findMany as jest.Mock).mockRejectedValue(\n        new Error('Database connection failed')\n      );\n\n      const response = await request(app)\n        .get('/api/admin/chat-logs')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(500);\n    });\n\n    it('should order chat logs by creation date descending', async () => {\n      const unorderedLogs = [\n        { ...mockChatLogs[1], createdAt: new Date('2024-01-16T14:30:00Z') },\n        { ...mockChatLogs[0], createdAt: new Date('2024-01-15T10:00:00Z') },\n        { ...mockChatLogs[2], createdAt: new Date('2024-01-17T09:15:00Z') },\n      ];\n\n      (prisma.chatLog.findMany as jest.Mock).mockResolvedValue(unorderedLogs);\n\n      const response = await request(app)\n        .get('/api/admin/chat-logs')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveLength(3);\n\n      // Verify the ordering parameter was used\n      expect(prisma.chatLog.findMany).toHaveBeenCalledWith(\n        expect.objectContaining({\n          orderBy: { createdAt: 'desc' },\n        })\n      );\n    });\n\n    it('should include only necessary user fields for privacy', async () => {\n      (prisma.chatLog.findMany as jest.Mock).mockResolvedValue(mockChatLogs);\n\n      await request(app)\n        .get('/api/admin/chat-logs')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        );\n\n      expect(prisma.chatLog.findMany).toHaveBeenCalledWith({\n        include: { user: { select: { id: true, email: true } } },\n        orderBy: { createdAt: 'desc' },\n      });\n\n      // Verify that sensitive user data is not included\n      expect(prisma.chatLog.findMany).not.toHaveBeenCalledWith(\n        expect.objectContaining({\n          include: expect.objectContaining({\n            user: expect.objectContaining({\n              select: expect.objectContaining({\n                password: true,\n              }),\n            }),\n          }),\n        })\n      );\n    });\n\n    it('should handle chat logs with missing user data', async () => {\n      const logsWithMissingUser = [\n        {\n          ...mockChatLogs[0],\n          user: null,\n        },\n        mockChatLogs[1],\n      ];\n\n      (prisma.chatLog.findMany as jest.Mock).mockResolvedValue(\n        logsWithMissingUser\n      );\n\n      const response = await request(app)\n        .get('/api/admin/chat-logs')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveLength(2);\n      expect(response.body[0].user).toBeNull();\n      expect(response.body[1].user).toMatchObject({\n        id: 'user-2',\n        email: 'user2@example.com',\n      });\n    });\n  });\n\n  describe('GET /api/admin/report/chat-logs', () => {\n    it('should return chat logs grouped by creation date', async () => {\n      const mockGroupedData = [\n        {\n          createdAt: new Date('2024-01-15T00:00:00Z'),\n          _count: { id: 5 },\n        },\n        {\n          createdAt: new Date('2024-01-16T00:00:00Z'),\n          _count: { id: 8 },\n        },\n        {\n          createdAt: new Date('2024-01-17T00:00:00Z'),\n          _count: { id: 3 },\n        },\n      ];\n\n      (prisma.chatLog.groupBy as jest.Mock).mockResolvedValue(mockGroupedData);\n\n      const response = await request(app)\n        .get('/api/admin/report/chat-logs')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveLength(3);\n\n      expect(response.body[0]).toMatchObject({\n        createdAt: '2024-01-15T00:00:00.000Z',\n        _count: { id: 5 },\n      });\n\n      expect(response.body[1]).toMatchObject({\n        createdAt: '2024-01-16T00:00:00.000Z',\n        _count: { id: 8 },\n      });\n\n      expect(response.body[2]).toMatchObject({\n        createdAt: '2024-01-17T00:00:00.000Z',\n        _count: { id: 3 },\n      });\n\n      expect(prisma.chatLog.groupBy).toHaveBeenCalledWith({\n        by: ['createdAt'],\n        _count: { id: true },\n      });\n    });\n\n    it('should return empty array when no chat logs exist for report', async () => {\n      (prisma.chatLog.groupBy as jest.Mock).mockResolvedValue([]);\n\n      const response = await request(app)\n        .get('/api/admin/report/chat-logs')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toEqual([]);\n    });\n\n    it('should handle database errors gracefully for report', async () => {\n      (prisma.chatLog.groupBy as jest.Mock).mockRejectedValue(\n        new Error('Database aggregation failed')\n      );\n\n      const response = await request(app)\n        .get('/api/admin/report/chat-logs')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(500);\n    });\n\n    it('should use correct groupBy parameters', async () => {\n      (prisma.chatLog.groupBy as jest.Mock).mockResolvedValue([]);\n\n      await request(app)\n        .get('/api/admin/report/chat-logs')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        );\n\n      expect(prisma.chatLog.groupBy).toHaveBeenCalledWith({\n        by: ['createdAt'],\n        _count: { id: true },\n      });\n    });\n\n    it('should handle large datasets efficiently', async () => {\n      // Mock a large dataset\n      const largeMockData = Array.from({ length: 365 }, (_, index) => ({\n        createdAt: new Date(`2024-01-01T00:00:00Z`),\n        _count: { id: Math.floor(Math.random() * 100) + 1 },\n      }));\n\n      (prisma.chatLog.groupBy as jest.Mock).mockResolvedValue(largeMockData);\n\n      const response = await request(app)\n        .get('/api/admin/report/chat-logs')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveLength(365);\n    });\n\n    it('should not accept query parameters (stateless endpoint)', async () => {\n      (prisma.chatLog.groupBy as jest.Mock).mockResolvedValue([]);\n\n      const response = await request(app)\n        .get('/api/admin/report/chat-logs')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        )\n        .query({\n          startDate: '2024-01-01',\n          endDate: '2024-01-31',\n          limit: '10',\n        });\n\n      expect(response.status).toBe(200);\n\n      // Should not use query parameters\n      expect(prisma.chatLog.groupBy).toHaveBeenCalledWith({\n        by: ['createdAt'],\n        _count: { id: true },\n      });\n    });\n  });\n\n  describe('Authentication and authorization', () => {\n    it('should require authentication for chat logs endpoint', async () => {\n      (authMiddleware as jest.Mock).mockImplementationOnce((req, res) => {\n        res.status(401).json({ error: 'Unauthorized' });\n      });\n\n      const response = await request(app).get('/api/admin/chat-logs');\n\n      expect(response.status).toBe(401);\n      expect(response.body).toEqual({ error: 'Unauthorized' });\n    });\n\n    it('should require authentication for report endpoint', async () => {\n      (authMiddleware as jest.Mock).mockImplementationOnce((req, res) => {\n        res.status(401).json({ error: 'Unauthorized' });\n      });\n\n      const response = await request(app).get('/api/admin/report/chat-logs');\n\n      expect(response.status).toBe(401);\n      expect(response.body).toEqual({ error: 'Unauthorized' });\n    });\n\n    it('should require admin permissions for chat logs endpoint', async () => {\n      (adminMiddleware as jest.Mock).mockImplementationOnce((req, res) => {\n        res.status(403).json({ error: 'Admin access required' });\n      });\n\n      const response = await request(app)\n        .get('/api/admin/chat-logs')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(403);\n      expect(response.body).toEqual({ error: 'Admin access required' });\n    });\n\n    it('should require admin permissions for report endpoint', async () => {\n      (adminMiddleware as jest.Mock).mockImplementationOnce((req, res) => {\n        res.status(403).json({ error: 'Admin access required' });\n      });\n\n      const response = await request(app)\n        .get('/api/admin/report/chat-logs')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(403);\n      expect(response.body).toEqual({ error: 'Admin access required' });\n    });\n\n    it('should apply middleware in correct order', async () => {\n      const middlewareOrder: string[] = [];\n\n      (authMiddleware as jest.Mock).mockImplementation((req, res, next) => {\n        middlewareOrder.push('auth');\n        req.user = { ...adminUser, organization: testOrganization };\n        next();\n      });\n\n      (adminMiddleware as jest.Mock).mockImplementation((req, res, next) => {\n        middlewareOrder.push('admin');\n        next();\n      });\n\n      (prisma.chatLog.findMany as jest.Mock).mockResolvedValue([]);\n\n      await request(app)\n        .get('/api/admin/chat-logs')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        );\n\n      expect(middlewareOrder).toEqual(['auth', 'admin']);\n    });\n\n    it('should not proceed if auth middleware fails', async () => {\n      (authMiddleware as jest.Mock).mockImplementationOnce((req, res) => {\n        res.status(401).json({ error: 'Token expired' });\n      });\n\n      // Admin middleware should not be called\n      const adminMiddlewareSpy = jest.fn();\n      (adminMiddleware as jest.Mock).mockImplementation(adminMiddlewareSpy);\n\n      const response = await request(app)\n        .get('/api/admin/chat-logs')\n        .set('Authorization', `Bearer invalid-token`);\n\n      expect(response.status).toBe(401);\n      expect(adminMiddlewareSpy).not.toHaveBeenCalled();\n      expect(prisma.chatLog.findMany).not.toHaveBeenCalled();\n    });\n\n    it('should not proceed if admin middleware fails', async () => {\n      (authMiddleware as jest.Mock).mockImplementation((req, res, next) => {\n        req.user = { ...testUser, organization: testOrganization }; // Non-admin user\n        next();\n      });\n\n      (adminMiddleware as jest.Mock).mockImplementationOnce((req, res) => {\n        res.status(403).json({ error: 'Insufficient permissions' });\n      });\n\n      const response = await request(app)\n        .get('/api/admin/chat-logs')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(403);\n      expect(prisma.chatLog.findMany).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Performance and scalability', () => {\n    it('should handle concurrent requests efficiently', async () => {\n      (prisma.chatLog.findMany as jest.Mock).mockResolvedValue(mockChatLogs);\n\n      const requests = Array.from({ length: 10 }, () =>\n        request(app)\n          .get('/api/admin/chat-logs')\n          .set(\n            'Authorization',\n            `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n          )\n      );\n\n      const responses = await Promise.all(requests);\n\n      responses.forEach((response) => {\n        expect(response.status).toBe(200);\n        expect(response.body).toHaveLength(3);\n      });\n\n      expect(prisma.chatLog.findMany).toHaveBeenCalledTimes(10);\n    });\n\n    it('should handle memory-intensive operations for large datasets', async () => {\n      // Simulate a large dataset\n      const largeChatLogs = Array.from({ length: 10000 }, (_, index) => ({\n        id: `chat-log-${index}`,\n        question: `Question ${index}`,\n        answer: `Answer ${index}`,\n        sessionId: `session-${index}`,\n        organizationId: testOrganization.id,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        user: {\n          id: `user-${index}`,\n          email: `user${index}@example.com`,\n        },\n      }));\n\n      (prisma.chatLog.findMany as jest.Mock).mockResolvedValue(largeChatLogs);\n\n      const response = await request(app)\n        .get('/api/admin/chat-logs')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveLength(10000);\n    });\n  });\n\n  describe('Data integrity and validation', () => {\n    it('should handle malformed date objects in chat logs', async () => {\n      const malformedLogs = [\n        {\n          ...mockChatLogs[0],\n          createdAt: 'invalid-date',\n          updatedAt: null,\n        },\n      ];\n\n      (prisma.chatLog.findMany as jest.Mock).mockResolvedValue(malformedLogs);\n\n      const response = await request(app)\n        .get('/api/admin/chat-logs')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body[0].createdAt).toBe('invalid-date');\n      expect(response.body[0].updatedAt).toBeNull();\n    });\n\n    it('should handle null or undefined values in chat logs', async () => {\n      const logsWithNulls = [\n        {\n          id: 'chat-log-null',\n          question: null,\n          answer: undefined,\n          sessionId: 'session-null',\n          organizationId: testOrganization.id,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          user: null,\n        },\n      ];\n\n      (prisma.chatLog.findMany as jest.Mock).mockResolvedValue(logsWithNulls);\n\n      const response = await request(app)\n        .get('/api/admin/chat-logs')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body[0].question).toBeNull();\n      expect(response.body[0].user).toBeNull();\n    });\n\n    it('should preserve data types in JSON serialization', async () => {\n      const logsWithVariousTypes = [\n        {\n          id: 'chat-log-types',\n          question: 'What is the meaning of life?',\n          answer: '42',\n          sessionId: 'session-types',\n          organizationId: testOrganization.id,\n          metadata: {\n            score: 0.95,\n            isRelevant: true,\n            tags: ['philosophy', 'humor'],\n            timestamp: 1642694400000,\n          },\n          createdAt: new Date('2024-01-15T10:00:00Z'),\n          updatedAt: new Date('2024-01-15T10:00:00Z'),\n          user: {\n            id: testUser.id,\n            email: testUser.email,\n          },\n        },\n      ];\n\n      (prisma.chatLog.findMany as jest.Mock).mockResolvedValue(\n        logsWithVariousTypes\n      );\n\n      const response = await request(app)\n        .get('/api/admin/chat-logs')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(typeof response.body[0].id).toBe('string');\n      expect(typeof response.body[0].metadata?.score).toBe('number');\n      expect(typeof response.body[0].metadata?.isRelevant).toBe('boolean');\n      expect(Array.isArray(response.body[0].metadata?.tags)).toBe(true);\n    });\n  });\n});\n"],"version":3}