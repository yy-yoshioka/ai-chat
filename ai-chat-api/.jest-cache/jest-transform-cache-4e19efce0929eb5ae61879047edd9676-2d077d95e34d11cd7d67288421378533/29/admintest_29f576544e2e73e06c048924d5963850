8561b66929a4f21b4499d0507305ead4
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock dependencies
jest.mock('../../src/lib/prisma');
jest.mock('../../src/middleware/auth');
jest.mock('../../src/middleware/admin');
const supertest_1 = __importDefault(require("supertest"));
const express_1 = __importDefault(require("express"));
const prisma_1 = require("../../src/lib/prisma");
const admin_1 = __importDefault(require("../../src/routes/admin"));
const auth_1 = require("../../src/middleware/auth");
const admin_2 = require("../../src/middleware/admin");
const test_data_1 = require("../fixtures/test-data");
describe('Admin Routes', () => {
    let app;
    const adminUser = Object.assign(Object.assign({}, test_data_1.testUser), { id: 'admin-user-id', roles: ['admin'] });
    const mockChatLogs = [
        {
            id: 'chat-log-1',
            question: 'What is your return policy?',
            answer: 'Our return policy allows returns within 30 days...',
            sessionId: 'session-123',
            organizationId: test_data_1.testOrganization.id,
            createdAt: new Date('2024-01-15T10:00:00Z'),
            updatedAt: new Date('2024-01-15T10:00:00Z'),
            user: {
                id: test_data_1.testUser.id,
                email: test_data_1.testUser.email,
            },
        },
        {
            id: 'chat-log-2',
            question: 'How do I contact support?',
            answer: 'You can contact our support team at...',
            sessionId: 'session-456',
            organizationId: test_data_1.testOrganization.id,
            createdAt: new Date('2024-01-16T14:30:00Z'),
            updatedAt: new Date('2024-01-16T14:30:00Z'),
            user: {
                id: 'user-2',
                email: 'user2@example.com',
            },
        },
        {
            id: 'chat-log-3',
            question: 'What are your business hours?',
            answer: 'We are open Monday through Friday...',
            sessionId: 'session-789',
            organizationId: test_data_1.testOrganization.id,
            createdAt: new Date('2024-01-17T09:15:00Z'),
            updatedAt: new Date('2024-01-17T09:15:00Z'),
            user: {
                id: 'user-3',
                email: 'user3@example.com',
            },
        },
    ];
    beforeEach(() => {
        app = (0, express_1.default)();
        app.use(express_1.default.json());
        app.use('/api/admin', admin_1.default);
        // Setup middleware mocks
        auth_1.authMiddleware.mockImplementation((req, res, next) => {
            req.user = Object.assign(Object.assign({}, adminUser), { organization: test_data_1.testOrganization });
            next();
        });
        admin_2.adminMiddleware.mockImplementation((req, res, next) => {
            next();
        });
        // Reset all mocks
        jest.clearAllMocks();
    });
    describe('GET /api/admin/chat-logs', () => {
        it('should return all chat logs with user details', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.chatLog.findMany.mockResolvedValue(mockChatLogs);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/admin/chat-logs')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body).toHaveLength(3);
            expect(response.body[0]).toMatchObject({
                id: 'chat-log-1',
                question: 'What is your return policy?',
                answer: 'Our return policy allows returns within 30 days...',
                sessionId: 'session-123',
                organizationId: test_data_1.testOrganization.id,
                user: {
                    id: test_data_1.testUser.id,
                    email: test_data_1.testUser.email,
                },
            });
            expect(response.body[1]).toMatchObject({
                id: 'chat-log-2',
                question: 'How do I contact support?',
                user: {
                    id: 'user-2',
                    email: 'user2@example.com',
                },
            });
            expect(prisma_1.prisma.chatLog.findMany).toHaveBeenCalledWith({
                include: { user: { select: { id: true, email: true } } },
                orderBy: { createdAt: 'desc' },
            });
        }));
        it('should return empty array when no chat logs exist', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.chatLog.findMany.mockResolvedValue([]);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/admin/chat-logs')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body).toEqual([]);
        }));
        it('should handle database errors gracefully', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.chatLog.findMany.mockRejectedValue(new Error('Database connection failed'));
            const response = yield (0, supertest_1.default)(app)
                .get('/api/admin/chat-logs')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(500);
        }));
        it('should order chat logs by creation date descending', () => __awaiter(void 0, void 0, void 0, function* () {
            const unorderedLogs = [
                Object.assign(Object.assign({}, mockChatLogs[1]), { createdAt: new Date('2024-01-16T14:30:00Z') }),
                Object.assign(Object.assign({}, mockChatLogs[0]), { createdAt: new Date('2024-01-15T10:00:00Z') }),
                Object.assign(Object.assign({}, mockChatLogs[2]), { createdAt: new Date('2024-01-17T09:15:00Z') }),
            ];
            prisma_1.prisma.chatLog.findMany.mockResolvedValue(unorderedLogs);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/admin/chat-logs')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body).toHaveLength(3);
            // Verify the ordering parameter was used
            expect(prisma_1.prisma.chatLog.findMany).toHaveBeenCalledWith(expect.objectContaining({
                orderBy: { createdAt: 'desc' },
            }));
        }));
        it('should include only necessary user fields for privacy', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.chatLog.findMany.mockResolvedValue(mockChatLogs);
            yield (0, supertest_1.default)(app)
                .get('/api/admin/chat-logs')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`);
            expect(prisma_1.prisma.chatLog.findMany).toHaveBeenCalledWith({
                include: { user: { select: { id: true, email: true } } },
                orderBy: { createdAt: 'desc' },
            });
            // Verify that sensitive user data is not included
            expect(prisma_1.prisma.chatLog.findMany).not.toHaveBeenCalledWith(expect.objectContaining({
                include: expect.objectContaining({
                    user: expect.objectContaining({
                        select: expect.objectContaining({
                            password: true,
                        }),
                    }),
                }),
            }));
        }));
        it('should handle chat logs with missing user data', () => __awaiter(void 0, void 0, void 0, function* () {
            const logsWithMissingUser = [
                Object.assign(Object.assign({}, mockChatLogs[0]), { user: null }),
                mockChatLogs[1],
            ];
            prisma_1.prisma.chatLog.findMany.mockResolvedValue(logsWithMissingUser);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/admin/chat-logs')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body).toHaveLength(2);
            expect(response.body[0].user).toBeNull();
            expect(response.body[1].user).toMatchObject({
                id: 'user-2',
                email: 'user2@example.com',
            });
        }));
    });
    describe('GET /api/admin/report/chat-logs', () => {
        it('should return chat logs grouped by creation date', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockGroupedData = [
                {
                    createdAt: new Date('2024-01-15T00:00:00Z'),
                    _count: { id: 5 },
                },
                {
                    createdAt: new Date('2024-01-16T00:00:00Z'),
                    _count: { id: 8 },
                },
                {
                    createdAt: new Date('2024-01-17T00:00:00Z'),
                    _count: { id: 3 },
                },
            ];
            prisma_1.prisma.chatLog.groupBy.mockResolvedValue(mockGroupedData);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/admin/report/chat-logs')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body).toHaveLength(3);
            expect(response.body[0]).toMatchObject({
                createdAt: '2024-01-15T00:00:00.000Z',
                _count: { id: 5 },
            });
            expect(response.body[1]).toMatchObject({
                createdAt: '2024-01-16T00:00:00.000Z',
                _count: { id: 8 },
            });
            expect(response.body[2]).toMatchObject({
                createdAt: '2024-01-17T00:00:00.000Z',
                _count: { id: 3 },
            });
            expect(prisma_1.prisma.chatLog.groupBy).toHaveBeenCalledWith({
                by: ['createdAt'],
                _count: { id: true },
            });
        }));
        it('should return empty array when no chat logs exist for report', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.chatLog.groupBy.mockResolvedValue([]);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/admin/report/chat-logs')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body).toEqual([]);
        }));
        it('should handle database errors gracefully for report', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.chatLog.groupBy.mockRejectedValue(new Error('Database aggregation failed'));
            const response = yield (0, supertest_1.default)(app)
                .get('/api/admin/report/chat-logs')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(500);
        }));
        it('should use correct groupBy parameters', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.chatLog.groupBy.mockResolvedValue([]);
            yield (0, supertest_1.default)(app)
                .get('/api/admin/report/chat-logs')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`);
            expect(prisma_1.prisma.chatLog.groupBy).toHaveBeenCalledWith({
                by: ['createdAt'],
                _count: { id: true },
            });
        }));
        it('should handle large datasets efficiently', () => __awaiter(void 0, void 0, void 0, function* () {
            // Mock a large dataset
            const largeMockData = Array.from({ length: 365 }, (_, index) => ({
                createdAt: new Date(`2024-01-01T00:00:00Z`),
                _count: { id: Math.floor(Math.random() * 100) + 1 },
            }));
            prisma_1.prisma.chatLog.groupBy.mockResolvedValue(largeMockData);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/admin/report/chat-logs')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body).toHaveLength(365);
        }));
        it('should not accept query parameters (stateless endpoint)', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.chatLog.groupBy.mockResolvedValue([]);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/admin/report/chat-logs')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`)
                .query({
                startDate: '2024-01-01',
                endDate: '2024-01-31',
                limit: '10',
            });
            expect(response.status).toBe(200);
            // Should not use query parameters
            expect(prisma_1.prisma.chatLog.groupBy).toHaveBeenCalledWith({
                by: ['createdAt'],
                _count: { id: true },
            });
        }));
    });
    describe('Authentication and authorization', () => {
        it('should require authentication for chat logs endpoint', () => __awaiter(void 0, void 0, void 0, function* () {
            auth_1.authMiddleware.mockImplementationOnce((req, res) => {
                res.status(401).json({ error: 'Unauthorized' });
            });
            const response = yield (0, supertest_1.default)(app).get('/api/admin/chat-logs');
            expect(response.status).toBe(401);
            expect(response.body).toEqual({ error: 'Unauthorized' });
        }));
        it('should require authentication for report endpoint', () => __awaiter(void 0, void 0, void 0, function* () {
            auth_1.authMiddleware.mockImplementationOnce((req, res) => {
                res.status(401).json({ error: 'Unauthorized' });
            });
            const response = yield (0, supertest_1.default)(app).get('/api/admin/report/chat-logs');
            expect(response.status).toBe(401);
            expect(response.body).toEqual({ error: 'Unauthorized' });
        }));
        it('should require admin permissions for chat logs endpoint', () => __awaiter(void 0, void 0, void 0, function* () {
            admin_2.adminMiddleware.mockImplementationOnce((req, res) => {
                res.status(403).json({ error: 'Admin access required' });
            });
            const response = yield (0, supertest_1.default)(app)
                .get('/api/admin/chat-logs')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(403);
            expect(response.body).toEqual({ error: 'Admin access required' });
        }));
        it('should require admin permissions for report endpoint', () => __awaiter(void 0, void 0, void 0, function* () {
            admin_2.adminMiddleware.mockImplementationOnce((req, res) => {
                res.status(403).json({ error: 'Admin access required' });
            });
            const response = yield (0, supertest_1.default)(app)
                .get('/api/admin/report/chat-logs')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(403);
            expect(response.body).toEqual({ error: 'Admin access required' });
        }));
        it('should apply middleware in correct order', () => __awaiter(void 0, void 0, void 0, function* () {
            const middlewareOrder = [];
            auth_1.authMiddleware.mockImplementation((req, res, next) => {
                middlewareOrder.push('auth');
                req.user = Object.assign(Object.assign({}, adminUser), { organization: test_data_1.testOrganization });
                next();
            });
            admin_2.adminMiddleware.mockImplementation((req, res, next) => {
                middlewareOrder.push('admin');
                next();
            });
            prisma_1.prisma.chatLog.findMany.mockResolvedValue([]);
            yield (0, supertest_1.default)(app)
                .get('/api/admin/chat-logs')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`);
            expect(middlewareOrder).toEqual(['auth', 'admin']);
        }));
        it('should not proceed if auth middleware fails', () => __awaiter(void 0, void 0, void 0, function* () {
            auth_1.authMiddleware.mockImplementationOnce((req, res) => {
                res.status(401).json({ error: 'Token expired' });
            });
            // Admin middleware should not be called
            const adminMiddlewareSpy = jest.fn();
            admin_2.adminMiddleware.mockImplementation(adminMiddlewareSpy);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/admin/chat-logs')
                .set('Authorization', `Bearer invalid-token`);
            expect(response.status).toBe(401);
            expect(adminMiddlewareSpy).not.toHaveBeenCalled();
            expect(prisma_1.prisma.chatLog.findMany).not.toHaveBeenCalled();
        }));
        it('should not proceed if admin middleware fails', () => __awaiter(void 0, void 0, void 0, function* () {
            auth_1.authMiddleware.mockImplementation((req, res, next) => {
                req.user = Object.assign(Object.assign({}, test_data_1.testUser), { organization: test_data_1.testOrganization }); // Non-admin user
                next();
            });
            admin_2.adminMiddleware.mockImplementationOnce((req, res) => {
                res.status(403).json({ error: 'Insufficient permissions' });
            });
            const response = yield (0, supertest_1.default)(app)
                .get('/api/admin/chat-logs')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(403);
            expect(prisma_1.prisma.chatLog.findMany).not.toHaveBeenCalled();
        }));
    });
    describe('Performance and scalability', () => {
        it('should handle concurrent requests efficiently', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.chatLog.findMany.mockResolvedValue(mockChatLogs);
            const requests = Array.from({ length: 10 }, () => (0, supertest_1.default)(app)
                .get('/api/admin/chat-logs')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`));
            const responses = yield Promise.all(requests);
            responses.forEach((response) => {
                expect(response.status).toBe(200);
                expect(response.body).toHaveLength(3);
            });
            expect(prisma_1.prisma.chatLog.findMany).toHaveBeenCalledTimes(10);
        }));
        it('should handle memory-intensive operations for large datasets', () => __awaiter(void 0, void 0, void 0, function* () {
            // Simulate a large dataset
            const largeChatLogs = Array.from({ length: 10000 }, (_, index) => ({
                id: `chat-log-${index}`,
                question: `Question ${index}`,
                answer: `Answer ${index}`,
                sessionId: `session-${index}`,
                organizationId: test_data_1.testOrganization.id,
                createdAt: new Date(),
                updatedAt: new Date(),
                user: {
                    id: `user-${index}`,
                    email: `user${index}@example.com`,
                },
            }));
            prisma_1.prisma.chatLog.findMany.mockResolvedValue(largeChatLogs);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/admin/chat-logs')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body).toHaveLength(10000);
        }));
    });
    describe('Data integrity and validation', () => {
        it('should handle malformed date objects in chat logs', () => __awaiter(void 0, void 0, void 0, function* () {
            const malformedLogs = [
                Object.assign(Object.assign({}, mockChatLogs[0]), { createdAt: 'invalid-date', updatedAt: null }),
            ];
            prisma_1.prisma.chatLog.findMany.mockResolvedValue(malformedLogs);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/admin/chat-logs')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body[0].createdAt).toBe('invalid-date');
            expect(response.body[0].updatedAt).toBeNull();
        }));
        it('should handle null or undefined values in chat logs', () => __awaiter(void 0, void 0, void 0, function* () {
            const logsWithNulls = [
                {
                    id: 'chat-log-null',
                    question: null,
                    answer: undefined,
                    sessionId: 'session-null',
                    organizationId: test_data_1.testOrganization.id,
                    createdAt: new Date(),
                    updatedAt: new Date(),
                    user: null,
                },
            ];
            prisma_1.prisma.chatLog.findMany.mockResolvedValue(logsWithNulls);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/admin/chat-logs')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body[0].question).toBeNull();
            expect(response.body[0].user).toBeNull();
        }));
        it('should preserve data types in JSON serialization', () => __awaiter(void 0, void 0, void 0, function* () {
            var _a, _b, _c;
            const logsWithVariousTypes = [
                {
                    id: 'chat-log-types',
                    question: 'What is the meaning of life?',
                    answer: '42',
                    sessionId: 'session-types',
                    organizationId: test_data_1.testOrganization.id,
                    metadata: {
                        score: 0.95,
                        isRelevant: true,
                        tags: ['philosophy', 'humor'],
                        timestamp: 1642694400000,
                    },
                    createdAt: new Date('2024-01-15T10:00:00Z'),
                    updatedAt: new Date('2024-01-15T10:00:00Z'),
                    user: {
                        id: test_data_1.testUser.id,
                        email: test_data_1.testUser.email,
                    },
                },
            ];
            prisma_1.prisma.chatLog.findMany.mockResolvedValue(logsWithVariousTypes);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/admin/chat-logs')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(typeof response.body[0].id).toBe('string');
            expect(typeof ((_a = response.body[0].metadata) === null || _a === void 0 ? void 0 : _a.score)).toBe('number');
            expect(typeof ((_b = response.body[0].metadata) === null || _b === void 0 ? void 0 : _b.isRelevant)).toBe('boolean');
            expect(Array.isArray((_c = response.body[0].metadata) === null || _c === void 0 ? void 0 : _c.tags)).toBe(true);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,