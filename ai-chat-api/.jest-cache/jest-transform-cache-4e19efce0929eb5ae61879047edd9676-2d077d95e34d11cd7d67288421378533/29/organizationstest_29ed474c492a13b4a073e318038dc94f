938274d56663dd61f7e4862a063d3f49
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock dependencies
jest.mock('../../src/lib/prisma');
jest.mock('../../src/middleware/auth');
jest.mock('../../src/services/organizationService');
const supertest_1 = __importDefault(require("supertest"));
const express_1 = __importDefault(require("express"));
const organizations_1 = __importDefault(require("../../src/routes/organizations"));
const auth_1 = require("../../src/middleware/auth");
const test_data_1 = require("../fixtures/test-data");
const organizationService = __importStar(require("../../src/services/organizationService"));
describe('Organizations Routes', () => {
    let app;
    let mockOrganizationService;
    beforeEach(() => {
        app = (0, express_1.default)();
        app.use(express_1.default.json());
        app.use('/api/organizations', organizations_1.default);
        // Setup middleware mocks
        auth_1.authMiddleware.mockImplementation((req, res, next) => {
            req.user = Object.assign(Object.assign({}, test_data_1.testUser), { organization: test_data_1.testOrganization });
            next();
        });
        mockOrganizationService = organizationService;
        // Reset all mocks
        jest.clearAllMocks();
    });
    describe('GET /api/organizations', () => {
        it('should return user organizations with computed fields', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockOrganizations = [
                Object.assign(Object.assign({}, test_data_1.testOrganization), { _count: { users: 5 }, companies: [
                        Object.assign(Object.assign({}, test_data_1.testCompany), { plan: 'PRO', _count: { widgets: 3 } }),
                    ] }),
                {
                    id: 'org-2',
                    name: 'Test Organization 2',
                    slug: 'test-org-2',
                    createdAt: new Date('2024-01-01'),
                    updatedAt: new Date('2024-01-15'),
                    _count: { users: 2 },
                    companies: [
                        {
                            id: 'company-2',
                            name: 'Test Company 2',
                            plan: 'STARTER',
                            _count: { widgets: 1 },
                        },
                    ],
                },
            ];
            mockOrganizationService.getUserOrganizations.mockResolvedValue(mockOrganizations);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/organizations')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body).toHaveLength(2);
            expect(response.body[0]).toMatchObject({
                id: test_data_1.testOrganization.id,
                name: test_data_1.testOrganization.name,
                userCount: 5,
                widgetCount: 3,
                plan: 'PRO',
            });
            expect(response.body[1]).toMatchObject({
                id: 'org-2',
                name: 'Test Organization 2',
                userCount: 2,
                widgetCount: 1,
                plan: 'STARTER',
            });
            expect(mockOrganizationService.getUserOrganizations).toHaveBeenCalledWith(test_data_1.testUser.id);
        }));
        it('should handle organizations without companies', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockOrganizations = [
                Object.assign(Object.assign({}, test_data_1.testOrganization), { _count: { users: 1 }, companies: [] }),
            ];
            mockOrganizationService.getUserOrganizations.mockResolvedValue(mockOrganizations);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/organizations')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body[0]).toMatchObject({
                userCount: 1,
                widgetCount: 0,
                plan: 'free',
            });
        }));
        it('should handle service errors', () => __awaiter(void 0, void 0, void 0, function* () {
            mockOrganizationService.getUserOrganizations.mockRejectedValue(new Error('Database connection failed'));
            const response = yield (0, supertest_1.default)(app)
                .get('/api/organizations')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(500);
            expect(response.body).toEqual({
                error: 'Failed to fetch organizations',
            });
        }));
        it('should require authentication', () => __awaiter(void 0, void 0, void 0, function* () {
            auth_1.authMiddleware.mockImplementationOnce((req, res) => {
                res.status(401).json({ error: 'Unauthorized' });
            });
            const response = yield (0, supertest_1.default)(app).get('/api/organizations');
            expect(response.status).toBe(401);
            expect(response.body).toEqual({ error: 'Unauthorized' });
        }));
    });
    describe('GET /api/organizations/:id', () => {
        it('should return organization by ID', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockOrganization = Object.assign(Object.assign({}, test_data_1.testOrganization), { users: [
                    {
                        id: test_data_1.testUser.id,
                        email: test_data_1.testUser.email,
                        name: test_data_1.testUser.name,
                    },
                ], companies: [
                    Object.assign(Object.assign({}, test_data_1.testCompany), { widgets: [test_data_1.testWidget] }),
                ] });
            mockOrganizationService.getOrganizationById.mockResolvedValue(mockOrganization);
            const response = yield (0, supertest_1.default)(app)
                .get(`/api/organizations/${test_data_1.testOrganization.id}`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body).toMatchObject({
                id: test_data_1.testOrganization.id,
                name: test_data_1.testOrganization.name,
                users: expect.arrayContaining([
                    expect.objectContaining({
                        id: test_data_1.testUser.id,
                        email: test_data_1.testUser.email,
                    }),
                ]),
                companies: expect.arrayContaining([
                    expect.objectContaining({
                        id: test_data_1.testCompany.id,
                        name: test_data_1.testCompany.name,
                    }),
                ]),
            });
            expect(mockOrganizationService.getOrganizationById).toHaveBeenCalledWith(test_data_1.testOrganization.id, test_data_1.testUser.id);
        }));
        it('should return 404 for non-existent organization', () => __awaiter(void 0, void 0, void 0, function* () {
            mockOrganizationService.getOrganizationById.mockRejectedValue(new Error('Organization not found'));
            const response = yield (0, supertest_1.default)(app)
                .get('/api/organizations/non-existent-id')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(404);
            expect(response.body).toEqual({
                error: 'Organization not found',
            });
        }));
        it('should return 404 for access denied', () => __awaiter(void 0, void 0, void 0, function* () {
            mockOrganizationService.getOrganizationById.mockRejectedValue(new Error('Access denied to organization'));
            const response = yield (0, supertest_1.default)(app)
                .get(`/api/organizations/${test_data_1.testOrganization.id}`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(404);
            expect(response.body).toEqual({
                error: 'Access denied to organization',
            });
        }));
        it('should return 500 for other service errors', () => __awaiter(void 0, void 0, void 0, function* () {
            mockOrganizationService.getOrganizationById.mockRejectedValue(new Error('Database connection failed'));
            const response = yield (0, supertest_1.default)(app)
                .get(`/api/organizations/${test_data_1.testOrganization.id}`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(500);
            expect(response.body).toEqual({
                error: 'Database connection failed',
            });
        }));
    });
    describe('PUT /api/organizations/:id', () => {
        it('should update organization successfully', () => __awaiter(void 0, void 0, void 0, function* () {
            const updateData = {
                name: 'Updated Organization Name',
                settings: {
                    allowPublicWidgets: false,
                    maxUsersPerOrganization: 100,
                },
            };
            const mockUpdatedOrganization = Object.assign(Object.assign(Object.assign({}, test_data_1.testOrganization), updateData), { updatedAt: new Date('2024-02-01') });
            mockOrganizationService.updateOrganization.mockResolvedValue(mockUpdatedOrganization);
            const response = yield (0, supertest_1.default)(app)
                .put(`/api/organizations/${test_data_1.testOrganization.id}`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`)
                .send(updateData);
            expect(response.status).toBe(200);
            expect(response.body).toMatchObject({
                id: test_data_1.testOrganization.id,
                name: updateData.name,
                settings: updateData.settings,
            });
            expect(mockOrganizationService.updateOrganization).toHaveBeenCalledWith(test_data_1.testOrganization.id, test_data_1.testUser.id, updateData);
        }));
        it('should validate required fields', () => __awaiter(void 0, void 0, void 0, function* () {
            const invalidData = {
                name: '', // Empty name should be invalid
            };
            mockOrganizationService.updateOrganization.mockRejectedValue(new Error('Name is required'));
            const response = yield (0, supertest_1.default)(app)
                .put(`/api/organizations/${test_data_1.testOrganization.id}`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`)
                .send(invalidData);
            expect(response.status).toBe(500);
            expect(response.body).toEqual({
                error: 'Name is required',
            });
        }));
        it('should return 403 for insufficient permissions', () => __awaiter(void 0, void 0, void 0, function* () {
            mockOrganizationService.updateOrganization.mockRejectedValue(new Error('Insufficient permissions to update organization'));
            const response = yield (0, supertest_1.default)(app)
                .put(`/api/organizations/${test_data_1.testOrganization.id}`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`)
                .send({ name: 'New Name' });
            expect(response.status).toBe(403);
            expect(response.body).toEqual({
                error: 'Insufficient permissions to update organization',
            });
        }));
        it('should return 403 for organization not found', () => __awaiter(void 0, void 0, void 0, function* () {
            mockOrganizationService.updateOrganization.mockRejectedValue(new Error('Organization not found'));
            const response = yield (0, supertest_1.default)(app)
                .put('/api/organizations/non-existent-id')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`)
                .send({ name: 'New Name' });
            expect(response.status).toBe(403);
            expect(response.body).toEqual({
                error: 'Organization not found',
            });
        }));
        it('should handle malformed JSON', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = yield (0, supertest_1.default)(app)
                .put(`/api/organizations/${test_data_1.testOrganization.id}`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`)
                .set('Content-Type', 'application/json')
                .send('{ invalid json }');
            expect(response.status).toBe(400);
        }));
        it('should sanitize input data', () => __awaiter(void 0, void 0, void 0, function* () {
            const maliciousData = {
                name: 'Test Org <script>alert("xss")</script>',
                description: 'Description with <img src="x" onerror="alert(1)">',
            };
            const sanitizedData = {
                name: 'Test Org',
                description: 'Description with',
            };
            mockOrganizationService.updateOrganization.mockResolvedValue(Object.assign(Object.assign({}, test_data_1.testOrganization), sanitizedData));
            const response = yield (0, supertest_1.default)(app)
                .put(`/api/organizations/${test_data_1.testOrganization.id}`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`)
                .send(maliciousData);
            expect(response.status).toBe(200);
            // The service should handle sanitization
            expect(mockOrganizationService.updateOrganization).toHaveBeenCalledWith(test_data_1.testOrganization.id, test_data_1.testUser.id, maliciousData);
        }));
    });
    describe('GET /api/organizations/:id/stats', () => {
        it('should return organization statistics', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockStats = {
                totalUsers: 15,
                totalWidgets: 8,
                totalChats: 1250,
                totalQuestions: 980,
                avgResponseTime: 2.3,
                satisfactionRate: 0.87,
                monthlyUsage: {
                    chats: 450,
                    apiCalls: 2100,
                    storage: 1.2, // GB
                },
                topPerformingWidgets: [
                    {
                        id: test_data_1.testWidget.id,
                        name: test_data_1.testWidget.name,
                        chatCount: 350,
                        satisfactionRate: 0.92,
                    },
                ],
                recentActivity: {
                    newUsers: 3,
                    newWidgets: 1,
                    chatsToday: 45,
                },
            };
            mockOrganizationService.getOrganizationStats.mockResolvedValue(mockStats);
            const response = yield (0, supertest_1.default)(app)
                .get(`/api/organizations/${test_data_1.testOrganization.id}/stats`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body).toMatchObject({
                totalUsers: 15,
                totalWidgets: 8,
                totalChats: 1250,
                avgResponseTime: 2.3,
                satisfactionRate: 0.87,
                monthlyUsage: {
                    chats: 450,
                    apiCalls: 2100,
                    storage: 1.2,
                },
                topPerformingWidgets: expect.arrayContaining([
                    expect.objectContaining({
                        id: test_data_1.testWidget.id,
                        name: test_data_1.testWidget.name,
                        chatCount: 350,
                    }),
                ]),
                recentActivity: {
                    newUsers: 3,
                    newWidgets: 1,
                    chatsToday: 45,
                },
            });
            expect(mockOrganizationService.getOrganizationStats).toHaveBeenCalledWith(test_data_1.testOrganization.id);
        }));
        it('should handle stats calculation errors', () => __awaiter(void 0, void 0, void 0, function* () {
            mockOrganizationService.getOrganizationStats.mockRejectedValue(new Error('Failed to calculate stats'));
            const response = yield (0, supertest_1.default)(app)
                .get(`/api/organizations/${test_data_1.testOrganization.id}/stats`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(500);
            expect(response.body).toEqual({
                error: 'Failed to fetch organization stats',
            });
        }));
        it('should return empty stats for organization with no data', () => __awaiter(void 0, void 0, void 0, function* () {
            const emptyStats = {
                totalUsers: 0,
                totalWidgets: 0,
                totalChats: 0,
                totalQuestions: 0,
                avgResponseTime: 0,
                satisfactionRate: 0,
                monthlyUsage: {
                    chats: 0,
                    apiCalls: 0,
                    storage: 0,
                },
                topPerformingWidgets: [],
                recentActivity: {
                    newUsers: 0,
                    newWidgets: 0,
                    chatsToday: 0,
                },
            };
            mockOrganizationService.getOrganizationStats.mockResolvedValue(emptyStats);
            const response = yield (0, supertest_1.default)(app)
                .get(`/api/organizations/${test_data_1.testOrganization.id}/stats`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body).toMatchObject(emptyStats);
        }));
    });
    describe('Organizations access control', () => {
        it('should return 401 when not authenticated', () => __awaiter(void 0, void 0, void 0, function* () {
            auth_1.authMiddleware.mockImplementationOnce((req, res) => {
                res.status(401).json({ error: 'Unauthorized' });
            });
            const response = yield (0, supertest_1.default)(app).get('/api/organizations');
            expect(response.status).toBe(401);
            expect(response.body).toEqual({ error: 'Unauthorized' });
        }));
        it('should only return organizations accessible to the user', () => __awaiter(void 0, void 0, void 0, function* () {
            const userOrganizations = [test_data_1.testOrganization];
            mockOrganizationService.getUserOrganizations.mockResolvedValue(userOrganizations);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/organizations')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body).toHaveLength(1);
            expect(mockOrganizationService.getUserOrganizations).toHaveBeenCalledWith(test_data_1.testUser.id);
        }));
    });
    describe('Edge cases and error handling', () => {
        it('should handle malformed organization ID in params', () => __awaiter(void 0, void 0, void 0, function* () {
            mockOrganizationService.getOrganizationById.mockRejectedValue(new Error('Invalid organization ID format'));
            const response = yield (0, supertest_1.default)(app)
                .get('/api/organizations/invalid-uuid-format')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(500);
            expect(response.body).toEqual({
                error: 'Invalid organization ID format',
            });
        }));
        it('should handle concurrent update conflicts', () => __awaiter(void 0, void 0, void 0, function* () {
            mockOrganizationService.updateOrganization.mockRejectedValue(new Error('Organization was modified by another user'));
            const response = yield (0, supertest_1.default)(app)
                .put(`/api/organizations/${test_data_1.testOrganization.id}`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`)
                .send({ name: 'New Name' });
            expect(response.status).toBe(500);
            expect(response.body).toEqual({
                error: 'Organization was modified by another user',
            });
        }));
        it('should handle service timeouts gracefully', () => __awaiter(void 0, void 0, void 0, function* () {
            // Simulate timeout by never resolving
            mockOrganizationService.getUserOrganizations.mockImplementation(() => new Promise(() => { }) // Never resolves
            );
            const response = yield (0, supertest_1.default)(app)
                .get('/api/organizations')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`)
                .timeout(1000);
            // This would timeout in a real scenario
            // The test framework will handle the timeout
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,