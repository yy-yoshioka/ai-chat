{"version":3,"names":["cov_jaw416zxk","actualCoverage","openai_1","s","require","prisma_1","logger_1","openai","OpenAI","apiKey","process","env","OPENAI_API_KEY","improveResponse","params","f","feedbackId","messageId","feedback","originalQuery","originalResponse","widgetId","completion","chat","completions","create","model","messages","role","content","temperature","improvement","choices","message","logger","info","b","substring","similarMessages","prisma","chatLog","findMany","where","question","contains","split","take","length","pattern","frequency","error","exports"],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/services/trainingService.ts"],"sourcesContent":["import { OpenAI } from 'openai';\nimport { prisma } from '../lib/prisma';\nimport { logger } from '../lib/logger';\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\ninterface ImproveResponseParams {\n  feedbackId: string;\n  messageId: string;\n  feedback: string;\n  originalQuery: string;\n  originalResponse: string;\n  widgetId: string;\n}\n\nexport async function improveResponse(params: ImproveResponseParams) {\n  const {\n    feedbackId,\n    messageId,\n    feedback,\n    originalQuery,\n    originalResponse,\n    widgetId,\n  } = params;\n\n  try {\n    // 改善提案を生成\n    const completion = await openai.chat.completions.create({\n      model: 'gpt-4',\n      messages: [\n        {\n          role: 'system',\n          content: `あなたはカスタマーサポートの改善アドバイザーです。\nユーザーからのフィードバックを基に、より良い回答を提案してください。`,\n        },\n        {\n          role: 'user',\n          content: `\nユーザーの質問: ${originalQuery}\n現在の回答: ${originalResponse}\nユーザーのフィードバック: ${feedback}\n\nこのフィードバックを踏まえて、より良い回答を提案してください。\nまた、今後同様の質問に対する改善点も教えてください。`,\n        },\n      ],\n      temperature: 0.7,\n    });\n\n    const improvement = completion.choices[0].message.content;\n\n    // 改善提案を保存（新しいテーブルが必要な場合）\n    // TODO: ImprovementSuggestionテーブルを作成して保存\n\n    // ログに記録\n    logger.info('Improvement suggestion generated', {\n      feedbackId,\n      messageId,\n      improvement: improvement?.substring(0, 100) + '...',\n    });\n\n    // 類似の質問パターンを検索して、FAQや応答ルールの候補として提案\n    const similarMessages = await prisma.chatLog.findMany({\n      where: {\n        widgetId,\n        question: {\n          contains: originalQuery.split(' ')[0], // 簡易的な類似検索\n        },\n      },\n      take: 5,\n    });\n\n    if (similarMessages.length > 3) {\n      // FAQ候補として記録\n      logger.info('FAQ candidate detected', {\n        pattern: originalQuery,\n        frequency: similarMessages.length,\n      });\n    }\n  } catch (error) {\n    logger.error('Failed to generate improvement', { error, feedbackId });\n    throw error;\n  }\n}\n"],"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","ignoreList":[]}