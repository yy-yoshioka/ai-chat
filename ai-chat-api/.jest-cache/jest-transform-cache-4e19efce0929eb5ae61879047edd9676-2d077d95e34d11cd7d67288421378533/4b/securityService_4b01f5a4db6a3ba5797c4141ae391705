52da9b730a8ab4b8c6c01d30beb11ae7
"use strict";

/* istanbul ignore next */
function cov_1nu3ku576s() {
  var path = "/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/services/securityService.ts";
  var hash = "50d55a39adeb7b7bd185c88de6aa39d3d6292ec2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/services/securityService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 16
        },
        end: {
          line: 10,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 28
        },
        end: {
          line: 3,
          column: 110
        }
      },
      "2": {
        start: {
          line: 3,
          column: 91
        },
        end: {
          line: 3,
          column: 106
        }
      },
      "3": {
        start: {
          line: 4,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "4": {
        start: {
          line: 5,
          column: 36
        },
        end: {
          line: 5,
          column: 97
        }
      },
      "5": {
        start: {
          line: 5,
          column: 42
        },
        end: {
          line: 5,
          column: 70
        }
      },
      "6": {
        start: {
          line: 5,
          column: 85
        },
        end: {
          line: 5,
          column: 95
        }
      },
      "7": {
        start: {
          line: 6,
          column: 35
        },
        end: {
          line: 6,
          column: 100
        }
      },
      "8": {
        start: {
          line: 6,
          column: 41
        },
        end: {
          line: 6,
          column: 73
        }
      },
      "9": {
        start: {
          line: 6,
          column: 88
        },
        end: {
          line: 6,
          column: 98
        }
      },
      "10": {
        start: {
          line: 7,
          column: 32
        },
        end: {
          line: 7,
          column: 116
        }
      },
      "11": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 78
        }
      },
      "12": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 62
        }
      },
      "13": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 117
        }
      },
      "14": {
        start: {
          line: 13,
          column: 17
        },
        end: {
          line: 13,
          column: 41
        }
      },
      "15": {
        start: {
          line: 14,
          column: 17
        },
        end: {
          line: 14,
          column: 41
        }
      },
      "16": {
        start: {
          line: 15,
          column: 25
        },
        end: {
          line: 44,
          column: 2
        }
      },
      "17": {
        start: {
          line: 15,
          column: 35
        },
        end: {
          line: 44,
          column: 2
        }
      },
      "18": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 43,
          column: 5
        }
      },
      "19": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 30,
          column: 11
        }
      },
      "20": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "21": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 151
        }
      },
      "22": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 44
        }
      },
      "23": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 42,
          column: 11
        }
      },
      "24": {
        start: {
          line: 45,
          column: 0
        },
        end: {
          line: 45,
          column: 44
        }
      },
      "25": {
        start: {
          line: 46,
          column: 22
        },
        end: {
          line: 58,
          column: 2
        }
      },
      "26": {
        start: {
          line: 46,
          column: 32
        },
        end: {
          line: 58,
          column: 2
        }
      },
      "27": {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 57,
          column: 5
        }
      },
      "28": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 50,
          column: 11
        }
      },
      "29": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 56,
          column: 11
        }
      },
      "30": {
        start: {
          line: 59,
          column: 0
        },
        end: {
          line: 59,
          column: 38
        }
      },
      "31": {
        start: {
          line: 60,
          column: 32
        },
        end: {
          line: 92,
          column: 2
        }
      },
      "32": {
        start: {
          line: 60,
          column: 43
        },
        end: {
          line: 92,
          column: 2
        }
      },
      "33": {
        start: {
          line: 61,
          column: 4
        },
        end: {
          line: 62,
          column: 15
        }
      },
      "34": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 15
        }
      },
      "35": {
        start: {
          line: 63,
          column: 23
        },
        end: {
          line: 63,
          column: 33
        }
      },
      "36": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 64,
          column: 56
        }
      },
      "37": {
        start: {
          line: 66,
          column: 27
        },
        end: {
          line: 75,
          column: 6
        }
      },
      "38": {
        start: {
          line: 76,
          column: 4
        },
        end: {
          line: 91,
          column: 5
        }
      },
      "39": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 88,
          column: 11
        }
      },
      "40": {
        start: {
          line: 93,
          column: 26
        },
        end: {
          line: 171,
          column: 2
        }
      },
      "41": {
        start: {
          line: 93,
          column: 66
        },
        end: {
          line: 171,
          column: 2
        }
      },
      "42": {
        start: {
          line: 94,
          column: 91
        },
        end: {
          line: 150,
          column: 6
        }
      },
      "43": {
        start: {
          line: 151,
          column: 4
        },
        end: {
          line: 170,
          column: 6
        }
      },
      "44": {
        start: {
          line: 160,
          column: 46
        },
        end: {
          line: 163,
          column: 9
        }
      },
      "45": {
        start: {
          line: 165,
          column: 46
        },
        end: {
          line: 169,
          column: 9
        }
      },
      "46": {
        start: {
          line: 172,
          column: 0
        },
        end: {
          line: 172,
          column: 46
        }
      },
      "47": {
        start: {
          line: 173,
          column: 29
        },
        end: {
          line: 208,
          column: 2
        }
      },
      "48": {
        start: {
          line: 173,
          column: 49
        },
        end: {
          line: 208,
          column: 2
        }
      },
      "49": {
        start: {
          line: 174,
          column: 23
        },
        end: {
          line: 174,
          column: 33
        }
      },
      "50": {
        start: {
          line: 175,
          column: 4
        },
        end: {
          line: 175,
          column: 52
        }
      },
      "51": {
        start: {
          line: 177,
          column: 28
        },
        end: {
          line: 191,
          column: 6
        }
      },
      "52": {
        start: {
          line: 193,
          column: 30
        },
        end: {
          line: 203,
          column: 6
        }
      },
      "53": {
        start: {
          line: 204,
          column: 4
        },
        end: {
          line: 207,
          column: 6
        }
      },
      "54": {
        start: {
          line: 209,
          column: 0
        },
        end: {
          line: 209,
          column: 52
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 44
          },
          end: {
            line: 2,
            column: 45
          }
        },
        loc: {
          start: {
            line: 2,
            column: 89
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "adopt",
        decl: {
          start: {
            line: 3,
            column: 13
          },
          end: {
            line: 3,
            column: 18
          }
        },
        loc: {
          start: {
            line: 3,
            column: 26
          },
          end: {
            line: 3,
            column: 112
          }
        },
        line: 3
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 3,
            column: 70
          },
          end: {
            line: 3,
            column: 71
          }
        },
        loc: {
          start: {
            line: 3,
            column: 89
          },
          end: {
            line: 3,
            column: 108
          }
        },
        line: 3
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 4,
            column: 36
          },
          end: {
            line: 4,
            column: 37
          }
        },
        loc: {
          start: {
            line: 4,
            column: 63
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 4
      },
      "4": {
        name: "fulfilled",
        decl: {
          start: {
            line: 5,
            column: 17
          },
          end: {
            line: 5,
            column: 26
          }
        },
        loc: {
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 99
          }
        },
        line: 5
      },
      "5": {
        name: "rejected",
        decl: {
          start: {
            line: 6,
            column: 17
          },
          end: {
            line: 6,
            column: 25
          }
        },
        loc: {
          start: {
            line: 6,
            column: 33
          },
          end: {
            line: 6,
            column: 102
          }
        },
        line: 6
      },
      "6": {
        name: "step",
        decl: {
          start: {
            line: 7,
            column: 17
          },
          end: {
            line: 7,
            column: 21
          }
        },
        loc: {
          start: {
            line: 7,
            column: 30
          },
          end: {
            line: 7,
            column: 118
          }
        },
        line: 7
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 15,
            column: 25
          },
          end: {
            line: 15,
            column: 26
          }
        },
        loc: {
          start: {
            line: 15,
            column: 35
          },
          end: {
            line: 44,
            column: 2
          }
        },
        line: 15
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 15,
            column: 69
          },
          end: {
            line: 15,
            column: 70
          }
        },
        loc: {
          start: {
            line: 15,
            column: 82
          },
          end: {
            line: 44,
            column: 1
          }
        },
        line: 15
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 46,
            column: 22
          },
          end: {
            line: 46,
            column: 23
          }
        },
        loc: {
          start: {
            line: 46,
            column: 32
          },
          end: {
            line: 58,
            column: 2
          }
        },
        line: 46
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 46,
            column: 66
          },
          end: {
            line: 46,
            column: 67
          }
        },
        loc: {
          start: {
            line: 46,
            column: 79
          },
          end: {
            line: 58,
            column: 1
          }
        },
        line: 46
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 60,
            column: 32
          },
          end: {
            line: 60,
            column: 33
          }
        },
        loc: {
          start: {
            line: 60,
            column: 43
          },
          end: {
            line: 92,
            column: 2
          }
        },
        line: 60
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 60,
            column: 77
          },
          end: {
            line: 60,
            column: 78
          }
        },
        loc: {
          start: {
            line: 60,
            column: 90
          },
          end: {
            line: 92,
            column: 1
          }
        },
        line: 60
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 93,
            column: 26
          },
          end: {
            line: 93,
            column: 27
          }
        },
        loc: {
          start: {
            line: 93,
            column: 66
          },
          end: {
            line: 171,
            column: 2
          }
        },
        line: 93
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 93,
            column: 100
          },
          end: {
            line: 93,
            column: 101
          }
        },
        loc: {
          start: {
            line: 93,
            column: 113
          },
          end: {
            line: 171,
            column: 1
          }
        },
        line: 93
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 160,
            column: 35
          },
          end: {
            line: 160,
            column: 36
          }
        },
        loc: {
          start: {
            line: 160,
            column: 46
          },
          end: {
            line: 163,
            column: 9
          }
        },
        line: 160
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 165,
            column: 35
          },
          end: {
            line: 165,
            column: 36
          }
        },
        loc: {
          start: {
            line: 165,
            column: 46
          },
          end: {
            line: 169,
            column: 9
          }
        },
        line: 165
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 173,
            column: 29
          },
          end: {
            line: 173,
            column: 30
          }
        },
        loc: {
          start: {
            line: 173,
            column: 49
          },
          end: {
            line: 208,
            column: 2
          }
        },
        line: 173
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 173,
            column: 83
          },
          end: {
            line: 173,
            column: 84
          }
        },
        loc: {
          start: {
            line: 173,
            column: 96
          },
          end: {
            line: 208,
            column: 1
          }
        },
        line: 173
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 16
          },
          end: {
            line: 10,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 17
          },
          end: {
            line: 2,
            column: 21
          }
        }, {
          start: {
            line: 2,
            column: 25
          },
          end: {
            line: 2,
            column: 39
          }
        }, {
          start: {
            line: 2,
            column: 44
          },
          end: {
            line: 10,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 35
          },
          end: {
            line: 3,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 56
          },
          end: {
            line: 3,
            column: 61
          }
        }, {
          start: {
            line: 3,
            column: 64
          },
          end: {
            line: 3,
            column: 109
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 4,
            column: 16
          },
          end: {
            line: 4,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 16
          },
          end: {
            line: 4,
            column: 17
          }
        }, {
          start: {
            line: 4,
            column: 22
          },
          end: {
            line: 4,
            column: 33
          }
        }],
        line: 4
      },
      "3": {
        loc: {
          start: {
            line: 7,
            column: 32
          },
          end: {
            line: 7,
            column: 115
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 7,
            column: 67
          }
        }, {
          start: {
            line: 7,
            column: 70
          },
          end: {
            line: 7,
            column: 115
          }
        }],
        line: 7
      },
      "4": {
        loc: {
          start: {
            line: 8,
            column: 51
          },
          end: {
            line: 8,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 51
          },
          end: {
            line: 8,
            column: 61
          }
        }, {
          start: {
            line: 8,
            column: 65
          },
          end: {
            line: 8,
            column: 67
          }
        }],
        line: 8
      },
      "5": {
        loc: {
          start: {
            line: 28,
            column: 28
          },
          end: {
            line: 28,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 28
          },
          end: {
            line: 28,
            column: 43
          }
        }, {
          start: {
            line: 28,
            column: 47
          },
          end: {
            line: 28,
            column: 52
          }
        }],
        line: 28
      },
      "6": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "7": {
        loc: {
          start: {
            line: 32,
            column: 12
          },
          end: {
            line: 32,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 32,
            column: 12
          },
          end: {
            line: 32,
            column: 38
          }
        }, {
          start: {
            line: 32,
            column: 42
          },
          end: {
            line: 32,
            column: 72
          }
        }],
        line: 32
      },
      "8": {
        loc: {
          start: {
            line: 40,
            column: 19
          },
          end: {
            line: 40,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 40,
            column: 44
          },
          end: {
            line: 40,
            column: 57
          }
        }, {
          start: {
            line: 40,
            column: 60
          },
          end: {
            line: 40,
            column: 65
          }
        }],
        line: 40
      },
      "9": {
        loc: {
          start: {
            line: 54,
            column: 19
          },
          end: {
            line: 54,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 54,
            column: 44
          },
          end: {
            line: 54,
            column: 57
          }
        }, {
          start: {
            line: 54,
            column: 60
          },
          end: {
            line: 54,
            column: 65
          }
        }],
        line: 54
      },
      "10": {
        loc: {
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 62,
            column: 15
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 62,
            column: 15
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 61
      },
      "11": {
        loc: {
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 61,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 61,
            column: 21
          }
        }, {
          start: {
            line: 61,
            column: 25
          },
          end: {
            line: 61,
            column: 46
          }
        }],
        line: 61
      },
      "12": {
        loc: {
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 91,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 91,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "13": {
        loc: {
          start: {
            line: 156,
            column: 25
          },
          end: {
            line: 158,
            column: 23
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 157,
            column: 18
          },
          end: {
            line: 157,
            column: 81
          }
        }, {
          start: {
            line: 158,
            column: 18
          },
          end: {
            line: 158,
            column: 23
          }
        }],
        line: 156
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/services/securityService.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/services/securityService.ts"],
      sourcesContent: ["import { prisma } from '../lib/prisma';\nimport { logger } from '../lib/logger';\n\ninterface SecurityEventData {\n  organizationId?: string;\n  userId?: string;\n  action: string;\n  resource?: string;\n  resourceId?: string;\n  success: boolean;\n  ipAddress?: string;\n  userAgent?: string;\n  details?: Record<string, any>;\n  risk_level?: 'low' | 'medium' | 'high' | 'critical';\n}\n\ninterface DataAccessData {\n  organizationId: string;\n  userId?: string;\n  table_name: string;\n  operation: string;\n  record_ids: string[];\n  query_hash?: string;\n}\n\nexport const logSecurityEvent = async (data: SecurityEventData) => {\n  try {\n    await prisma.securityAuditLog.create({\n      data: {\n        organizationId: data.organizationId,\n        userId: data.userId,\n        action: data.action,\n        resource: data.resource,\n        resourceId: data.resourceId,\n        success: data.success,\n        ipAddress: data.ipAddress,\n        userAgent: data.userAgent,\n        details: data.details,\n        risk_level: data.risk_level || 'low',\n      },\n    });\n\n    // Log high-risk events to application logger\n    if (data.risk_level === 'high' || data.risk_level === 'critical') {\n      logger.warn('High-risk security event detected', {\n        ...data,\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    // Check for suspicious patterns\n    await checkSuspiciousActivity(data);\n  } catch (error) {\n    logger.error('Failed to log security event', {\n      error: error instanceof Error ? error.message : error,\n      eventData: data,\n    });\n  }\n};\n\nexport const logDataAccess = async (data: DataAccessData) => {\n  try {\n    await prisma.dataAccessLog.create({\n      data,\n    });\n  } catch (error) {\n    logger.error('Failed to log data access', {\n      error: error instanceof Error ? error.message : error,\n      accessData: data,\n    });\n  }\n};\n\nconst checkSuspiciousActivity = async (event: SecurityEventData) => {\n  if (!event.userId || !event.organizationId) return;\n\n  const timeWindow = new Date();\n  timeWindow.setMinutes(timeWindow.getMinutes() - 15); // 15 minutes\n\n  // Check for multiple failed attempts\n  const failedAttempts = await prisma.securityAuditLog.count({\n    where: {\n      userId: event.userId,\n      organizationId: event.organizationId,\n      success: false,\n      createdAt: {\n        gte: timeWindow,\n      },\n    },\n  });\n\n  if (failedAttempts >= 5) {\n    await logSecurityEvent({\n      organizationId: event.organizationId,\n      userId: event.userId,\n      action: 'suspicious_activity_detected',\n      success: true,\n      details: {\n        pattern: 'multiple_failed_attempts',\n        count: failedAttempts,\n        timeWindow: '15_minutes',\n      },\n      risk_level: 'critical',\n    });\n\n    // Could trigger additional security measures here\n    // e.g., temporary account lock, notification to admins\n  }\n};\n\nexport const getSecurityReport = async (\n  organizationId: string,\n  startDate: Date,\n  endDate: Date\n) => {\n  const [\n    totalEvents,\n    failedEvents,\n    highRiskEvents,\n    topActions,\n    topUsers,\n    dataAccess,\n  ] = await Promise.all([\n    // Total security events\n    prisma.securityAuditLog.count({\n      where: {\n        organizationId,\n        createdAt: { gte: startDate, lte: endDate },\n      },\n    }),\n\n    // Failed events\n    prisma.securityAuditLog.count({\n      where: {\n        organizationId,\n        success: false,\n        createdAt: { gte: startDate, lte: endDate },\n      },\n    }),\n\n    // High-risk events\n    prisma.securityAuditLog.count({\n      where: {\n        organizationId,\n        risk_level: { in: ['high', 'critical'] },\n        createdAt: { gte: startDate, lte: endDate },\n      },\n    }),\n\n    // Top actions\n    prisma.securityAuditLog.groupBy({\n      by: ['action'],\n      where: {\n        organizationId,\n        createdAt: { gte: startDate, lte: endDate },\n      },\n      _count: { action: true },\n      orderBy: { _count: { action: 'desc' } },\n      take: 10,\n    }),\n\n    // Top users by activity\n    prisma.securityAuditLog.groupBy({\n      by: ['userId'],\n      where: {\n        organizationId,\n        userId: { not: null },\n        createdAt: { gte: startDate, lte: endDate },\n      },\n      _count: { userId: true },\n      orderBy: { _count: { userId: 'desc' } },\n      take: 10,\n    }),\n\n    // Data access summary\n    prisma.dataAccessLog.groupBy({\n      by: ['table_name', 'operation'],\n      where: {\n        organizationId,\n        createdAt: { gte: startDate, lte: endDate },\n      },\n      _count: { table_name: true },\n    }),\n  ]);\n\n  return {\n    summary: {\n      totalEvents,\n      failedEvents,\n      highRiskEvents,\n      successRate:\n        totalEvents > 0\n          ? (((totalEvents - failedEvents) / totalEvents) * 100).toFixed(2)\n          : '100',\n    },\n    topActions: topActions.map((item) => ({\n      action: item.action,\n      count: item._count.action,\n    })),\n    topUsers,\n    dataAccess: dataAccess.map((item) => ({\n      table: item.table_name,\n      operation: item.operation,\n      count: item._count.table_name,\n    })),\n  };\n};\n\nexport const getAnomalousActivity = async (organizationId: string) => {\n  const timeWindow = new Date();\n  timeWindow.setHours(timeWindow.getHours() - 24); // Last 24 hours\n\n  // Users with unusual access patterns\n  const suspiciousUsers = await prisma.securityAuditLog.findMany({\n    where: {\n      organizationId,\n      createdAt: { gte: timeWindow },\n      OR: [\n        { risk_level: 'critical' },\n        { action: 'suspicious_activity_detected' },\n      ],\n    },\n    include: {\n      user: {\n        select: { email: true, name: true },\n      },\n    },\n  });\n\n  // Unusual data access patterns\n  const unusualDataAccess = await prisma.dataAccessLog.groupBy({\n    by: ['userId', 'table_name'],\n    where: {\n      organizationId,\n      createdAt: { gte: timeWindow },\n    },\n    _count: { table_name: true },\n    having: {\n      table_name: { _count: { gt: 100 } }, // More than 100 accesses\n    },\n  });\n\n  return {\n    suspiciousUsers,\n    unusualDataAccess,\n  };\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "50d55a39adeb7b7bd185c88de6aa39d3d6292ec2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1nu3ku576s = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1nu3ku576s();
var __awaiter =
/* istanbul ignore next */
(cov_1nu3ku576s().s[0]++,
/* istanbul ignore next */
(cov_1nu3ku576s().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1nu3ku576s().b[0][1]++, this.__awaiter) ||
/* istanbul ignore next */
(cov_1nu3ku576s().b[0][2]++, function (thisArg, _arguments, P, generator) {
  /* istanbul ignore next */
  cov_1nu3ku576s().f[0]++;
  function adopt(value) {
    /* istanbul ignore next */
    cov_1nu3ku576s().f[1]++;
    cov_1nu3ku576s().s[1]++;
    return value instanceof P ?
    /* istanbul ignore next */
    (cov_1nu3ku576s().b[1][0]++, value) :
    /* istanbul ignore next */
    (cov_1nu3ku576s().b[1][1]++, new P(function (resolve) {
      /* istanbul ignore next */
      cov_1nu3ku576s().f[2]++;
      cov_1nu3ku576s().s[2]++;
      resolve(value);
    }));
  }
  /* istanbul ignore next */
  cov_1nu3ku576s().s[3]++;
  return new (
  /* istanbul ignore next */
  (cov_1nu3ku576s().b[2][0]++, P) ||
  /* istanbul ignore next */
  (cov_1nu3ku576s().b[2][1]++, P = Promise))(function (resolve, reject) {
    /* istanbul ignore next */
    cov_1nu3ku576s().f[3]++;
    function fulfilled(value) {
      /* istanbul ignore next */
      cov_1nu3ku576s().f[4]++;
      cov_1nu3ku576s().s[4]++;
      try {
        /* istanbul ignore next */
        cov_1nu3ku576s().s[5]++;
        step(generator.next(value));
      } catch (e) {
        /* istanbul ignore next */
        cov_1nu3ku576s().s[6]++;
        reject(e);
      }
    }
    function rejected(value) {
      /* istanbul ignore next */
      cov_1nu3ku576s().f[5]++;
      cov_1nu3ku576s().s[7]++;
      try {
        /* istanbul ignore next */
        cov_1nu3ku576s().s[8]++;
        step(generator["throw"](value));
      } catch (e) {
        /* istanbul ignore next */
        cov_1nu3ku576s().s[9]++;
        reject(e);
      }
    }
    function step(result) {
      /* istanbul ignore next */
      cov_1nu3ku576s().f[6]++;
      cov_1nu3ku576s().s[10]++;
      result.done ?
      /* istanbul ignore next */
      (cov_1nu3ku576s().b[3][0]++, resolve(result.value)) :
      /* istanbul ignore next */
      (cov_1nu3ku576s().b[3][1]++, adopt(result.value).then(fulfilled, rejected));
    }
    /* istanbul ignore next */
    cov_1nu3ku576s().s[11]++;
    step((generator = generator.apply(thisArg,
    /* istanbul ignore next */
    (cov_1nu3ku576s().b[4][0]++, _arguments) ||
    /* istanbul ignore next */
    (cov_1nu3ku576s().b[4][1]++, []))).next());
  });
}));
/* istanbul ignore next */
cov_1nu3ku576s().s[12]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1nu3ku576s().s[13]++;
exports.getAnomalousActivity = exports.getSecurityReport = exports.logDataAccess = exports.logSecurityEvent = void 0;
const prisma_1 =
/* istanbul ignore next */
(cov_1nu3ku576s().s[14]++, require("../lib/prisma"));
const logger_1 =
/* istanbul ignore next */
(cov_1nu3ku576s().s[15]++, require("../lib/logger"));
/* istanbul ignore next */
cov_1nu3ku576s().s[16]++;
const logSecurityEvent = data => {
  /* istanbul ignore next */
  cov_1nu3ku576s().f[7]++;
  cov_1nu3ku576s().s[17]++;
  return __awaiter(void 0, void 0, void 0, function* () {
    /* istanbul ignore next */
    cov_1nu3ku576s().f[8]++;
    cov_1nu3ku576s().s[18]++;
    try {
      /* istanbul ignore next */
      cov_1nu3ku576s().s[19]++;
      yield prisma_1.prisma.securityAuditLog.create({
        data: {
          organizationId: data.organizationId,
          userId: data.userId,
          action: data.action,
          resource: data.resource,
          resourceId: data.resourceId,
          success: data.success,
          ipAddress: data.ipAddress,
          userAgent: data.userAgent,
          details: data.details,
          risk_level:
          /* istanbul ignore next */
          (cov_1nu3ku576s().b[5][0]++, data.risk_level) ||
          /* istanbul ignore next */
          (cov_1nu3ku576s().b[5][1]++, 'low')
        }
      });
      // Log high-risk events to application logger
      /* istanbul ignore next */
      cov_1nu3ku576s().s[20]++;
      if (
      /* istanbul ignore next */
      (cov_1nu3ku576s().b[7][0]++, data.risk_level === 'high') ||
      /* istanbul ignore next */
      (cov_1nu3ku576s().b[7][1]++, data.risk_level === 'critical')) {
        /* istanbul ignore next */
        cov_1nu3ku576s().b[6][0]++;
        cov_1nu3ku576s().s[21]++;
        logger_1.logger.warn('High-risk security event detected', Object.assign(Object.assign({}, data), {
          timestamp: new Date().toISOString()
        }));
      } else
      /* istanbul ignore next */
      {
        cov_1nu3ku576s().b[6][1]++;
      }
      // Check for suspicious patterns
      cov_1nu3ku576s().s[22]++;
      yield checkSuspiciousActivity(data);
    } catch (error) {
      /* istanbul ignore next */
      cov_1nu3ku576s().s[23]++;
      logger_1.logger.error('Failed to log security event', {
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1nu3ku576s().b[8][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1nu3ku576s().b[8][1]++, error),
        eventData: data
      });
    }
  });
};
/* istanbul ignore next */
cov_1nu3ku576s().s[24]++;
exports.logSecurityEvent = logSecurityEvent;
/* istanbul ignore next */
cov_1nu3ku576s().s[25]++;
const logDataAccess = data => {
  /* istanbul ignore next */
  cov_1nu3ku576s().f[9]++;
  cov_1nu3ku576s().s[26]++;
  return __awaiter(void 0, void 0, void 0, function* () {
    /* istanbul ignore next */
    cov_1nu3ku576s().f[10]++;
    cov_1nu3ku576s().s[27]++;
    try {
      /* istanbul ignore next */
      cov_1nu3ku576s().s[28]++;
      yield prisma_1.prisma.dataAccessLog.create({
        data
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1nu3ku576s().s[29]++;
      logger_1.logger.error('Failed to log data access', {
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1nu3ku576s().b[9][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1nu3ku576s().b[9][1]++, error),
        accessData: data
      });
    }
  });
};
/* istanbul ignore next */
cov_1nu3ku576s().s[30]++;
exports.logDataAccess = logDataAccess;
/* istanbul ignore next */
cov_1nu3ku576s().s[31]++;
const checkSuspiciousActivity = event => {
  /* istanbul ignore next */
  cov_1nu3ku576s().f[11]++;
  cov_1nu3ku576s().s[32]++;
  return __awaiter(void 0, void 0, void 0, function* () {
    /* istanbul ignore next */
    cov_1nu3ku576s().f[12]++;
    cov_1nu3ku576s().s[33]++;
    if (
    /* istanbul ignore next */
    (cov_1nu3ku576s().b[11][0]++, !event.userId) ||
    /* istanbul ignore next */
    (cov_1nu3ku576s().b[11][1]++, !event.organizationId)) {
      /* istanbul ignore next */
      cov_1nu3ku576s().b[10][0]++;
      cov_1nu3ku576s().s[34]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1nu3ku576s().b[10][1]++;
    }
    const timeWindow =
    /* istanbul ignore next */
    (cov_1nu3ku576s().s[35]++, new Date());
    /* istanbul ignore next */
    cov_1nu3ku576s().s[36]++;
    timeWindow.setMinutes(timeWindow.getMinutes() - 15); // 15 minutes
    // Check for multiple failed attempts
    const failedAttempts =
    /* istanbul ignore next */
    (cov_1nu3ku576s().s[37]++, yield prisma_1.prisma.securityAuditLog.count({
      where: {
        userId: event.userId,
        organizationId: event.organizationId,
        success: false,
        createdAt: {
          gte: timeWindow
        }
      }
    }));
    /* istanbul ignore next */
    cov_1nu3ku576s().s[38]++;
    if (failedAttempts >= 5) {
      /* istanbul ignore next */
      cov_1nu3ku576s().b[12][0]++;
      cov_1nu3ku576s().s[39]++;
      yield (0, exports.logSecurityEvent)({
        organizationId: event.organizationId,
        userId: event.userId,
        action: 'suspicious_activity_detected',
        success: true,
        details: {
          pattern: 'multiple_failed_attempts',
          count: failedAttempts,
          timeWindow: '15_minutes'
        },
        risk_level: 'critical'
      });
      // Could trigger additional security measures here
      // e.g., temporary account lock, notification to admins
    } else
    /* istanbul ignore next */
    {
      cov_1nu3ku576s().b[12][1]++;
    }
  });
};
/* istanbul ignore next */
cov_1nu3ku576s().s[40]++;
const getSecurityReport = (organizationId, startDate, endDate) => {
  /* istanbul ignore next */
  cov_1nu3ku576s().f[13]++;
  cov_1nu3ku576s().s[41]++;
  return __awaiter(void 0, void 0, void 0, function* () {
    /* istanbul ignore next */
    cov_1nu3ku576s().f[14]++;
    const [totalEvents, failedEvents, highRiskEvents, topActions, topUsers, dataAccess] =
    /* istanbul ignore next */
    (cov_1nu3ku576s().s[42]++, yield Promise.all([
    // Total security events
    prisma_1.prisma.securityAuditLog.count({
      where: {
        organizationId,
        createdAt: {
          gte: startDate,
          lte: endDate
        }
      }
    }),
    // Failed events
    prisma_1.prisma.securityAuditLog.count({
      where: {
        organizationId,
        success: false,
        createdAt: {
          gte: startDate,
          lte: endDate
        }
      }
    }),
    // High-risk events
    prisma_1.prisma.securityAuditLog.count({
      where: {
        organizationId,
        risk_level: {
          in: ['high', 'critical']
        },
        createdAt: {
          gte: startDate,
          lte: endDate
        }
      }
    }),
    // Top actions
    prisma_1.prisma.securityAuditLog.groupBy({
      by: ['action'],
      where: {
        organizationId,
        createdAt: {
          gte: startDate,
          lte: endDate
        }
      },
      _count: {
        action: true
      },
      orderBy: {
        _count: {
          action: 'desc'
        }
      },
      take: 10
    }),
    // Top users by activity
    prisma_1.prisma.securityAuditLog.groupBy({
      by: ['userId'],
      where: {
        organizationId,
        userId: {
          not: null
        },
        createdAt: {
          gte: startDate,
          lte: endDate
        }
      },
      _count: {
        userId: true
      },
      orderBy: {
        _count: {
          userId: 'desc'
        }
      },
      take: 10
    }),
    // Data access summary
    prisma_1.prisma.dataAccessLog.groupBy({
      by: ['table_name', 'operation'],
      where: {
        organizationId,
        createdAt: {
          gte: startDate,
          lte: endDate
        }
      },
      _count: {
        table_name: true
      }
    })]));
    /* istanbul ignore next */
    cov_1nu3ku576s().s[43]++;
    return {
      summary: {
        totalEvents,
        failedEvents,
        highRiskEvents,
        successRate: totalEvents > 0 ?
        /* istanbul ignore next */
        (cov_1nu3ku576s().b[13][0]++, ((totalEvents - failedEvents) / totalEvents * 100).toFixed(2)) :
        /* istanbul ignore next */
        (cov_1nu3ku576s().b[13][1]++, '100')
      },
      topActions: topActions.map(item => {
        /* istanbul ignore next */
        cov_1nu3ku576s().f[15]++;
        cov_1nu3ku576s().s[44]++;
        return {
          action: item.action,
          count: item._count.action
        };
      }),
      topUsers,
      dataAccess: dataAccess.map(item => {
        /* istanbul ignore next */
        cov_1nu3ku576s().f[16]++;
        cov_1nu3ku576s().s[45]++;
        return {
          table: item.table_name,
          operation: item.operation,
          count: item._count.table_name
        };
      })
    };
  });
};
/* istanbul ignore next */
cov_1nu3ku576s().s[46]++;
exports.getSecurityReport = getSecurityReport;
/* istanbul ignore next */
cov_1nu3ku576s().s[47]++;
const getAnomalousActivity = organizationId => {
  /* istanbul ignore next */
  cov_1nu3ku576s().f[17]++;
  cov_1nu3ku576s().s[48]++;
  return __awaiter(void 0, void 0, void 0, function* () {
    /* istanbul ignore next */
    cov_1nu3ku576s().f[18]++;
    const timeWindow =
    /* istanbul ignore next */
    (cov_1nu3ku576s().s[49]++, new Date());
    /* istanbul ignore next */
    cov_1nu3ku576s().s[50]++;
    timeWindow.setHours(timeWindow.getHours() - 24); // Last 24 hours
    // Users with unusual access patterns
    const suspiciousUsers =
    /* istanbul ignore next */
    (cov_1nu3ku576s().s[51]++, yield prisma_1.prisma.securityAuditLog.findMany({
      where: {
        organizationId,
        createdAt: {
          gte: timeWindow
        },
        OR: [{
          risk_level: 'critical'
        }, {
          action: 'suspicious_activity_detected'
        }]
      },
      include: {
        user: {
          select: {
            email: true,
            name: true
          }
        }
      }
    }));
    // Unusual data access patterns
    const unusualDataAccess =
    /* istanbul ignore next */
    (cov_1nu3ku576s().s[52]++, yield prisma_1.prisma.dataAccessLog.groupBy({
      by: ['userId', 'table_name'],
      where: {
        organizationId,
        createdAt: {
          gte: timeWindow
        }
      },
      _count: {
        table_name: true
      },
      having: {
        table_name: {
          _count: {
            gt: 100
          }
        } // More than 100 accesses
      }
    }));
    /* istanbul ignore next */
    cov_1nu3ku576s().s[53]++;
    return {
      suspiciousUsers,
      unusualDataAccess
    };
  });
};
/* istanbul ignore next */
cov_1nu3ku576s().s[54]++;
exports.getAnomalousActivity = getAnomalousActivity;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,