{"version":3,"names":["cov_1nu3ku576s","actualCoverage","prisma_1","s","require","logger_1","logSecurityEvent","data","f","__awaiter","prisma","securityAuditLog","create","organizationId","userId","action","resource","resourceId","success","ipAddress","userAgent","details","risk_level","b","logger","warn","Object","assign","timestamp","Date","toISOString","checkSuspiciousActivity","error","Error","message","eventData","exports","logDataAccess","dataAccessLog","accessData","event","timeWindow","setMinutes","getMinutes","failedAttempts","count","where","createdAt","gte","pattern","getSecurityReport","startDate","endDate","totalEvents","failedEvents","highRiskEvents","topActions","topUsers","dataAccess","Promise","all","lte","in","groupBy","by","_count","orderBy","take","not","table_name","summary","successRate","toFixed","map","item","table","operation","getAnomalousActivity","setHours","getHours","suspiciousUsers","findMany","OR","include","user","select","email","name","unusualDataAccess","having","gt"],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/services/securityService.ts"],"sourcesContent":["import { prisma } from '../lib/prisma';\nimport { logger } from '../lib/logger';\n\ninterface SecurityEventData {\n  organizationId?: string;\n  userId?: string;\n  action: string;\n  resource?: string;\n  resourceId?: string;\n  success: boolean;\n  ipAddress?: string;\n  userAgent?: string;\n  details?: Record<string, any>;\n  risk_level?: 'low' | 'medium' | 'high' | 'critical';\n}\n\ninterface DataAccessData {\n  organizationId: string;\n  userId?: string;\n  table_name: string;\n  operation: string;\n  record_ids: string[];\n  query_hash?: string;\n}\n\nexport const logSecurityEvent = async (data: SecurityEventData) => {\n  try {\n    await prisma.securityAuditLog.create({\n      data: {\n        organizationId: data.organizationId,\n        userId: data.userId,\n        action: data.action,\n        resource: data.resource,\n        resourceId: data.resourceId,\n        success: data.success,\n        ipAddress: data.ipAddress,\n        userAgent: data.userAgent,\n        details: data.details,\n        risk_level: data.risk_level || 'low',\n      },\n    });\n\n    // Log high-risk events to application logger\n    if (data.risk_level === 'high' || data.risk_level === 'critical') {\n      logger.warn('High-risk security event detected', {\n        ...data,\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    // Check for suspicious patterns\n    await checkSuspiciousActivity(data);\n  } catch (error) {\n    logger.error('Failed to log security event', {\n      error: error instanceof Error ? error.message : error,\n      eventData: data,\n    });\n  }\n};\n\nexport const logDataAccess = async (data: DataAccessData) => {\n  try {\n    await prisma.dataAccessLog.create({\n      data,\n    });\n  } catch (error) {\n    logger.error('Failed to log data access', {\n      error: error instanceof Error ? error.message : error,\n      accessData: data,\n    });\n  }\n};\n\nconst checkSuspiciousActivity = async (event: SecurityEventData) => {\n  if (!event.userId || !event.organizationId) return;\n\n  const timeWindow = new Date();\n  timeWindow.setMinutes(timeWindow.getMinutes() - 15); // 15 minutes\n\n  // Check for multiple failed attempts\n  const failedAttempts = await prisma.securityAuditLog.count({\n    where: {\n      userId: event.userId,\n      organizationId: event.organizationId,\n      success: false,\n      createdAt: {\n        gte: timeWindow,\n      },\n    },\n  });\n\n  if (failedAttempts >= 5) {\n    await logSecurityEvent({\n      organizationId: event.organizationId,\n      userId: event.userId,\n      action: 'suspicious_activity_detected',\n      success: true,\n      details: {\n        pattern: 'multiple_failed_attempts',\n        count: failedAttempts,\n        timeWindow: '15_minutes',\n      },\n      risk_level: 'critical',\n    });\n\n    // Could trigger additional security measures here\n    // e.g., temporary account lock, notification to admins\n  }\n};\n\nexport const getSecurityReport = async (\n  organizationId: string,\n  startDate: Date,\n  endDate: Date\n) => {\n  const [\n    totalEvents,\n    failedEvents,\n    highRiskEvents,\n    topActions,\n    topUsers,\n    dataAccess,\n  ] = await Promise.all([\n    // Total security events\n    prisma.securityAuditLog.count({\n      where: {\n        organizationId,\n        createdAt: { gte: startDate, lte: endDate },\n      },\n    }),\n\n    // Failed events\n    prisma.securityAuditLog.count({\n      where: {\n        organizationId,\n        success: false,\n        createdAt: { gte: startDate, lte: endDate },\n      },\n    }),\n\n    // High-risk events\n    prisma.securityAuditLog.count({\n      where: {\n        organizationId,\n        risk_level: { in: ['high', 'critical'] },\n        createdAt: { gte: startDate, lte: endDate },\n      },\n    }),\n\n    // Top actions\n    prisma.securityAuditLog.groupBy({\n      by: ['action'],\n      where: {\n        organizationId,\n        createdAt: { gte: startDate, lte: endDate },\n      },\n      _count: { action: true },\n      orderBy: { _count: { action: 'desc' } },\n      take: 10,\n    }),\n\n    // Top users by activity\n    prisma.securityAuditLog.groupBy({\n      by: ['userId'],\n      where: {\n        organizationId,\n        userId: { not: null },\n        createdAt: { gte: startDate, lte: endDate },\n      },\n      _count: { userId: true },\n      orderBy: { _count: { userId: 'desc' } },\n      take: 10,\n    }),\n\n    // Data access summary\n    prisma.dataAccessLog.groupBy({\n      by: ['table_name', 'operation'],\n      where: {\n        organizationId,\n        createdAt: { gte: startDate, lte: endDate },\n      },\n      _count: { table_name: true },\n    }),\n  ]);\n\n  return {\n    summary: {\n      totalEvents,\n      failedEvents,\n      highRiskEvents,\n      successRate:\n        totalEvents > 0\n          ? (((totalEvents - failedEvents) / totalEvents) * 100).toFixed(2)\n          : '100',\n    },\n    topActions: topActions.map((item) => ({\n      action: item.action,\n      count: item._count.action,\n    })),\n    topUsers,\n    dataAccess: dataAccess.map((item) => ({\n      table: item.table_name,\n      operation: item.operation,\n      count: item._count.table_name,\n    })),\n  };\n};\n\nexport const getAnomalousActivity = async (organizationId: string) => {\n  const timeWindow = new Date();\n  timeWindow.setHours(timeWindow.getHours() - 24); // Last 24 hours\n\n  // Users with unusual access patterns\n  const suspiciousUsers = await prisma.securityAuditLog.findMany({\n    where: {\n      organizationId,\n      createdAt: { gte: timeWindow },\n      OR: [\n        { risk_level: 'critical' },\n        { action: 'suspicious_activity_detected' },\n      ],\n    },\n    include: {\n      user: {\n        select: { email: true, name: true },\n      },\n    },\n  });\n\n  // Unusual data access patterns\n  const unusualDataAccess = await prisma.dataAccessLog.groupBy({\n    by: ['userId', 'table_name'],\n    where: {\n      organizationId,\n      createdAt: { gte: timeWindow },\n    },\n    _count: { table_name: true },\n    having: {\n      table_name: { _count: { gt: 100 } }, // More than 100 accesses\n    },\n  });\n\n  return {\n    suspiciousUsers,\n    unusualDataAccess,\n  };\n};\n"],"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","ignoreList":[]}