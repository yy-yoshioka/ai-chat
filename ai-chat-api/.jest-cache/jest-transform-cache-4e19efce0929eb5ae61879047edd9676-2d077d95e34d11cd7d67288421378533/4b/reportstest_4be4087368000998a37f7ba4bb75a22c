c554605043c0407695c87c8328c4758d
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const supertest_1 = __importDefault(require("supertest"));
const app_1 = __importDefault(require("../../src/app"));
const prisma_1 = require("../../src/lib/prisma");
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const client_1 = require("@prisma/client");
describe('Reports Routes', () => {
    let authToken;
    let userId;
    let organizationId;
    let widgetId;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        // Create test organization
        const organization = yield prisma_1.prisma.organization.create({
            data: {
                name: 'Test Organization',
                slug: 'test-org',
            },
        });
        organizationId = organization.id;
        // Create test company
        const company = yield prisma_1.prisma.company.create({
            data: {
                name: 'Test Company',
                email: 'company@example.com',
                organizationId,
            },
        });
        // Create test widget
        const widget = yield prisma_1.prisma.widget.create({
            data: {
                widgetKey: 'test-widget',
                name: 'Test Widget',
                companyId: company.id,
            },
        });
        widgetId = widget.id;
        // Create test user
        const user = yield prisma_1.prisma.user.create({
            data: {
                email: 'test@example.com',
                password: 'hashed_password',
                name: 'Test User',
                roles: [client_1.Role.org_admin],
                organizationId,
            },
        });
        userId = user.id;
        authToken = jsonwebtoken_1.default.sign({ userId: user.id, email: user.email }, process.env.JWT_SECRET, { expiresIn: '1d' });
        // Create test chat logs
        const yesterday = new Date();
        yesterday.setDate(yesterday.getDate() - 1);
        const weekAgo = new Date();
        weekAgo.setDate(weekAgo.getDate() - 7);
        yield prisma_1.prisma.chatLog.createMany({
            data: [
                {
                    userId,
                    widgetId,
                    question: 'How do I reset my password?',
                    answer: 'You can reset your password from the settings page.',
                    tokens: 15,
                    createdAt: new Date(),
                },
                {
                    userId,
                    widgetId,
                    question: 'What are your business hours?',
                    answer: 'We are open Monday to Friday, 9 AM to 5 PM.',
                    tokens: 12,
                    createdAt: yesterday,
                },
                {
                    userId,
                    widgetId,
                    question: 'How can I contact support?',
                    answer: 'You can contact support at support@example.com.',
                    tokens: 10,
                    createdAt: weekAgo,
                },
            ],
        });
    }));
    describe('GET /api/reports/summary', () => {
        it('should return report summary for default period', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = yield (0, supertest_1.default)(app_1.default)
                .get('/api/reports/summary')
                .set('Cookie', `auth-token=${authToken}`);
            expect(response.status).toBe(200);
            expect(response.body).toHaveProperty('totalChats');
            expect(response.body).toHaveProperty('uniqueUsers');
            expect(response.body).toHaveProperty('totalTokens');
            expect(response.body).toHaveProperty('avgTokensPerChat');
            expect(response.body).toHaveProperty('topQuestions');
            expect(response.body.topQuestions).toBeInstanceOf(Array);
        }));
        it('should filter by date range', () => __awaiter(void 0, void 0, void 0, function* () {
            const startDate = new Date();
            startDate.setDate(startDate.getDate() - 2);
            const endDate = new Date();
            const response = yield (0, supertest_1.default)(app_1.default)
                .get('/api/reports/summary')
                .set('Cookie', `auth-token=${authToken}`)
                .query({
                startDate: startDate.toISOString(),
                endDate: endDate.toISOString(),
            });
            expect(response.status).toBe(200);
            expect(response.body.totalChats).toBe(2); // Only today and yesterday
        }));
        it('should filter by widget', () => __awaiter(void 0, void 0, void 0, function* () {
            // Create another widget with no chats
            const anotherWidget = yield prisma_1.prisma.widget.create({
                data: {
                    widgetKey: 'another-widget',
                    name: 'Another Widget',
                    companyId: (yield prisma_1.prisma.company.findFirst()).id,
                },
            });
            const response = yield (0, supertest_1.default)(app_1.default)
                .get('/api/reports/summary')
                .set('Cookie', `auth-token=${authToken}`)
                .query({ widgetId });
            expect(response.status).toBe(200);
            expect(response.body.totalChats).toBe(3);
        }));
    });
    describe('GET /api/reports/chart', () => {
        it('should return chart data grouped by day', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = yield (0, supertest_1.default)(app_1.default)
                .get('/api/reports/chart')
                .set('Cookie', `auth-token=${authToken}`)
                .query({ groupBy: 'day' });
            expect(response.status).toBe(200);
            expect(response.body).toHaveProperty('data');
            expect(response.body.data).toBeInstanceOf(Array);
            expect(response.body.data.length).toBeGreaterThan(0);
            response.body.data.forEach((item) => {
                expect(item).toHaveProperty('date');
                expect(item).toHaveProperty('count');
                expect(item).toHaveProperty('tokens');
            });
        }));
        it('should support grouping by hour', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = yield (0, supertest_1.default)(app_1.default)
                .get('/api/reports/chart')
                .set('Cookie', `auth-token=${authToken}`)
                .query({ groupBy: 'hour' });
            expect(response.status).toBe(200);
            expect(response.body.data).toBeInstanceOf(Array);
        }));
        it('should support grouping by week', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = yield (0, supertest_1.default)(app_1.default)
                .get('/api/reports/chart')
                .set('Cookie', `auth-token=${authToken}`)
                .query({ groupBy: 'week' });
            expect(response.status).toBe(200);
            expect(response.body.data).toBeInstanceOf(Array);
        }));
        it('should support grouping by month', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = yield (0, supertest_1.default)(app_1.default)
                .get('/api/reports/chart')
                .set('Cookie', `auth-token=${authToken}`)
                .query({ groupBy: 'month' });
            expect(response.status).toBe(200);
            expect(response.body.data).toBeInstanceOf(Array);
        }));
    });
    describe('GET /api/reports/csv', () => {
        it('should export report data as CSV', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = yield (0, supertest_1.default)(app_1.default)
                .get('/api/reports/csv')
                .set('Cookie', `auth-token=${authToken}`);
            expect(response.status).toBe(200);
            expect(response.headers['content-type']).toContain('text/csv');
            expect(response.headers['content-disposition']).toContain('attachment');
            expect(response.headers['content-disposition']).toContain('chat-report');
            // Check CSV content
            const csvLines = response.text.split('\n');
            expect(csvLines.length).toBeGreaterThan(1); // Header + data
            expect(csvLines[0]).toContain('Date');
            expect(csvLines[0]).toContain('User');
            expect(csvLines[0]).toContain('Question');
        }));
        it('should include date range in filename', () => __awaiter(void 0, void 0, void 0, function* () {
            const startDate = new Date();
            startDate.setDate(startDate.getDate() - 7);
            const response = yield (0, supertest_1.default)(app_1.default)
                .get('/api/reports/csv')
                .set('Cookie', `auth-token=${authToken}`)
                .query({ startDate: startDate.toISOString() });
            expect(response.status).toBe(200);
            expect(response.headers['content-disposition']).toContain('chat-report');
        }));
        it('should handle empty results', () => __awaiter(void 0, void 0, void 0, function* () {
            // Query for future dates to get empty results
            const futureDate = new Date();
            futureDate.setFullYear(futureDate.getFullYear() + 1);
            const response = yield (0, supertest_1.default)(app_1.default)
                .get('/api/reports/csv')
                .set('Cookie', `auth-token=${authToken}`)
                .query({
                startDate: futureDate.toISOString(),
                endDate: futureDate.toISOString(),
            });
            expect(response.status).toBe(200);
            expect(response.headers['content-type']).toContain('text/csv');
            const csvLines = response.text.split('\n').filter((line) => line.trim());
            expect(csvLines.length).toBe(1); // Only header
        }));
    });
    describe('Error handling', () => {
        it('should return 401 for unauthenticated requests', () => __awaiter(void 0, void 0, void 0, function* () {
            const endpoints = ['/summary', '/chart', '/csv'];
            for (const endpoint of endpoints) {
                const response = yield (0, supertest_1.default)(app_1.default).get(`/api/reports${endpoint}`);
                expect(response.status).toBe(401);
            }
        }));
        it('should handle database errors gracefully', () => __awaiter(void 0, void 0, void 0, function* () {
            jest
                .spyOn(prisma_1.prisma.chatLog, 'count')
                .mockRejectedValueOnce(new Error('DB Error'));
            const response = yield (0, supertest_1.default)(app_1.default)
                .get('/api/reports/summary')
                .set('Cookie', `auth-token=${authToken}`);
            expect(response.status).toBe(500);
            expect(response.body).toHaveProperty('error');
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,