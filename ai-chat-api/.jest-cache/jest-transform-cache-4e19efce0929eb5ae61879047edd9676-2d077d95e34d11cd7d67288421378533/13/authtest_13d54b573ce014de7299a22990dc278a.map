{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/routes/auth.test.ts","mappings":"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","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/routes/auth.test.ts"],"sourcesContent":["import request from 'supertest';\nimport express from 'express';\nimport { prisma } from '../../src/lib/prisma';\nimport authRouter from '../../src/routes/auth';\nimport { signToken } from '../../src/utils/jwt';\nimport { hashPassword, verifyPassword } from '../../src/utils/password';\nimport {\n  testUser,\n  testOrganization,\n  testPasswordHash,\n} from '../fixtures/test-data';\n\n// Mock dependencies\njest.mock('../../src/lib/prisma');\njest.mock('../../src/utils/jwt');\njest.mock('../../src/utils/password');\n\n// Create Express app for testing\nconst app = express();\napp.use(express.json());\napp.use('/auth', authRouter);\n\ndescribe('Auth Routes', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('POST /auth/login', () => {\n    it('should login successfully with valid credentials', async () => {\n      const mockUser = { ...testUser, organization: testOrganization };\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue(mockUser);\n      (verifyPassword as jest.Mock).mockResolvedValue(true);\n      (signToken as jest.Mock).mockImplementation((payload, res) => {\n        res.cookie('jwt', 'mock-token');\n      });\n\n      const response = await request(app).post('/auth/login').send({\n        email: 'test@example.com',\n        password: 'password123',\n      });\n\n      expect(response.status).toBe(200);\n      expect(response.body.message).toBe('Login successful');\n      expect(response.body.user).toBeDefined();\n      expect(response.body.user.password).toBeUndefined();\n      expect(prisma.user.findUnique).toHaveBeenCalledWith({\n        where: { email: 'test@example.com' },\n        include: { organization: true },\n      });\n      expect(verifyPassword).toHaveBeenCalledWith(\n        'password123',\n        testPasswordHash\n      );\n    });\n\n    it('should return 400 if email is missing', async () => {\n      const response = await request(app).post('/auth/login').send({\n        password: 'password123',\n      });\n\n      expect(response.status).toBe(400);\n      expect(response.body.message).toBe('Email and password are required');\n    });\n\n    it('should return 400 if password is missing', async () => {\n      const response = await request(app).post('/auth/login').send({\n        email: 'test@example.com',\n      });\n\n      expect(response.status).toBe(400);\n      expect(response.body.message).toBe('Email and password are required');\n    });\n\n    it('should return 401 if user does not exist', async () => {\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue(null);\n\n      const response = await request(app).post('/auth/login').send({\n        email: 'nonexistent@example.com',\n        password: 'password123',\n      });\n\n      expect(response.status).toBe(401);\n      expect(response.body.message).toBe('Invalid credentials');\n    });\n\n    it('should return 401 if password is incorrect', async () => {\n      const mockUser = { ...testUser, organization: testOrganization };\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue(mockUser);\n      (verifyPassword as jest.Mock).mockResolvedValue(false);\n\n      const response = await request(app).post('/auth/login').send({\n        email: 'test@example.com',\n        password: 'wrongpassword',\n      });\n\n      expect(response.status).toBe(401);\n      expect(response.body.message).toBe('Invalid credentials');\n    });\n\n    it('should update last login time', async () => {\n      const mockUser = { ...testUser, organization: testOrganization };\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue(mockUser);\n      (prisma.user.update as jest.Mock).mockResolvedValue(mockUser);\n      (verifyPassword as jest.Mock).mockResolvedValue(true);\n      (signToken as jest.Mock).mockImplementation((payload, res) => {\n        res.cookie('jwt', 'mock-token');\n      });\n\n      await request(app).post('/auth/login').send({\n        email: 'test@example.com',\n        password: 'password123',\n      });\n\n      expect(prisma.user.update).toHaveBeenCalledWith({\n        where: { id: testUser.id },\n        data: { lastLoginAt: expect.any(Date) },\n      });\n    });\n\n    it('should handle database errors gracefully', async () => {\n      (prisma.user.findUnique as jest.Mock).mockRejectedValue(\n        new Error('Database error')\n      );\n\n      const response = await request(app).post('/auth/login').send({\n        email: 'test@example.com',\n        password: 'password123',\n      });\n\n      expect(response.status).toBe(500);\n      expect(response.body.message).toBe('Login failed');\n    });\n  });\n\n  describe('POST /auth/signup', () => {\n    it('should create a new user and organization successfully', async () => {\n      const newUser = {\n        id: 'new-user-id',\n        email: 'newuser@example.com',\n        name: 'New User',\n        password: 'hashedPassword',\n        roles: ['ADMIN'],\n        organizationId: 'new-org-id',\n        emailVerified: false,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      const newOrg = {\n        id: 'new-org-id',\n        name: 'New Organization',\n        slug: 'new-organization',\n        plan: 'TRIAL',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue(null);\n      (prisma.organization.create as jest.Mock).mockResolvedValue({\n        ...newOrg,\n        users: {\n          create: newUser,\n        },\n      });\n      (hashPassword as jest.Mock).mockResolvedValue('hashedPassword');\n      (signToken as jest.Mock).mockImplementation((payload, res) => {\n        res.cookie('jwt', 'mock-token');\n      });\n\n      const response = await request(app).post('/auth/signup').send({\n        email: 'newuser@example.com',\n        password: 'password123',\n        name: 'New User',\n        organizationName: 'New Organization',\n      });\n\n      expect(response.status).toBe(201);\n      expect(response.body.message).toBe('User created successfully');\n      expect(response.body.user).toBeDefined();\n      expect(response.body.user.password).toBeUndefined();\n      expect(prisma.organization.create).toHaveBeenCalledWith({\n        data: {\n          name: 'New Organization',\n          slug: 'new-organization',\n          plan: 'TRIAL',\n          trialEndsAt: expect.any(Date),\n          users: {\n            create: {\n              email: 'newuser@example.com',\n              password: 'hashedPassword',\n              name: 'New User',\n              roles: ['ADMIN'],\n              emailVerificationToken: expect.any(String),\n            },\n          },\n        },\n        include: {\n          users: true,\n        },\n      });\n    });\n\n    it('should return 400 if required fields are missing', async () => {\n      const testCases = [\n        { password: 'password123', name: 'Test', organizationName: 'Org' },\n        { email: 'test@example.com', name: 'Test', organizationName: 'Org' },\n        { email: 'test@example.com', password: 'password123', name: 'Test' },\n      ];\n\n      for (const testData of testCases) {\n        const response = await request(app).post('/auth/signup').send(testData);\n        expect(response.status).toBe(400);\n        expect(response.body.message).toContain('required');\n      }\n    });\n\n    it('should return 409 if user already exists', async () => {\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue(testUser);\n\n      const response = await request(app).post('/auth/signup').send({\n        email: 'test@example.com',\n        password: 'password123',\n        name: 'Test User',\n        organizationName: 'Test Org',\n      });\n\n      expect(response.status).toBe(409);\n      expect(response.body.message).toBe('User already exists');\n    });\n\n    it('should validate email format', async () => {\n      const response = await request(app).post('/auth/signup').send({\n        email: 'invalid-email',\n        password: 'password123',\n        name: 'Test User',\n        organizationName: 'Test Org',\n      });\n\n      expect(response.status).toBe(400);\n      expect(response.body.message).toContain('Invalid email');\n    });\n\n    it('should validate password strength', async () => {\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue(null);\n\n      const response = await request(app).post('/auth/signup').send({\n        email: 'test@example.com',\n        password: '123', // Too weak\n        name: 'Test User',\n        organizationName: 'Test Org',\n      });\n\n      expect(response.status).toBe(400);\n      expect(response.body.message).toContain('Password must be');\n    });\n\n    it('should handle database errors gracefully', async () => {\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue(null);\n      (prisma.organization.create as jest.Mock).mockRejectedValue(\n        new Error('Database error')\n      );\n      (hashPassword as jest.Mock).mockResolvedValue('hashedPassword');\n\n      const response = await request(app).post('/auth/signup').send({\n        email: 'newuser@example.com',\n        password: 'password123',\n        name: 'New User',\n        organizationName: 'New Org',\n      });\n\n      expect(response.status).toBe(500);\n      expect(response.body.message).toBe('Signup failed');\n    });\n  });\n\n  describe('POST /auth/logout', () => {\n    it('should clear JWT cookie', async () => {\n      const response = await request(app).post('/auth/logout');\n\n      expect(response.status).toBe(200);\n      expect(response.body.message).toBe('Logged out successfully');\n      expect(response.headers['set-cookie']).toBeDefined();\n      expect(response.headers['set-cookie'][0]).toContain('jwt=;');\n    });\n  });\n\n  describe('POST /auth/forgot-password', () => {\n    it('should send password reset email for valid user', async () => {\n      const mockUser = { ...testUser };\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue(mockUser);\n      (prisma.passwordReset.create as jest.Mock).mockResolvedValue({\n        id: 'reset-id',\n        token: 'reset-token',\n        userId: testUser.id,\n        expiresAt: new Date(Date.now() + 3600000),\n      });\n\n      const response = await request(app).post('/auth/forgot-password').send({\n        email: 'test@example.com',\n      });\n\n      expect(response.status).toBe(200);\n      expect(response.body.message).toBe('Password reset email sent');\n      expect(prisma.passwordReset.create).toHaveBeenCalled();\n    });\n\n    it('should return success even for non-existent email (security)', async () => {\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue(null);\n\n      const response = await request(app).post('/auth/forgot-password').send({\n        email: 'nonexistent@example.com',\n      });\n\n      expect(response.status).toBe(200);\n      expect(response.body.message).toBe('Password reset email sent');\n      expect(prisma.passwordReset.create).not.toHaveBeenCalled();\n    });\n\n    it('should return 400 if email is missing', async () => {\n      const response = await request(app)\n        .post('/auth/forgot-password')\n        .send({});\n\n      expect(response.status).toBe(400);\n      expect(response.body.message).toBe('Email is required');\n    });\n\n    it('should delete existing reset tokens for user', async () => {\n      const mockUser = { ...testUser };\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue(mockUser);\n      (prisma.passwordReset.deleteMany as jest.Mock).mockResolvedValue({\n        count: 1,\n      });\n      (prisma.passwordReset.create as jest.Mock).mockResolvedValue({\n        id: 'reset-id',\n        token: 'reset-token',\n        userId: testUser.id,\n        expiresAt: new Date(Date.now() + 3600000),\n      });\n\n      await request(app).post('/auth/forgot-password').send({\n        email: 'test@example.com',\n      });\n\n      expect(prisma.passwordReset.deleteMany).toHaveBeenCalledWith({\n        where: { userId: testUser.id },\n      });\n    });\n  });\n\n  describe('POST /auth/reset-password', () => {\n    it('should reset password with valid token', async () => {\n      const mockReset = {\n        id: 'reset-id',\n        token: 'valid-token',\n        userId: testUser.id,\n        expiresAt: new Date(Date.now() + 3600000),\n        user: testUser,\n      };\n\n      (prisma.passwordReset.findUnique as jest.Mock).mockResolvedValue(\n        mockReset\n      );\n      (hashPassword as jest.Mock).mockResolvedValue('newHashedPassword');\n      (prisma.user.update as jest.Mock).mockResolvedValue({\n        ...testUser,\n        password: 'newHashedPassword',\n      });\n      (prisma.passwordReset.delete as jest.Mock).mockResolvedValue(mockReset);\n\n      const response = await request(app).post('/auth/reset-password').send({\n        token: 'valid-token',\n        password: 'newPassword123',\n      });\n\n      expect(response.status).toBe(200);\n      expect(response.body.message).toBe('Password reset successfully');\n      expect(prisma.user.update).toHaveBeenCalledWith({\n        where: { id: testUser.id },\n        data: { password: 'newHashedPassword' },\n      });\n      expect(prisma.passwordReset.delete).toHaveBeenCalledWith({\n        where: { id: 'reset-id' },\n      });\n    });\n\n    it('should return 400 if token is missing', async () => {\n      const response = await request(app).post('/auth/reset-password').send({\n        password: 'newPassword123',\n      });\n\n      expect(response.status).toBe(400);\n      expect(response.body.message).toBe('Token and password are required');\n    });\n\n    it('should return 400 if password is missing', async () => {\n      const response = await request(app).post('/auth/reset-password').send({\n        token: 'valid-token',\n      });\n\n      expect(response.status).toBe(400);\n      expect(response.body.message).toBe('Token and password are required');\n    });\n\n    it('should return 400 if token is invalid', async () => {\n      (prisma.passwordReset.findUnique as jest.Mock).mockResolvedValue(null);\n\n      const response = await request(app).post('/auth/reset-password').send({\n        token: 'invalid-token',\n        password: 'newPassword123',\n      });\n\n      expect(response.status).toBe(400);\n      expect(response.body.message).toBe('Invalid or expired token');\n    });\n\n    it('should return 400 if token is expired', async () => {\n      const mockReset = {\n        id: 'reset-id',\n        token: 'expired-token',\n        userId: testUser.id,\n        expiresAt: new Date(Date.now() - 3600000), // Expired 1 hour ago\n        user: testUser,\n      };\n\n      (prisma.passwordReset.findUnique as jest.Mock).mockResolvedValue(\n        mockReset\n      );\n\n      const response = await request(app).post('/auth/reset-password').send({\n        token: 'expired-token',\n        password: 'newPassword123',\n      });\n\n      expect(response.status).toBe(400);\n      expect(response.body.message).toBe('Invalid or expired token');\n    });\n\n    it('should validate password strength', async () => {\n      const mockReset = {\n        id: 'reset-id',\n        token: 'valid-token',\n        userId: testUser.id,\n        expiresAt: new Date(Date.now() + 3600000),\n        user: testUser,\n      };\n\n      (prisma.passwordReset.findUnique as jest.Mock).mockResolvedValue(\n        mockReset\n      );\n\n      const response = await request(app).post('/auth/reset-password').send({\n        token: 'valid-token',\n        password: '123', // Too weak\n      });\n\n      expect(response.status).toBe(400);\n      expect(response.body.message).toContain('Password must be');\n    });\n  });\n\n  describe('POST /auth/verify-email', () => {\n    it('should verify email with valid token', async () => {\n      const mockUser = {\n        ...testUser,\n        emailVerified: false,\n        emailVerificationToken: 'valid-token',\n      };\n\n      (prisma.user.findFirst as jest.Mock).mockResolvedValue(mockUser);\n      (prisma.user.update as jest.Mock).mockResolvedValue({\n        ...mockUser,\n        emailVerified: true,\n        emailVerificationToken: null,\n      });\n\n      const response = await request(app).post('/auth/verify-email').send({\n        token: 'valid-token',\n      });\n\n      expect(response.status).toBe(200);\n      expect(response.body.message).toBe('Email verified successfully');\n      expect(prisma.user.update).toHaveBeenCalledWith({\n        where: { id: mockUser.id },\n        data: {\n          emailVerified: true,\n          emailVerificationToken: null,\n        },\n      });\n    });\n\n    it('should return 400 if token is missing', async () => {\n      const response = await request(app).post('/auth/verify-email').send({});\n\n      expect(response.status).toBe(400);\n      expect(response.body.message).toBe('Verification token is required');\n    });\n\n    it('should return 400 if token is invalid', async () => {\n      (prisma.user.findFirst as jest.Mock).mockResolvedValue(null);\n\n      const response = await request(app).post('/auth/verify-email').send({\n        token: 'invalid-token',\n      });\n\n      expect(response.status).toBe(400);\n      expect(response.body.message).toBe('Invalid verification token');\n    });\n\n    it('should return 400 if email already verified', async () => {\n      const mockUser = {\n        ...testUser,\n        emailVerified: true,\n        emailVerificationToken: 'valid-token',\n      };\n\n      (prisma.user.findFirst as jest.Mock).mockResolvedValue(mockUser);\n\n      const response = await request(app).post('/auth/verify-email').send({\n        token: 'valid-token',\n      });\n\n      expect(response.status).toBe(400);\n      expect(response.body.message).toBe('Email already verified');\n    });\n  });\n\n  describe('Edge Cases and Security', () => {\n    it('should handle SQL injection attempts in login', async () => {\n      const response = await request(app).post('/auth/login').send({\n        email: \"admin' OR '1'='1\",\n        password: \"password' OR '1'='1\",\n      });\n\n      expect(response.status).toBe(401);\n      expect(prisma.user.findUnique).toHaveBeenCalledWith({\n        where: { email: \"admin' OR '1'='1\" },\n        include: { organization: true },\n      });\n    });\n\n    it('should handle XSS attempts in signup', async () => {\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue(null);\n      (prisma.organization.create as jest.Mock).mockResolvedValue({\n        id: 'new-org-id',\n        name: 'Test <script>alert(\"XSS\")</script>',\n        users: [\n          {\n            id: 'new-user-id',\n            email: 'test@example.com',\n            name: 'Test <script>alert(\"XSS\")</script>',\n          },\n        ],\n      });\n      (hashPassword as jest.Mock).mockResolvedValue('hashedPassword');\n      (signToken as jest.Mock).mockImplementation((payload, res) => {\n        res.cookie('jwt', 'mock-token');\n      });\n\n      const response = await request(app).post('/auth/signup').send({\n        email: 'test@example.com',\n        password: 'password123',\n        name: 'Test <script>alert(\"XSS\")</script>',\n        organizationName: 'Test <script>alert(\"XSS\")</script>',\n      });\n\n      expect(response.status).toBe(201);\n      // The name should be stored as-is (sanitization happens on output)\n      expect(response.body.user.name).toBe(\n        'Test <script>alert(\"XSS\")</script>'\n      );\n    });\n\n    it('should handle concurrent signup attempts with same email', async () => {\n      // First call returns null (user doesn't exist)\n      (prisma.user.findUnique as jest.Mock).mockResolvedValueOnce(null);\n\n      // Create throws unique constraint error\n      (prisma.organization.create as jest.Mock).mockRejectedValue({\n        code: 'P2002',\n        meta: { target: ['email'] },\n      });\n\n      const response = await request(app).post('/auth/signup').send({\n        email: 'test@example.com',\n        password: 'password123',\n        name: 'Test User',\n        organizationName: 'Test Org',\n      });\n\n      expect(response.status).toBe(409);\n      expect(response.body.message).toBe('User already exists');\n    });\n\n    it('should rate limit login attempts', async () => {\n      // Note: Actual rate limiting would be implemented in middleware\n      // This test verifies the endpoint handles multiple requests\n      const promises = Array(10)\n        .fill(null)\n        .map(() =>\n          request(app).post('/auth/login').send({\n            email: 'test@example.com',\n            password: 'wrongpassword',\n          })\n        );\n\n      const responses = await Promise.all(promises);\n      responses.forEach((response) => {\n        expect([401, 429]).toContain(response.status);\n      });\n    });\n  });\n});\n"],"version":3}