{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/routes/auth.test.ts","mappings":"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","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/routes/auth.test.ts"],"sourcesContent":["import request from 'supertest';\nimport express from 'express';\nimport authRouter from '../../src/routes/auth';\nimport { \n  testUser, \n  testOrganization, \n  generateTestToken \n} from '../fixtures/test-data';\n\n// Create Express app for testing\nconst app = express();\napp.use(express.json());\napp.use('/auth', authRouter);\n\n// Get mocked functions\nconst { prisma } = require('../../src/lib/prisma');\nconst { signToken, verifyToken } = require('../../src/utils/jwt');\nconst { hashPassword, verifyPassword } = require('../../src/utils/password');\nconst { sendEmail } = require('../../src/utils/email');\n\ndescribe('Auth Routes', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('POST /auth/login', () => {\n    it('should login successfully with valid credentials', async () => {\n      const mockUser = { ...testUser };\n      prisma.user.findUnique.mockResolvedValue(mockUser);\n      verifyPassword.mockResolvedValue(true);\n      signToken.mockReturnValue('mock-token');\n\n      const response = await request(app)\n        .post('/auth/login')\n        .send({\n          email: 'test@example.com',\n          password: 'password123',\n        });\n\n      expect(response.status).toBe(200);\n      expect(response.body.message).toBe('Login successful');\n      expect(response.body.user).toBeDefined();\n      expect(response.body.user.email).toBe('test@example.com');\n      expect(response.body.user.password).toBeUndefined();\n    });\n\n    it('should return 400 if email or password is missing', async () => {\n      const response = await request(app)\n        .post('/auth/login')\n        .send({ email: 'test@example.com' });\n\n      expect(response.status).toBe(400);\n      expect(response.body.message).toBe('Email and password are required');\n    });\n\n    it('should return 401 if user not found', async () => {\n      prisma.user.findUnique.mockResolvedValue(null);\n\n      const response = await request(app)\n        .post('/auth/login')\n        .send({\n          email: 'nonexistent@example.com',\n          password: 'password123',\n        });\n\n      expect(response.status).toBe(401);\n      expect(response.body.message).toBe('Invalid credentials');\n    });\n\n    it('should return 401 if password is incorrect', async () => {\n      prisma.user.findUnique.mockResolvedValue(testUser);\n      verifyPassword.mockResolvedValue(false);\n\n      const response = await request(app)\n        .post('/auth/login')\n        .send({\n          email: 'test@example.com',\n          password: 'wrongpassword',\n        });\n\n      expect(response.status).toBe(401);\n      expect(response.body.message).toBe('Invalid credentials');\n    });\n  });\n\n  describe('POST /auth/signup', () => {\n    it('should create a new user and organization', async () => {\n      const mockNewUser = {\n        id: 'new-user-id',\n        email: 'newuser@example.com',\n        name: 'New User',\n        password: 'hashed-password',\n        organizationId: 'new-org-id',\n        roles: ['owner'],\n        emailVerified: true,\n        emailVerificationToken: null,\n        resetPasswordToken: null,\n        resetPasswordExpires: null,\n        lastLoginAt: new Date(),\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      const mockNewOrg = {\n        id: 'new-org-id',\n        name: 'New Organization',\n        slug: 'new-organization',\n        plan: 'free',\n        stripeCustomerId: null,\n        stripeSubscriptionId: null,\n        trialEndsAt: null,\n        settings: {},\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      prisma.user.findFirst.mockResolvedValue(null);\n      hashPassword.mockResolvedValue('hashed-password');\n      prisma.$transaction.mockImplementation(async (callback: any) => {\n        const transactionPrisma = {\n          organization: {\n            create: jest.fn().mockResolvedValue(mockNewOrg),\n          },\n          user: {\n            create: jest.fn().mockResolvedValue(mockNewUser),\n          },\n        };\n        return callback(transactionPrisma);\n      });\n      signToken.mockReturnValue('mock-token');\n      sendEmail.mockResolvedValue(undefined);\n\n      const response = await request(app)\n        .post('/auth/signup')\n        .send({\n          email: 'newuser@example.com',\n          password: 'StrongPassword123!',\n          name: 'New User',\n          organizationName: 'New Organization',\n        });\n\n      expect(response.status).toBe(201);\n      expect(response.body.message).toBe('User created successfully');\n      expect(response.body.user).toBeDefined();\n      expect(response.body.user.email).toBe('newuser@example.com');\n      expect(response.body.user.password).toBeUndefined();\n    });\n\n    it('should return 400 if required fields are missing', async () => {\n      const response = await request(app)\n        .post('/auth/signup')\n        .send({\n          email: 'newuser@example.com',\n          password: 'StrongPassword123!',\n          // missing name and organizationName\n        });\n\n      expect(response.status).toBe(400);\n      expect(response.body.message).toBe('All fields are required');\n    });\n\n    it('should return 400 if email already exists', async () => {\n      prisma.user.findFirst.mockResolvedValue(testUser);\n\n      const response = await request(app)\n        .post('/auth/signup')\n        .send({\n          email: 'test@example.com',\n          password: 'StrongPassword123!',\n          name: 'Test User',\n          organizationName: 'Test Organization',\n        });\n\n      expect(response.status).toBe(400);\n      expect(response.body.message).toBe('Email already exists');\n    });\n  });\n\n  describe('POST /auth/logout', () => {\n    it('should logout successfully', async () => {\n      const response = await request(app).post('/auth/logout');\n\n      expect(response.status).toBe(200);\n      expect(response.body.message).toBe('Logged out successfully');\n    });\n  });\n\n  describe('POST /auth/forgot-password', () => {\n    it('should send password reset email', async () => {\n      prisma.user.findUnique.mockResolvedValue(testUser);\n      prisma.user.update.mockResolvedValue({\n        ...testUser,\n        resetPasswordToken: 'reset-token',\n        resetPasswordExpires: new Date(Date.now() + 3600000),\n      });\n      sendEmail.mockResolvedValue(undefined);\n\n      const response = await request(app)\n        .post('/auth/forgot-password')\n        .send({ email: 'test@example.com' });\n\n      expect(response.status).toBe(200);\n      expect(response.body.message).toBe('Password reset email sent');\n      expect(sendEmail).toHaveBeenCalled();\n    });\n\n    it('should return 404 if user not found', async () => {\n      prisma.user.findUnique.mockResolvedValue(null);\n\n      const response = await request(app)\n        .post('/auth/forgot-password')\n        .send({ email: 'nonexistent@example.com' });\n\n      expect(response.status).toBe(404);\n      expect(response.body.message).toBe('User not found');\n    });\n  });\n\n  describe('POST /auth/reset-password', () => {\n    it('should reset password successfully', async () => {\n      const mockUserWithToken = {\n        ...testUser,\n        resetPasswordToken: 'valid-token',\n        resetPasswordExpires: new Date(Date.now() + 3600000),\n      };\n\n      prisma.user.findFirst.mockResolvedValue(mockUserWithToken);\n      hashPassword.mockResolvedValue('new-hashed-password');\n      prisma.user.update.mockResolvedValue({\n        ...testUser,\n        password: 'new-hashed-password',\n        resetPasswordToken: null,\n        resetPasswordExpires: null,\n      });\n\n      const response = await request(app)\n        .post('/auth/reset-password')\n        .send({\n          token: 'valid-token',\n          password: 'NewPassword123!',\n        });\n\n      expect(response.status).toBe(200);\n      expect(response.body.message).toBe('Password reset successful');\n    });\n\n    it('should return 400 if token is invalid or expired', async () => {\n      prisma.user.findFirst.mockResolvedValue(null);\n\n      const response = await request(app)\n        .post('/auth/reset-password')\n        .send({\n          token: 'invalid-token',\n          password: 'NewPassword123!',\n        });\n\n      expect(response.status).toBe(400);\n      expect(response.body.message).toBe('Invalid or expired reset token');\n    });\n  });\n});"],"version":3}