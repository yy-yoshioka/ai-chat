4bf2fcbf52e70ef2402134d49b1c553e
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const supertest_1 = __importDefault(require("supertest"));
const express_1 = __importDefault(require("express"));
const auth_1 = __importDefault(require("../../src/routes/auth"));
const test_data_1 = require("../fixtures/test-data");
// Create Express app for testing
const app = (0, express_1.default)();
app.use(express_1.default.json());
app.use('/auth', auth_1.default);
// Get mocked functions
const { prisma } = require('../../src/lib/prisma');
const { signToken, verifyToken } = require('../../src/utils/jwt');
const { hashPassword, verifyPassword } = require('../../src/utils/password');
const { sendEmail } = require('../../src/utils/email');
describe('Auth Routes', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    describe('POST /auth/login', () => {
        it('should login successfully with valid credentials', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockUser = Object.assign({}, test_data_1.testUser);
            prisma.user.findUnique.mockResolvedValue(mockUser);
            verifyPassword.mockResolvedValue(true);
            signToken.mockReturnValue('mock-token');
            const response = yield (0, supertest_1.default)(app)
                .post('/auth/login')
                .send({
                email: 'test@example.com',
                password: 'password123',
            });
            expect(response.status).toBe(200);
            expect(response.body.message).toBe('Login successful');
            expect(response.body.user).toBeDefined();
            expect(response.body.user.email).toBe('test@example.com');
            expect(response.body.user.password).toBeUndefined();
        }));
        it('should return 400 if email or password is missing', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = yield (0, supertest_1.default)(app)
                .post('/auth/login')
                .send({ email: 'test@example.com' });
            expect(response.status).toBe(400);
            expect(response.body.message).toBe('Email and password are required');
        }));
        it('should return 401 if user not found', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma.user.findUnique.mockResolvedValue(null);
            const response = yield (0, supertest_1.default)(app)
                .post('/auth/login')
                .send({
                email: 'nonexistent@example.com',
                password: 'password123',
            });
            expect(response.status).toBe(401);
            expect(response.body.message).toBe('Invalid credentials');
        }));
        it('should return 401 if password is incorrect', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma.user.findUnique.mockResolvedValue(test_data_1.testUser);
            verifyPassword.mockResolvedValue(false);
            const response = yield (0, supertest_1.default)(app)
                .post('/auth/login')
                .send({
                email: 'test@example.com',
                password: 'wrongpassword',
            });
            expect(response.status).toBe(401);
            expect(response.body.message).toBe('Invalid credentials');
        }));
    });
    describe('POST /auth/signup', () => {
        it('should create a new user and organization', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockNewUser = {
                id: 'new-user-id',
                email: 'newuser@example.com',
                name: 'New User',
                password: 'hashed-password',
                organizationId: 'new-org-id',
                roles: ['owner'],
                emailVerified: true,
                emailVerificationToken: null,
                resetPasswordToken: null,
                resetPasswordExpires: null,
                lastLoginAt: new Date(),
                createdAt: new Date(),
                updatedAt: new Date(),
            };
            const mockNewOrg = {
                id: 'new-org-id',
                name: 'New Organization',
                slug: 'new-organization',
                plan: 'free',
                stripeCustomerId: null,
                stripeSubscriptionId: null,
                trialEndsAt: null,
                settings: {},
                createdAt: new Date(),
                updatedAt: new Date(),
            };
            prisma.user.findFirst.mockResolvedValue(null);
            hashPassword.mockResolvedValue('hashed-password');
            prisma.$transaction.mockImplementation((callback) => __awaiter(void 0, void 0, void 0, function* () {
                const transactionPrisma = {
                    organization: {
                        create: jest.fn().mockResolvedValue(mockNewOrg),
                    },
                    user: {
                        create: jest.fn().mockResolvedValue(mockNewUser),
                    },
                };
                return callback(transactionPrisma);
            }));
            signToken.mockReturnValue('mock-token');
            sendEmail.mockResolvedValue(undefined);
            const response = yield (0, supertest_1.default)(app)
                .post('/auth/signup')
                .send({
                email: 'newuser@example.com',
                password: 'StrongPassword123!',
                name: 'New User',
                organizationName: 'New Organization',
            });
            expect(response.status).toBe(201);
            expect(response.body.message).toBe('User created successfully');
            expect(response.body.user).toBeDefined();
            expect(response.body.user.email).toBe('newuser@example.com');
            expect(response.body.user.password).toBeUndefined();
        }));
        it('should return 400 if required fields are missing', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = yield (0, supertest_1.default)(app)
                .post('/auth/signup')
                .send({
                email: 'newuser@example.com',
                password: 'StrongPassword123!',
                // missing name and organizationName
            });
            expect(response.status).toBe(400);
            expect(response.body.message).toBe('All fields are required');
        }));
        it('should return 400 if email already exists', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma.user.findFirst.mockResolvedValue(test_data_1.testUser);
            const response = yield (0, supertest_1.default)(app)
                .post('/auth/signup')
                .send({
                email: 'test@example.com',
                password: 'StrongPassword123!',
                name: 'Test User',
                organizationName: 'Test Organization',
            });
            expect(response.status).toBe(400);
            expect(response.body.message).toBe('Email already exists');
        }));
    });
    describe('POST /auth/logout', () => {
        it('should logout successfully', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = yield (0, supertest_1.default)(app).post('/auth/logout');
            expect(response.status).toBe(200);
            expect(response.body.message).toBe('Logged out successfully');
        }));
    });
    describe('POST /auth/forgot-password', () => {
        it('should send password reset email', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma.user.findUnique.mockResolvedValue(test_data_1.testUser);
            prisma.user.update.mockResolvedValue(Object.assign(Object.assign({}, test_data_1.testUser), { resetPasswordToken: 'reset-token', resetPasswordExpires: new Date(Date.now() + 3600000) }));
            sendEmail.mockResolvedValue(undefined);
            const response = yield (0, supertest_1.default)(app)
                .post('/auth/forgot-password')
                .send({ email: 'test@example.com' });
            expect(response.status).toBe(200);
            expect(response.body.message).toBe('Password reset email sent');
            expect(sendEmail).toHaveBeenCalled();
        }));
        it('should return 404 if user not found', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma.user.findUnique.mockResolvedValue(null);
            const response = yield (0, supertest_1.default)(app)
                .post('/auth/forgot-password')
                .send({ email: 'nonexistent@example.com' });
            expect(response.status).toBe(404);
            expect(response.body.message).toBe('User not found');
        }));
    });
    describe('POST /auth/reset-password', () => {
        it('should reset password successfully', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockUserWithToken = Object.assign(Object.assign({}, test_data_1.testUser), { resetPasswordToken: 'valid-token', resetPasswordExpires: new Date(Date.now() + 3600000) });
            prisma.user.findFirst.mockResolvedValue(mockUserWithToken);
            hashPassword.mockResolvedValue('new-hashed-password');
            prisma.user.update.mockResolvedValue(Object.assign(Object.assign({}, test_data_1.testUser), { password: 'new-hashed-password', resetPasswordToken: null, resetPasswordExpires: null }));
            const response = yield (0, supertest_1.default)(app)
                .post('/auth/reset-password')
                .send({
                token: 'valid-token',
                password: 'NewPassword123!',
            });
            expect(response.status).toBe(200);
            expect(response.body.message).toBe('Password reset successful');
        }));
        it('should return 400 if token is invalid or expired', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma.user.findFirst.mockResolvedValue(null);
            const response = yield (0, supertest_1.default)(app)
                .post('/auth/reset-password')
                .send({
                token: 'invalid-token',
                password: 'NewPassword123!',
            });
            expect(response.status).toBe(400);
            expect(response.body.message).toBe('Invalid or expired reset token');
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,