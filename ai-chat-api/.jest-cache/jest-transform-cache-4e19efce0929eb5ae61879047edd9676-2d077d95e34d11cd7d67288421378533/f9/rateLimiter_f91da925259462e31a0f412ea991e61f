5771b5e659dea98f2c69a1b3046da8f8
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.rateLimiter = void 0;
const ioredis_1 = __importDefault(require("ioredis"));
class RateLimiter {
    constructor() {
        this.redis = null;
        this.memoryStore = new Map();
        // Only try to connect to Redis if URL is provided
        if (process.env.REDIS_URL) {
            try {
                this.redis = new ioredis_1.default(process.env.REDIS_URL, {
                    maxRetriesPerRequest: 3,
                    lazyConnect: true, // Don't connect immediately
                });
                this.redis.on('connect', () => {
                    console.log('✅ Connected to Redis for rate limiting');
                });
                this.redis.on('error', (error) => {
                    console.warn('⚠️ Redis connection error, falling back to memory store:', error.message);
                    this.redis = null; // Fallback to memory store
                });
            }
            catch (error) {
                console.warn('⚠️ Failed to initialize Redis, using in-memory store:', error);
                this.redis = null;
            }
        }
        else {
            console.log('ℹ️ No Redis URL provided, using in-memory rate limiter');
        }
    }
    incrementAndCheck(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { widgetId, limit, period } = options;
            const key = `rate_limit:${widgetId}`;
            const now = Math.floor(Date.now() / 1000);
            const resetTime = now + period;
            if (this.redis) {
                return this.incrementRedis(key, limit, period, resetTime);
            }
            else {
                return this.incrementMemory(key, limit, period, resetTime);
            }
        });
    }
    incrementRedis(key, limit, period, resetTime) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const multi = this.redis.multi();
            multi.incr(key);
            multi.expire(key, period);
            const results = yield multi.exec();
            const count = ((_a = results === null || results === void 0 ? void 0 : results[0]) === null || _a === void 0 ? void 0 : _a[1]) || 0;
            return {
                allowed: count <= limit,
                count,
                resetTime,
            };
        });
    }
    incrementMemory(key, limit, period, resetTime) {
        const now = Math.floor(Date.now() / 1000);
        const existing = this.memoryStore.get(key);
        // Clean up expired entries
        if (existing && existing.resetTime <= now) {
            this.memoryStore.delete(key);
        }
        const current = this.memoryStore.get(key) || { count: 0, resetTime };
        current.count += 1;
        if (!this.memoryStore.has(key)) {
            current.resetTime = resetTime;
        }
        this.memoryStore.set(key, current);
        return {
            allowed: current.count <= limit,
            count: current.count,
            resetTime: current.resetTime,
        };
    }
    disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.redis) {
                yield this.redis.disconnect();
            }
        });
    }
}
// Export singleton instance
exports.rateLimiter = new RateLimiter();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,