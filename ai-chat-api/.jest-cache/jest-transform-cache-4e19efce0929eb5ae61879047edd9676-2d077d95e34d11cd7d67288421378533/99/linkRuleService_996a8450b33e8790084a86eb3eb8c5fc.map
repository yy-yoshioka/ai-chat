{"version":3,"names":["cov_d0hmlwo7e","actualCoverage","client_1","s","require","prisma","PrismaClient","matchLinkRules","organizationId","message","f","result","matched","links","linkRules","linkRule","findMany","where","isActive","orderBy","name","console","log","length","rule","regex","RegExp","triggerRegex","test","b","linkMetadata","generateLinkMetadata","targetUrl","linkCard","id","title","url","description","newTab","ruleName","ruleId","push","error","exports","internalTitles","startsWith","undefined","domain","URL","hostname","_a","recordLinkClick","sessionId","userId","userAgent","referer","update","data","clickCount","increment","lastClickedAt","Date","event","create","companyId","eventType","eventName","properties","clickedAt","toISOString","referrer","createdAt","getLinkRuleStats","days","dateFrom","setDate","getDate","recentClicksData","groupBy","by","gte","_count","stats","map","recentClicks","filter","props","reduce","sum","ctr","insertLinkCards","linkCards","linkCardsHtml","card","escapeHtml","substring","join","text","replace","m","testLinkRule","testMessages","findUnique","Error","results","getPopularLinkRules","limit","popularRules","gt","take","select","getUnusedLinkRules","dateThreshold","unusedRules","OR","lt","analyzeLinkRuleEffectiveness","rules","activeRules","totalClicks","averageClicksPerRule","topPerformingRules","sort","a","slice","now","underperformingRules","daysSinceLastClick","Math","floor","getTime","Infinity","totalRules","round"],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/services/linkRuleService.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\n// リンクカード情報の型定義\nexport interface LinkCard {\n  id: string;\n  title: string;\n  url: string;\n  description?: string;\n  newTab: boolean;\n  ruleName: string;\n  ruleId: string;\n}\n\n// リンクルールマッチング結果\nexport interface LinkRuleMatch {\n  matched: boolean;\n  links: LinkCard[];\n}\n\n// イベントプロパティの型定義\ninterface LinkClickEventProperties {\n  ruleId?: string;\n  clickedAt?: string;\n}\n\n// メッセージに対してリンクルールをマッチング\nexport async function matchLinkRules(\n  organizationId: string,\n  message: string\n): Promise<LinkRuleMatch> {\n  try {\n    const result: LinkRuleMatch = {\n      matched: false,\n      links: [],\n    };\n\n    // 組織のアクティブなリンクルールを取得\n    const linkRules = await prisma.linkRule.findMany({\n      where: {\n        organizationId,\n        isActive: true,\n      },\n      orderBy: {\n        name: 'asc',\n      },\n    });\n\n    console.log(\n      `Checking ${linkRules.length} link rules for message: \"${message}\"`\n    );\n\n    // 各ルールをチェック\n    for (const rule of linkRules) {\n      try {\n        const regex = new RegExp(rule.triggerRegex, 'i');\n\n        if (regex.test(message)) {\n          console.log(`Link rule matched: ${rule.name} (${rule.triggerRegex})`);\n\n          // メタデータを生成（URLからタイトルを取得）\n          const linkMetadata = await generateLinkMetadata(rule.targetUrl);\n\n          const linkCard: LinkCard = {\n            id: `link-${rule.id}`,\n            title: linkMetadata.title || rule.name,\n            url: rule.targetUrl,\n            description: rule.description || linkMetadata.description,\n            newTab: rule.newTab,\n            ruleName: rule.name,\n            ruleId: rule.id,\n          };\n\n          result.links.push(linkCard);\n          result.matched = true;\n        }\n      } catch (error) {\n        console.error(`Error processing link rule ${rule.id}:`, error);\n        // 正規表現エラーがあっても続行\n        continue;\n      }\n    }\n\n    console.log(\n      `Link rule matching completed: ${result.links.length} matches found`\n    );\n    return result;\n  } catch (error) {\n    console.error('Failed to match link rules:', error);\n    return { matched: false, links: [] };\n  }\n}\n\n// URLからメタデータを生成\nasync function generateLinkMetadata(\n  url: string\n): Promise<{ title?: string; description?: string }> {\n  try {\n    // 内部リンクの場合のタイトルマッピング\n    const internalTitles: Record<\n      string,\n      { title: string; description: string }\n    > = {\n      '/pricing': {\n        title: '料金プラン',\n        description: 'AI Chatの料金プランをご確認いただけます',\n      },\n      '/docs': {\n        title: 'ドキュメント',\n        description: 'AI Chatの使い方やAPI仕様をご確認いただけます',\n      },\n      '/contact': {\n        title: 'お問い合わせ',\n        description: 'サポートチームまでお気軽にお問い合わせください',\n      },\n      '/support': {\n        title: 'サポート',\n        description: 'ヘルプ情報とサポートリソースをご利用いただけます',\n      },\n    };\n\n    // 内部リンクの場合\n    if (url.startsWith('/')) {\n      return internalTitles[url] || { title: url, description: undefined };\n    }\n\n    // 外部リンクの場合（簡単な実装）\n    try {\n      const domain = new URL(url).hostname;\n      return {\n        title: `${domain}`,\n        description: `${domain}のページをご確認ください`,\n      };\n    } catch {\n      return { title: url, description: undefined };\n    }\n  } catch (error) {\n    console.error('Failed to generate link metadata:', error);\n    return { title: url, description: undefined };\n  }\n}\n\n// リンククリックを記録\nexport async function recordLinkClick(\n  organizationId: string,\n  ruleId: string,\n  sessionId?: string,\n  userId?: string,\n  userAgent?: string,\n  referer?: string\n): Promise<void> {\n  try {\n    console.log(`Recording link click: rule=${ruleId}, session=${sessionId}`);\n\n    // リンクルールのクリック数を増加\n    await prisma.linkRule.update({\n      where: { id: ruleId },\n      data: {\n        clickCount: { increment: 1 },\n        lastClickedAt: new Date(),\n      },\n    });\n\n    // イベントとして記録（分析用）\n    await prisma.event.create({\n      data: {\n        companyId: organizationId, // TODO: 正しい会社IDにマッピング\n        eventType: 'link_clicked',\n        eventName: 'knowledge_base_link_clicked',\n        properties: {\n          ruleId,\n          clickedAt: new Date().toISOString(),\n        },\n        sessionId,\n        userId,\n        userAgent,\n        referrer: referer,\n        createdAt: new Date(),\n      },\n    });\n\n    console.log(`Link click recorded successfully for rule: ${ruleId}`);\n  } catch (error) {\n    console.error('Failed to record link click:', error);\n    // エラーが発生してもサービス継続\n  }\n}\n\n// リンクルールの統計を取得\nexport async function getLinkRuleStats(\n  organizationId: string,\n  days: number = 30\n): Promise<\n  Array<{\n    id: string;\n    name: string;\n    triggerRegex: string;\n    clickCount: number;\n    lastClickedAt?: Date;\n    ctr?: number; // Click Through Rate (表示回数に対するクリック率)\n    recentClicks: number;\n  }>\n> {\n  try {\n    const dateFrom = new Date();\n    dateFrom.setDate(dateFrom.getDate() - days);\n\n    // リンクルール基本情報を取得\n    const linkRules = await prisma.linkRule.findMany({\n      where: { organizationId },\n      orderBy: { clickCount: 'desc' },\n    });\n\n    // 期間内のクリック数を取得\n    const recentClicksData = await prisma.event.groupBy({\n      by: ['properties'],\n      where: {\n        companyId: organizationId,\n        eventType: 'link_clicked',\n        createdAt: { gte: dateFrom },\n      },\n      _count: true,\n    });\n\n    // 結果をマッピング\n    const stats = linkRules.map((rule) => {\n      const recentClicks = recentClicksData\n        .filter((event) => {\n          try {\n            const props = event.properties as LinkClickEventProperties;\n            return props?.ruleId === rule.id;\n          } catch {\n            return false;\n          }\n        })\n        .reduce((sum, event) => sum + event._count, 0);\n\n      return {\n        id: rule.id,\n        name: rule.name,\n        triggerRegex: rule.triggerRegex,\n        clickCount: rule.clickCount,\n        lastClickedAt: rule.lastClickedAt || undefined,\n        recentClicks,\n        // CTRは表示回数のデータが必要なため、今回は省略\n        ctr: undefined,\n      };\n    });\n\n    return stats;\n  } catch (error) {\n    console.error('Failed to get link rule stats:', error);\n    return [];\n  }\n}\n\n// メッセージにリンクカードを挿入\nexport function insertLinkCards(\n  message: string,\n  linkCards: LinkCard[]\n): string {\n  if (linkCards.length === 0) {\n    return message;\n  }\n\n  // リンクカードのHTMLを生成\n  const linkCardsHtml = linkCards\n    .map(\n      (card) => `\n<div class=\"link-card\" data-rule-id=\"${card.ruleId}\" data-link-id=\"${card.id}\">\n  <div class=\"link-card-header\">\n    <h4 class=\"link-card-title\">${escapeHtml(card.title)}</h4>\n    <a href=\"${escapeHtml(card.url)}\" \n       target=\"${card.newTab ? '_blank' : '_self'}\" \n       rel=\"${card.newTab ? 'noopener noreferrer' : ''}\"\n       class=\"link-card-url\"\n       onclick=\"recordLinkClick('${card.ruleId}')\">\n      ${card.url.length > 50 ? card.url.substring(0, 50) + '...' : card.url}\n    </a>\n  </div>\n  ${card.description ? `<p class=\"link-card-description\">${escapeHtml(card.description)}</p>` : ''}\n  <div class=\"link-card-footer\">\n    <small class=\"link-card-source\">推奨リンク: ${escapeHtml(card.ruleName)}</small>\n  </div>\n</div>\n  `\n    )\n    .join('\\n');\n\n  // メッセージの末尾にリンクカードを追加\n  return `${message}\\n\\n${linkCardsHtml}`;\n}\n\n// HTMLエスケープ\nfunction escapeHtml(text: string): string {\n  const map: Record<string, string> = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#039;',\n  };\n  return text.replace(/[&<>\"']/g, (m) => map[m]);\n}\n\n// リンクルールのテスト（正規表現が正しく動作するかチェック）\nexport async function testLinkRule(\n  ruleId: string,\n  testMessages: string[]\n): Promise<Array<{ message: string; matched: boolean; error?: string }>> {\n  try {\n    const rule = await prisma.linkRule.findUnique({\n      where: { id: ruleId },\n    });\n\n    if (!rule) {\n      throw new Error('Link rule not found');\n    }\n\n    const results = testMessages.map((message) => {\n      try {\n        const regex = new RegExp(rule.triggerRegex, 'i');\n        return {\n          message,\n          matched: regex.test(message),\n        };\n      } catch (error) {\n        return {\n          message,\n          matched: false,\n          error: error instanceof Error ? error.message : 'Unknown error',\n        };\n      }\n    });\n\n    return results;\n  } catch (error) {\n    console.error('Failed to test link rule:', error);\n    throw error;\n  }\n}\n\n// 人気のリンクルールを取得\nexport async function getPopularLinkRules(\n  organizationId: string,\n  limit: number = 10\n): Promise<\n  Array<{\n    id: string;\n    name: string;\n    url: string;\n    clickCount: number;\n    description?: string;\n  }>\n> {\n  try {\n    const popularRules = await prisma.linkRule.findMany({\n      where: {\n        organizationId,\n        isActive: true,\n        clickCount: { gt: 0 },\n      },\n      orderBy: { clickCount: 'desc' },\n      take: limit,\n      select: {\n        id: true,\n        name: true,\n        targetUrl: true,\n        clickCount: true,\n        description: true,\n      },\n    });\n\n    return popularRules.map((rule) => ({\n      id: rule.id,\n      name: rule.name,\n      url: rule.targetUrl,\n      clickCount: rule.clickCount,\n      description: rule.description || undefined,\n    }));\n  } catch (error) {\n    console.error('Failed to get popular link rules:', error);\n    return [];\n  }\n}\n\n// 未使用のリンクルールを取得\nexport async function getUnusedLinkRules(\n  organizationId: string,\n  days: number = 30\n): Promise<\n  Array<{\n    id: string;\n    name: string;\n    triggerRegex: string;\n    createdAt: Date;\n    lastClickedAt?: Date;\n  }>\n> {\n  try {\n    const dateThreshold = new Date();\n    dateThreshold.setDate(dateThreshold.getDate() - days);\n\n    const unusedRules = await prisma.linkRule.findMany({\n      where: {\n        organizationId,\n        isActive: true,\n        OR: [\n          { clickCount: 0 },\n          { lastClickedAt: { lt: dateThreshold } },\n          { lastClickedAt: null },\n        ],\n      },\n      orderBy: { createdAt: 'desc' },\n      select: {\n        id: true,\n        name: true,\n        triggerRegex: true,\n        createdAt: true,\n        lastClickedAt: true,\n      },\n    });\n\n    return unusedRules.map((rule) => ({\n      id: rule.id,\n      name: rule.name,\n      triggerRegex: rule.triggerRegex,\n      createdAt: rule.createdAt,\n      lastClickedAt: rule.lastClickedAt || undefined,\n    }));\n  } catch (error) {\n    console.error('Failed to get unused link rules:', error);\n    return [];\n  }\n}\n\n// リンクルールの効果分析\nexport async function analyzeLinkRuleEffectiveness(\n  organizationId: string\n): Promise<{\n  totalRules: number;\n  activeRules: number;\n  totalClicks: number;\n  averageClicksPerRule: number;\n  topPerformingRules: Array<{ name: string; clickCount: number }>;\n  underperformingRules: Array<{ name: string; daysSinceLastClick: number }>;\n}> {\n  try {\n    const rules = await prisma.linkRule.findMany({\n      where: { organizationId },\n    });\n\n    const activeRules = rules.filter((rule) => rule.isActive);\n    const totalClicks = rules.reduce((sum, rule) => sum + rule.clickCount, 0);\n    const averageClicksPerRule =\n      activeRules.length > 0 ? totalClicks / activeRules.length : 0;\n\n    const topPerformingRules = rules\n      .filter((rule) => rule.clickCount > 0)\n      .sort((a, b) => b.clickCount - a.clickCount)\n      .slice(0, 5)\n      .map((rule) => ({\n        name: rule.name,\n        clickCount: rule.clickCount,\n      }));\n\n    const now = new Date();\n    const underperformingRules = rules\n      .filter(\n        (rule) => rule.isActive && (rule.clickCount === 0 || rule.lastClickedAt)\n      )\n      .map((rule) => ({\n        name: rule.name,\n        daysSinceLastClick: rule.lastClickedAt\n          ? Math.floor(\n              (now.getTime() - rule.lastClickedAt.getTime()) /\n                (1000 * 60 * 60 * 24)\n            )\n          : Infinity,\n      }))\n      .filter(\n        (rule) =>\n          rule.daysSinceLastClick > 7 || rule.daysSinceLastClick === Infinity\n      )\n      .sort((a, b) => b.daysSinceLastClick - a.daysSinceLastClick)\n      .slice(0, 5);\n\n    return {\n      totalRules: rules.length,\n      activeRules: activeRules.length,\n      totalClicks,\n      averageClicksPerRule: Math.round(averageClicksPerRule * 100) / 100,\n      topPerformingRules,\n      underperformingRules,\n    };\n  } catch (error) {\n    console.error('Failed to analyze link rule effectiveness:', error);\n    return {\n      totalRules: 0,\n      activeRules: 0,\n      totalClicks: 0,\n      averageClicksPerRule: 0,\n      topPerformingRules: [],\n      underperformingRules: [],\n    };\n  }\n}\n"],"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","ignoreList":[]}