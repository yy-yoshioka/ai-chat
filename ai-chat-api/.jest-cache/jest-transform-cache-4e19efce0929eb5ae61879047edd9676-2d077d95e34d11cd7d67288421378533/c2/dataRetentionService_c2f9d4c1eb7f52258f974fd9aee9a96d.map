{"version":3,"names":["cov_1t58rm2ti7","actualCoverage","prisma_1","s","require","logger_1","getOrganizationRetentionPolicy","organizationId","f","__awaiter","policy","prisma","dataRetentionPolicy","findUnique","where","b","create","data","chatLogs","messageFeedback","systemMetrics","webhookLogs","healthChecks","auditLogs","autoDelete","anonymizeData","exports","updateRetentionPolicy","updates","upsert","update","Object","assign","updatedAt","Date","createRetentionJob","dataRetentionJob","status","updateRetentionJob","jobId","id","cleanupChatLogs","retentionDays","cutoffDate","setDate","getDate","job","jobType","metadata","toISOString","startedAt","itemsToDelete","chatLog","count","widget","company","createdAt","lt","deletedLogs","deleteMany","itemsProcessed","itemsDeleted","completedAt","logger","info","deletedCount","error","Error","message","cleanupSystemMetrics","systemMetric","timestamp","deletedMetrics","cleanupWebhookLogs","webhookLog","webhook","executedAt","cleanupHealthChecks","healthCheck","checkedAt","deletedChecks","anonymizeChatLogs","logsToAnonymize","findMany","userId","not","select","anonymizedLogs","updateMany","in","map","log","length","itemsAnonymized","anonymizedCount","getRetentionJobHistory","limit","orderBy","take","include","organization","name"],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/services/dataRetentionService.ts"],"sourcesContent":["import { prisma } from '../lib/prisma';\nimport { logger } from '../lib/logger';\n\nexport interface RetentionPolicy {\n  chatLogs: number;\n  messageFeedback: number;\n  systemMetrics: number;\n  webhookLogs: number;\n  healthChecks: number;\n  auditLogs: number;\n  autoDelete: boolean;\n  anonymizeData: boolean;\n}\n\nexport const getOrganizationRetentionPolicy = async (\n  organizationId: string\n) => {\n  let policy = await prisma.dataRetentionPolicy.findUnique({\n    where: { organizationId },\n  });\n\n  if (!policy) {\n    // Create default policy\n    policy = await prisma.dataRetentionPolicy.create({\n      data: {\n        organizationId,\n        chatLogs: 365,\n        messageFeedback: 730,\n        systemMetrics: 90,\n        webhookLogs: 30,\n        healthChecks: 7,\n        auditLogs: 2555,\n        autoDelete: true,\n        anonymizeData: false,\n      },\n    });\n  }\n\n  return policy;\n};\n\nexport const updateRetentionPolicy = async (\n  organizationId: string,\n  updates: Partial<RetentionPolicy>\n) => {\n  return prisma.dataRetentionPolicy.upsert({\n    where: { organizationId },\n    update: {\n      ...updates,\n      updatedAt: new Date(),\n    },\n    create: {\n      organizationId,\n      ...updates,\n    },\n  });\n};\n\nexport const createRetentionJob = async (data: {\n  organizationId?: string;\n  jobType: string;\n  metadata?: Record<string, any>;\n}) => {\n  return prisma.dataRetentionJob.create({\n    data: {\n      ...data,\n      status: 'pending',\n    },\n  });\n};\n\nexport const updateRetentionJob = async (\n  jobId: string,\n  updates: {\n    status?: string;\n    itemsProcessed?: number;\n    itemsDeleted?: number;\n    itemsAnonymized?: number;\n    startedAt?: Date;\n    completedAt?: Date;\n    error?: string;\n  }\n) => {\n  return prisma.dataRetentionJob.update({\n    where: { id: jobId },\n    data: updates,\n  });\n};\n\n// Chat logs cleanup\nexport const cleanupChatLogs = async (\n  organizationId: string,\n  retentionDays: number\n) => {\n  const cutoffDate = new Date();\n  cutoffDate.setDate(cutoffDate.getDate() - retentionDays);\n\n  const job = await createRetentionJob({\n    organizationId,\n    jobType: 'chat_logs',\n    metadata: { cutoffDate: cutoffDate.toISOString(), retentionDays },\n  });\n\n  try {\n    await updateRetentionJob(job.id, {\n      status: 'running',\n      startedAt: new Date(),\n    });\n\n    // Count items to be deleted\n    const itemsToDelete = await prisma.chatLog.count({\n      where: {\n        widget: {\n          company: {\n            organizationId,\n          },\n        },\n        createdAt: {\n          lt: cutoffDate,\n        },\n      },\n    });\n\n    // Delete chat logs and related feedback\n    const deletedLogs = await prisma.chatLog.deleteMany({\n      where: {\n        widget: {\n          company: {\n            organizationId,\n          },\n        },\n        createdAt: {\n          lt: cutoffDate,\n        },\n      },\n    });\n\n    await updateRetentionJob(job.id, {\n      status: 'completed',\n      itemsProcessed: itemsToDelete,\n      itemsDeleted: deletedLogs.count,\n      completedAt: new Date(),\n    });\n\n    logger.info('Chat logs cleanup completed', {\n      organizationId,\n      deletedCount: deletedLogs.count,\n      retentionDays,\n    });\n\n    return deletedLogs.count;\n  } catch (error) {\n    await updateRetentionJob(job.id, {\n      status: 'failed',\n      error: error instanceof Error ? error.message : 'Unknown error',\n      completedAt: new Date(),\n    });\n\n    logger.error('Chat logs cleanup failed', {\n      organizationId,\n      error: error instanceof Error ? error.message : error,\n    });\n\n    throw error;\n  }\n};\n\n// System metrics cleanup\nexport const cleanupSystemMetrics = async (retentionDays: number) => {\n  const cutoffDate = new Date();\n  cutoffDate.setDate(cutoffDate.getDate() - retentionDays);\n\n  const job = await createRetentionJob({\n    jobType: 'system_metrics',\n    metadata: { cutoffDate: cutoffDate.toISOString(), retentionDays },\n  });\n\n  try {\n    await updateRetentionJob(job.id, {\n      status: 'running',\n      startedAt: new Date(),\n    });\n\n    const itemsToDelete = await prisma.systemMetric.count({\n      where: {\n        timestamp: {\n          lt: cutoffDate,\n        },\n      },\n    });\n\n    const deletedMetrics = await prisma.systemMetric.deleteMany({\n      where: {\n        timestamp: {\n          lt: cutoffDate,\n        },\n      },\n    });\n\n    await updateRetentionJob(job.id, {\n      status: 'completed',\n      itemsProcessed: itemsToDelete,\n      itemsDeleted: deletedMetrics.count,\n      completedAt: new Date(),\n    });\n\n    logger.info('System metrics cleanup completed', {\n      deletedCount: deletedMetrics.count,\n      retentionDays,\n    });\n\n    return deletedMetrics.count;\n  } catch (error) {\n    await updateRetentionJob(job.id, {\n      status: 'failed',\n      error: error instanceof Error ? error.message : 'Unknown error',\n      completedAt: new Date(),\n    });\n\n    logger.error('System metrics cleanup failed', {\n      error: error instanceof Error ? error.message : error,\n    });\n\n    throw error;\n  }\n};\n\n// Webhook logs cleanup\nexport const cleanupWebhookLogs = async (\n  organizationId: string,\n  retentionDays: number\n) => {\n  const cutoffDate = new Date();\n  cutoffDate.setDate(cutoffDate.getDate() - retentionDays);\n\n  const job = await createRetentionJob({\n    organizationId,\n    jobType: 'webhook_logs',\n    metadata: { cutoffDate: cutoffDate.toISOString(), retentionDays },\n  });\n\n  try {\n    await updateRetentionJob(job.id, {\n      status: 'running',\n      startedAt: new Date(),\n    });\n\n    const itemsToDelete = await prisma.webhookLog.count({\n      where: {\n        webhook: {\n          organizationId,\n        },\n        executedAt: {\n          lt: cutoffDate,\n        },\n      },\n    });\n\n    const deletedLogs = await prisma.webhookLog.deleteMany({\n      where: {\n        webhook: {\n          organizationId,\n        },\n        executedAt: {\n          lt: cutoffDate,\n        },\n      },\n    });\n\n    await updateRetentionJob(job.id, {\n      status: 'completed',\n      itemsProcessed: itemsToDelete,\n      itemsDeleted: deletedLogs.count,\n      completedAt: new Date(),\n    });\n\n    logger.info('Webhook logs cleanup completed', {\n      organizationId,\n      deletedCount: deletedLogs.count,\n      retentionDays,\n    });\n\n    return deletedLogs.count;\n  } catch (error) {\n    await updateRetentionJob(job.id, {\n      status: 'failed',\n      error: error instanceof Error ? error.message : 'Unknown error',\n      completedAt: new Date(),\n    });\n\n    logger.error('Webhook logs cleanup failed', {\n      organizationId,\n      error: error instanceof Error ? error.message : error,\n    });\n\n    throw error;\n  }\n};\n\n// Health checks cleanup\nexport const cleanupHealthChecks = async (retentionDays: number) => {\n  const cutoffDate = new Date();\n  cutoffDate.setDate(cutoffDate.getDate() - retentionDays);\n\n  const job = await createRetentionJob({\n    jobType: 'health_checks',\n    metadata: { cutoffDate: cutoffDate.toISOString(), retentionDays },\n  });\n\n  try {\n    await updateRetentionJob(job.id, {\n      status: 'running',\n      startedAt: new Date(),\n    });\n\n    const itemsToDelete = await prisma.healthCheck.count({\n      where: {\n        checkedAt: {\n          lt: cutoffDate,\n        },\n      },\n    });\n\n    const deletedChecks = await prisma.healthCheck.deleteMany({\n      where: {\n        checkedAt: {\n          lt: cutoffDate,\n        },\n      },\n    });\n\n    await updateRetentionJob(job.id, {\n      status: 'completed',\n      itemsProcessed: itemsToDelete,\n      itemsDeleted: deletedChecks.count,\n      completedAt: new Date(),\n    });\n\n    logger.info('Health checks cleanup completed', {\n      deletedCount: deletedChecks.count,\n      retentionDays,\n    });\n\n    return deletedChecks.count;\n  } catch (error) {\n    await updateRetentionJob(job.id, {\n      status: 'failed',\n      error: error instanceof Error ? error.message : 'Unknown error',\n      completedAt: new Date(),\n    });\n\n    logger.error('Health checks cleanup failed', {\n      error: error instanceof Error ? error.message : error,\n    });\n\n    throw error;\n  }\n};\n\n// Data anonymization (GDPR compliance)\nexport const anonymizeChatLogs = async (\n  organizationId: string,\n  retentionDays: number\n) => {\n  const cutoffDate = new Date();\n  cutoffDate.setDate(cutoffDate.getDate() - retentionDays);\n\n  const job = await createRetentionJob({\n    organizationId,\n    jobType: 'chat_logs_anonymization',\n    metadata: { cutoffDate: cutoffDate.toISOString(), retentionDays },\n  });\n\n  try {\n    await updateRetentionJob(job.id, {\n      status: 'running',\n      startedAt: new Date(),\n    });\n\n    // Find chat logs to anonymize\n    const logsToAnonymize = await prisma.chatLog.findMany({\n      where: {\n        widget: {\n          company: {\n            organizationId,\n          },\n        },\n        createdAt: {\n          lt: cutoffDate,\n        },\n        userId: {\n          not: null,\n        },\n      },\n      select: { id: true },\n    });\n\n    // Anonymize by removing user references and PII\n    const anonymizedLogs = await prisma.chatLog.updateMany({\n      where: {\n        id: {\n          in: logsToAnonymize.map((log) => log.id),\n        },\n      },\n      data: {\n        userId: null,\n        // Could add more anonymization logic here\n      },\n    });\n\n    await updateRetentionJob(job.id, {\n      status: 'completed',\n      itemsProcessed: logsToAnonymize.length,\n      itemsAnonymized: anonymizedLogs.count,\n      completedAt: new Date(),\n    });\n\n    logger.info('Chat logs anonymization completed', {\n      organizationId,\n      anonymizedCount: anonymizedLogs.count,\n      retentionDays,\n    });\n\n    return anonymizedLogs.count;\n  } catch (error) {\n    await updateRetentionJob(job.id, {\n      status: 'failed',\n      error: error instanceof Error ? error.message : 'Unknown error',\n      completedAt: new Date(),\n    });\n\n    logger.error('Chat logs anonymization failed', {\n      organizationId,\n      error: error instanceof Error ? error.message : error,\n    });\n\n    throw error;\n  }\n};\n\n// Get retention job history\nexport const getRetentionJobHistory = async (\n  organizationId?: string,\n  limit: number = 50\n) => {\n  return prisma.dataRetentionJob.findMany({\n    where: organizationId ? { organizationId } : {},\n    orderBy: { createdAt: 'desc' },\n    take: limit,\n    include: organizationId\n      ? {}\n      : {\n          organization: {\n            select: { name: true },\n          },\n        },\n  });\n};\n"],"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","ignoreList":[]}