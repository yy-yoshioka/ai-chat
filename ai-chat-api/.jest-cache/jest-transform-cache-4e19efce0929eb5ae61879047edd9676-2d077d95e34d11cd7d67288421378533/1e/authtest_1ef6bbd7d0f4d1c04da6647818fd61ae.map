{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/unit/middleware/auth.test.ts","mappings":"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","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/unit/middleware/auth.test.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport jwt from 'jsonwebtoken';\nimport { authMiddleware } from '../../../src/middleware/auth';\nimport { prisma } from '../../../src/lib/prisma';\n\n// Mock prisma\njest.mock('../../../src/lib/prisma', () => ({\n  prisma: {\n    user: {\n      findUnique: jest.fn(),\n    },\n  },\n}));\n\ndescribe('Auth Middleware', () => {\n  let mockRequest: Partial<Request>;\n  let mockResponse: Partial<Response>;\n  let mockNext: NextFunction;\n\n  beforeEach(() => {\n    mockRequest = {\n      cookies: {},\n      headers: {},\n    };\n    mockResponse = {\n      status: jest.fn().mockReturnThis(),\n      json: jest.fn(),\n    };\n    mockNext = jest.fn();\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should authenticate valid token', async () => {\n    const userId = 'test-user-id';\n    const token = jwt.sign(\n      { id: userId, email: 'test@example.com' },\n      process.env.JWT_SECRET!,\n      { expiresIn: '1d' }\n    );\n\n    mockRequest.cookies = { token: token };\n    (prisma.user.findUnique as jest.Mock).mockResolvedValue({\n      id: userId,\n      email: 'test@example.com',\n      roles: ['viewer'],\n    });\n\n    await authMiddleware(\n      mockRequest as Request,\n      mockResponse as Response,\n      mockNext\n    );\n\n    expect(prisma.user.findUnique).toHaveBeenCalledWith({\n      where: { id: userId },\n      select: { id: true, email: true, roles: true },\n    });\n    expect(mockRequest.user).toEqual(\n      expect.objectContaining({\n        id: userId,\n        email: 'test@example.com',\n        roles: ['viewer'],\n      })\n    );\n    expect(mockNext).toHaveBeenCalled();\n  });\n\n  it('should reject request without token', async () => {\n    await authMiddleware(\n      mockRequest as Request,\n      mockResponse as Response,\n      mockNext\n    );\n\n    expect(mockResponse.status).toHaveBeenCalledWith(401);\n    expect(mockResponse.json).toHaveBeenCalledWith({ error: 'Unauthorized' });\n    expect(mockNext).not.toHaveBeenCalled();\n  });\n\n  it('should reject invalid token', async () => {\n    mockRequest.cookies = { token: 'invalid-token' };\n\n    await authMiddleware(\n      mockRequest as Request,\n      mockResponse as Response,\n      mockNext\n    );\n\n    expect(mockResponse.status).toHaveBeenCalledWith(401);\n    expect(mockResponse.json).toHaveBeenCalledWith({ error: 'Invalid token' });\n    expect(mockNext).not.toHaveBeenCalled();\n  });\n\n  it('should reject expired token', async () => {\n    // Create an actually expired token\n    const token = jwt.sign(\n      { id: 'test-user-id', email: 'test@example.com' },\n      process.env.JWT_SECRET!,\n      { expiresIn: '-1s' } // Expired 1 second ago\n    );\n\n    mockRequest.cookies = { token: token };\n\n    await authMiddleware(\n      mockRequest as Request,\n      mockResponse as Response,\n      mockNext\n    );\n\n    expect(mockResponse.status).toHaveBeenCalledWith(401);\n    expect(mockResponse.json).toHaveBeenCalledWith({ error: 'Token expired' });\n    expect(mockNext).not.toHaveBeenCalled();\n  });\n\n  it('should reject token for non-existent user', async () => {\n    const token = jwt.sign(\n      { id: 'non-existent', email: 'test@example.com' },\n      process.env.JWT_SECRET!\n    );\n\n    mockRequest.cookies = { token: token };\n    (prisma.user.findUnique as jest.Mock).mockResolvedValue(null);\n\n    await authMiddleware(\n      mockRequest as Request,\n      mockResponse as Response,\n      mockNext\n    );\n\n    expect(mockResponse.status).toHaveBeenCalledWith(401);\n    expect(mockResponse.json).toHaveBeenCalledWith({ error: 'User not found' });\n    expect(mockNext).not.toHaveBeenCalled();\n  });\n\n  it('should handle database errors', async () => {\n    const token = jwt.sign(\n      { id: 'test-user-id', email: 'test@example.com' },\n      process.env.JWT_SECRET!\n    );\n\n    mockRequest.cookies = { token: token };\n    (prisma.user.findUnique as jest.Mock).mockRejectedValue(\n      new Error('DB Error')\n    );\n\n    await authMiddleware(\n      mockRequest as Request,\n      mockResponse as Response,\n      mockNext\n    );\n\n    expect(mockResponse.status).toHaveBeenCalledWith(500);\n    expect(mockResponse.json).toHaveBeenCalledWith({\n      error: 'Internal server error',\n    });\n    expect(mockNext).not.toHaveBeenCalled();\n  });\n});\n"],"version":3}