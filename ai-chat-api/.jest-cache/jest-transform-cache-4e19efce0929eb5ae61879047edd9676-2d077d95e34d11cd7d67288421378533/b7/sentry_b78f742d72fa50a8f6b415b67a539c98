7609b9ecd82486ae9c80f7ead0c114b1
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.metricsCollector = exports.initSentry = void 0;
const Sentry = __importStar(require("@sentry/node"));
const profiling_node_1 = require("@sentry/profiling-node");
class MetricsCollector {
    constructor() {
        this.responseTimeBuffer = [];
        this.errorCount = 0;
        this.requestCount = 0;
        this.windowStartTime = Date.now();
        this.WINDOW_SIZE_MS = 60000; // 1 minute
        this.BUFFER_SIZE = 100;
    }
    static getInstance() {
        if (!MetricsCollector.instance) {
            MetricsCollector.instance = new MetricsCollector();
        }
        return MetricsCollector.instance;
    }
    recordResponseTime(responseTime) {
        this.responseTimeBuffer.push(responseTime);
        if (this.responseTimeBuffer.length > this.BUFFER_SIZE) {
            this.responseTimeBuffer.shift();
        }
        this.requestCount++;
        this.checkWindowReset();
    }
    recordError() {
        this.errorCount++;
        this.checkWindowReset();
    }
    checkWindowReset() {
        const now = Date.now();
        if (now - this.windowStartTime >= this.WINDOW_SIZE_MS) {
            this.checkAlertConditions();
            this.resetWindow();
        }
    }
    resetWindow() {
        this.errorCount = 0;
        this.requestCount = 0;
        this.windowStartTime = Date.now();
    }
    checkAlertConditions() {
        const p95ResponseTime = this.calculateP95();
        const errorRate = this.requestCount > 0 ? (this.errorCount / this.requestCount) * 100 : 0;
        if (p95ResponseTime > 1000 || errorRate > 1) {
            this.sendSlackAlert({
                responseTime: p95ResponseTime,
                errorRate,
                timestamp: new Date(),
            });
        }
    }
    calculateP95() {
        if (this.responseTimeBuffer.length === 0)
            return 0;
        const sorted = [...this.responseTimeBuffer].sort((a, b) => a - b);
        const index = Math.ceil(sorted.length * 0.95) - 1;
        return sorted[index] || 0;
    }
    sendSlackAlert(metrics) {
        return __awaiter(this, void 0, void 0, function* () {
            const webhookUrl = process.env.SLACK_WEBHOOK_URL;
            if (!webhookUrl) {
                console.warn('SLACK_WEBHOOK_URL not configured');
                return;
            }
            const message = {
                text: '🚨 Performance Alert',
                blocks: [
                    {
                        type: 'section',
                        text: {
                            type: 'mrkdwn',
                            text: '*🚨 AI Chat Performance Alert*',
                        },
                    },
                    {
                        type: 'section',
                        fields: [
                            {
                                type: 'mrkdwn',
                                text: `*P95 Response Time:*\n${metrics.responseTime.toFixed(2)}ms`,
                            },
                            {
                                type: 'mrkdwn',
                                text: `*Error Rate:*\n${metrics.errorRate.toFixed(2)}%`,
                            },
                            {
                                type: 'mrkdwn',
                                text: `*Timestamp:*\n${metrics.timestamp.toISOString()}`,
                            },
                            {
                                type: 'mrkdwn',
                                text: `*Environment:*\n${process.env.NODE_ENV || 'unknown'}`,
                            },
                        ],
                    },
                    {
                        type: 'section',
                        text: {
                            type: 'mrkdwn',
                            text: metrics.responseTime > 1000
                                ? '⚠️ P95 response time exceeded 1 second threshold'
                                : '⚠️ Error rate exceeded 1% threshold',
                        },
                    },
                    {
                        type: 'actions',
                        elements: [
                            {
                                type: 'button',
                                text: {
                                    type: 'plain_text',
                                    text: 'View Sentry Dashboard',
                                },
                                url: `https://sentry.io/organizations/${process.env.SENTRY_ORG}/projects/${process.env.SENTRY_PROJECT}/`,
                                action_id: 'view_sentry',
                            },
                        ],
                    },
                ],
            };
            try {
                const response = yield fetch(webhookUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(message),
                });
                if (!response.ok) {
                    throw new Error(`Slack API error: ${response.status}`);
                }
                console.log('Slack alert sent successfully');
            }
            catch (error) {
                console.error('Failed to send Slack alert:', error);
                Sentry.captureException(error);
            }
        });
    }
    getMetrics() {
        return {
            responseTime: this.calculateP95(),
            errorRate: this.requestCount > 0 ? (this.errorCount / this.requestCount) * 100 : 0,
            timestamp: new Date(),
        };
    }
}
function initSentry() {
    if (!process.env.SENTRY_DSN) {
        console.warn('SENTRY_DSN not configured, skipping Sentry initialization');
        return;
    }
    Sentry.init({
        dsn: process.env.SENTRY_DSN,
        environment: process.env.NODE_ENV || 'development',
        integrations: [
            (0, profiling_node_1.nodeProfilingIntegration)(),
            Sentry.httpIntegration({ breadcrumbs: true }),
            Sentry.expressIntegration(),
            Sentry.mongooseIntegration(),
            Sentry.prismaIntegration(),
        ],
        tracesSampleRate: process.env.NODE_ENV === 'production' ? 0.1 : 1.0,
        profilesSampleRate: process.env.NODE_ENV === 'production' ? 0.1 : 1.0,
        beforeSend(event) {
            // Don't send events for handled errors in development
            if (process.env.NODE_ENV === 'development' && event.level === 'error') {
                console.error('Sentry event (dev):', event);
                return null;
            }
            return event;
        },
    });
    console.log('Sentry initialized');
}
exports.initSentry = initSentry;
exports.metricsCollector = MetricsCollector.getInstance();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,