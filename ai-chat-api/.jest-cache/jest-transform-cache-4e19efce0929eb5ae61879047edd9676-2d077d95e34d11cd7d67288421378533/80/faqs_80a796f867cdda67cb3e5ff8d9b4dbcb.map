{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/routes/faqs.ts","mappings":"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","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/routes/faqs.ts"],"sourcesContent":["import { Router } from 'express';\nimport { prisma } from '../lib/prisma';\nimport { authMiddleware } from '../middleware/auth';\nimport { adminMiddleware } from '../middleware/admin';\n\nconst router = Router();\n\n// GET /faqs - list FAQs with optional pagination\nrouter.get('/', async (req, res) => {\n  const page = parseInt(req.query.page as string) || 1;\n  const limit = parseInt(req.query.limit as string) || 10;\n  const skip = (page - 1) * limit;\n  const faqs = await prisma.fAQ.findMany({\n    skip,\n    take: limit,\n    orderBy: { createdAt: 'desc' },\n  });\n  res.json(faqs);\n});\n\n// GET /faqs/search?keyword=xxx - search FAQs\nrouter.get('/search', async (req, res) => {\n  const keyword = req.query.keyword as string;\n  if (!keyword) return res.json([]);\n  const faqs = await prisma.fAQ.findMany({\n    where: {\n      OR: [\n        { question: { contains: keyword } },\n        { answer: { contains: keyword } },\n      ],\n    },\n  });\n  res.json(faqs);\n});\n\n// GET /faqs/:id - get specific FAQ\nrouter.get('/:id', async (req, res) => {\n  const faq = await prisma.fAQ.findUnique({ where: { id: req.params.id } });\n  if (!faq) return res.status(404).json({ message: 'FAQ not found' });\n  res.json(faq);\n});\n\n// POST /faqs - create FAQ (admin)\nrouter.post('/', authMiddleware, adminMiddleware, async (req, res) => {\n  const { question, answer, organizationId } = req.body;\n  if (!question || !answer || !organizationId) {\n    return res\n      .status(400)\n      .json({ message: 'Question, answer, and organizationId are required' });\n  }\n  const faq = await prisma.fAQ.create({\n    data: {\n      question,\n      answer,\n      organizationId,\n    },\n  });\n  res.status(201).json(faq);\n});\n\n// PUT /faqs/:id - update FAQ (admin)\nrouter.put('/:id', authMiddleware, adminMiddleware, async (req, res) => {\n  const { question, answer } = req.body;\n  const faq = await prisma.fAQ.update({\n    where: { id: req.params.id },\n    data: { question, answer },\n  });\n  res.json(faq);\n});\n\n// DELETE /faqs/:id - delete FAQ (admin)\nrouter.delete('/:id', authMiddleware, adminMiddleware, async (req, res) => {\n  await prisma.fAQ.delete({ where: { id: req.params.id } });\n  res.status(204).end();\n});\n\nexport default router;\n"],"version":3}