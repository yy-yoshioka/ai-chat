e7f3f8566f6be439c12493824f6c9792
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const supertest_1 = __importDefault(require("supertest"));
const app_1 = __importDefault(require("../../src/app"));
const prisma_1 = require("../../src/lib/prisma");
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const client_1 = require("@prisma/client");
describe('Users Routes', () => {
    let authToken;
    let adminToken;
    let userId;
    let adminId;
    let organizationId;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        // Create test organization
        const organization = yield prisma_1.prisma.organization.create({
            data: {
                name: 'Test Organization',
                slug: 'test-org',
            },
        });
        organizationId = organization.id;
        // Create regular user
        const user = yield prisma_1.prisma.user.create({
            data: {
                email: 'user@example.com',
                password: 'hashed_password',
                name: 'Regular User',
                roles: [client_1.Role.viewer],
                organizationId,
            },
        });
        userId = user.id;
        authToken = jsonwebtoken_1.default.sign({ userId: user.id, email: user.email }, process.env.JWT_SECRET, { expiresIn: '1d' });
        // Create admin user
        const admin = yield prisma_1.prisma.user.create({
            data: {
                email: 'admin@example.com',
                password: 'hashed_password',
                name: 'Admin User',
                roles: [client_1.Role.owner],
                organizationId,
            },
        });
        adminId = admin.id;
        adminToken = jsonwebtoken_1.default.sign({ userId: admin.id, email: admin.email }, process.env.JWT_SECRET, { expiresIn: '1d' });
    }));
    describe('GET /api/users', () => {
        it('should return users list for admin', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = yield (0, supertest_1.default)(app_1.default)
                .get('/api/users')
                .set('Cookie', `auth-token=${adminToken}`)
                .query({ page: 1, limit: 10 });
            expect(response.status).toBe(200);
            expect(response.body).toHaveProperty('users');
            expect(response.body).toHaveProperty('total', 2);
            expect(response.body).toHaveProperty('page', 1);
            expect(response.body).toHaveProperty('totalPages', 1);
            expect(response.body.users).toHaveLength(2);
        }));
        it('should filter users by role', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = yield (0, supertest_1.default)(app_1.default)
                .get('/api/users')
                .set('Cookie', `auth-token=${adminToken}`)
                .query({ role: 'owner' });
            expect(response.status).toBe(200);
            expect(response.body.users).toHaveLength(1);
            expect(response.body.users[0].roles).toContain('owner');
        }));
        it('should search users by email', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = yield (0, supertest_1.default)(app_1.default)
                .get('/api/users')
                .set('Cookie', `auth-token=${adminToken}`)
                .query({ search: 'admin@' });
            expect(response.status).toBe(200);
            expect(response.body.users).toHaveLength(1);
            expect(response.body.users[0].email).toBe('admin@example.com');
        }));
        it('should return 403 for non-admin users', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = yield (0, supertest_1.default)(app_1.default)
                .get('/api/users')
                .set('Cookie', `auth-token=${authToken}`);
            expect(response.status).toBe(403);
            expect(response.body).toHaveProperty('error', 'Insufficient permissions');
        }));
    });
    describe('PUT /api/users/:id', () => {
        it('should update user roles as admin', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = yield (0, supertest_1.default)(app_1.default)
                .put(`/api/users/${userId}`)
                .set('Cookie', `auth-token=${adminToken}`)
                .send({ roles: [client_1.Role.editor] });
            expect(response.status).toBe(200);
            expect(response.body.roles).toContain('editor');
        }));
        it('should update user name as admin', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = yield (0, supertest_1.default)(app_1.default)
                .put(`/api/users/${userId}`)
                .set('Cookie', `auth-token=${adminToken}`)
                .send({ name: 'Updated Name' });
            expect(response.status).toBe(200);
            expect(response.body.name).toBe('Updated Name');
        }));
        it('should return 404 for non-existent user', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = yield (0, supertest_1.default)(app_1.default)
                .put('/api/users/non-existent-id')
                .set('Cookie', `auth-token=${adminToken}`)
                .send({ name: 'Test' });
            expect(response.status).toBe(404);
            expect(response.body).toHaveProperty('error', 'User not found');
        }));
        it('should return 403 for non-admin users', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = yield (0, supertest_1.default)(app_1.default)
                .put(`/api/users/${adminId}`)
                .set('Cookie', `auth-token=${authToken}`)
                .send({ name: 'Test' });
            expect(response.status).toBe(403);
        }));
    });
    describe('DELETE /api/users/:id', () => {
        it('should delete user as admin', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = yield (0, supertest_1.default)(app_1.default)
                .delete(`/api/users/${userId}`)
                .set('Cookie', `auth-token=${adminToken}`);
            expect(response.status).toBe(200);
            expect(response.body).toHaveProperty('message', 'User deleted successfully');
            const deletedUser = yield prisma_1.prisma.user.findUnique({
                where: { id: userId },
            });
            expect(deletedUser).toBeNull();
        }));
        it('should prevent self-deletion', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = yield (0, supertest_1.default)(app_1.default)
                .delete(`/api/users/${adminId}`)
                .set('Cookie', `auth-token=${adminToken}`);
            expect(response.status).toBe(400);
            expect(response.body).toHaveProperty('error', 'Cannot delete your own account');
        }));
    });
    describe('POST /api/users/invite', () => {
        it('should send invitation as admin', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = yield (0, supertest_1.default)(app_1.default)
                .post('/api/users/invite')
                .set('Cookie', `auth-token=${adminToken}`)
                .send({
                email: 'newuser@example.com',
                role: client_1.Role.editor,
            });
            expect(response.status).toBe(200);
            expect(response.body).toHaveProperty('message', 'Invitation sent successfully');
        }));
        it('should prevent duplicate invitations', () => __awaiter(void 0, void 0, void 0, function* () {
            // Create existing user
            yield prisma_1.prisma.user.create({
                data: {
                    email: 'existing@example.com',
                    password: 'hashed',
                    organizationId,
                },
            });
            const response = yield (0, supertest_1.default)(app_1.default)
                .post('/api/users/invite')
                .set('Cookie', `auth-token=${adminToken}`)
                .send({
                email: 'existing@example.com',
                role: client_1.Role.editor,
            });
            expect(response.status).toBe(400);
            expect(response.body).toHaveProperty('error', 'User already exists');
        }));
        it('should validate email format', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = yield (0, supertest_1.default)(app_1.default)
                .post('/api/users/invite')
                .set('Cookie', `auth-token=${adminToken}`)
                .send({
                email: 'invalid-email',
                role: client_1.Role.editor,
            });
            expect(response.status).toBe(400);
            expect(response.body).toHaveProperty('error');
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,