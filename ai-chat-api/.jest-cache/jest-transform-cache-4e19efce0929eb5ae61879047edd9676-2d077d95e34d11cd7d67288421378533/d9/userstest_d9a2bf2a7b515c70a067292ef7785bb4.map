{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/integration/users.test.ts","mappings":"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","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/integration/users.test.ts"],"sourcesContent":["import request from 'supertest';\nimport app from '../../src/app';\nimport { prisma } from '../../src/lib/prisma';\nimport jwt from 'jsonwebtoken';\nimport { Role } from '@prisma/client';\n\ndescribe('Users Routes', () => {\n  let authToken: string;\n  let adminToken: string;\n  let userId: string;\n  let adminId: string;\n  let organizationId: string;\n\n  beforeEach(async () => {\n    // Create test organization\n    const organization = await prisma.organization.create({\n      data: {\n        name: 'Test Organization',\n        slug: 'test-org',\n      },\n    });\n    organizationId = organization.id;\n\n    // Create regular user\n    const user = await prisma.user.create({\n      data: {\n        email: 'user@example.com',\n        password: 'hashed_password',\n        name: 'Regular User',\n        roles: [Role.viewer],\n        organizationId,\n      },\n    });\n    userId = user.id;\n    authToken = jwt.sign(\n      { userId: user.id, email: user.email },\n      process.env.JWT_SECRET!,\n      { expiresIn: '1d' }\n    );\n\n    // Create admin user\n    const admin = await prisma.user.create({\n      data: {\n        email: 'admin@example.com',\n        password: 'hashed_password',\n        name: 'Admin User',\n        roles: [Role.owner],\n        organizationId,\n      },\n    });\n    adminId = admin.id;\n    adminToken = jwt.sign(\n      { userId: admin.id, email: admin.email },\n      process.env.JWT_SECRET!,\n      { expiresIn: '1d' }\n    );\n  });\n\n  describe('GET /api/users', () => {\n    it('should return users list for admin', async () => {\n      const response = await request(app)\n        .get('/api/users')\n        .set('Cookie', `auth-token=${adminToken}`)\n        .query({ page: 1, limit: 10 });\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty('users');\n      expect(response.body).toHaveProperty('total', 2);\n      expect(response.body).toHaveProperty('page', 1);\n      expect(response.body).toHaveProperty('totalPages', 1);\n      expect(response.body.users).toHaveLength(2);\n    });\n\n    it('should filter users by role', async () => {\n      const response = await request(app)\n        .get('/api/users')\n        .set('Cookie', `auth-token=${adminToken}`)\n        .query({ role: 'owner' });\n\n      expect(response.status).toBe(200);\n      expect(response.body.users).toHaveLength(1);\n      expect(response.body.users[0].roles).toContain('owner');\n    });\n\n    it('should search users by email', async () => {\n      const response = await request(app)\n        .get('/api/users')\n        .set('Cookie', `auth-token=${adminToken}`)\n        .query({ search: 'admin@' });\n\n      expect(response.status).toBe(200);\n      expect(response.body.users).toHaveLength(1);\n      expect(response.body.users[0].email).toBe('admin@example.com');\n    });\n\n    it('should return 403 for non-admin users', async () => {\n      const response = await request(app)\n        .get('/api/users')\n        .set('Cookie', `auth-token=${authToken}`);\n\n      expect(response.status).toBe(403);\n      expect(response.body).toHaveProperty('error', 'Insufficient permissions');\n    });\n  });\n\n  describe('PUT /api/users/:id', () => {\n    it('should update user roles as admin', async () => {\n      const response = await request(app)\n        .put(`/api/users/${userId}`)\n        .set('Cookie', `auth-token=${adminToken}`)\n        .send({ roles: [Role.editor] });\n\n      expect(response.status).toBe(200);\n      expect(response.body.roles).toContain('editor');\n    });\n\n    it('should update user name as admin', async () => {\n      const response = await request(app)\n        .put(`/api/users/${userId}`)\n        .set('Cookie', `auth-token=${adminToken}`)\n        .send({ name: 'Updated Name' });\n\n      expect(response.status).toBe(200);\n      expect(response.body.name).toBe('Updated Name');\n    });\n\n    it('should return 404 for non-existent user', async () => {\n      const response = await request(app)\n        .put('/api/users/non-existent-id')\n        .set('Cookie', `auth-token=${adminToken}`)\n        .send({ name: 'Test' });\n\n      expect(response.status).toBe(404);\n      expect(response.body).toHaveProperty('error', 'User not found');\n    });\n\n    it('should return 403 for non-admin users', async () => {\n      const response = await request(app)\n        .put(`/api/users/${adminId}`)\n        .set('Cookie', `auth-token=${authToken}`)\n        .send({ name: 'Test' });\n\n      expect(response.status).toBe(403);\n    });\n  });\n\n  describe('DELETE /api/users/:id', () => {\n    it('should delete user as admin', async () => {\n      const response = await request(app)\n        .delete(`/api/users/${userId}`)\n        .set('Cookie', `auth-token=${adminToken}`);\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty(\n        'message',\n        'User deleted successfully'\n      );\n\n      const deletedUser = await prisma.user.findUnique({\n        where: { id: userId },\n      });\n      expect(deletedUser).toBeNull();\n    });\n\n    it('should prevent self-deletion', async () => {\n      const response = await request(app)\n        .delete(`/api/users/${adminId}`)\n        .set('Cookie', `auth-token=${adminToken}`);\n\n      expect(response.status).toBe(400);\n      expect(response.body).toHaveProperty(\n        'error',\n        'Cannot delete your own account'\n      );\n    });\n  });\n\n  describe('POST /api/users/invite', () => {\n    it('should send invitation as admin', async () => {\n      const response = await request(app)\n        .post('/api/users/invite')\n        .set('Cookie', `auth-token=${adminToken}`)\n        .send({\n          email: 'newuser@example.com',\n          role: Role.editor,\n        });\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty(\n        'message',\n        'Invitation sent successfully'\n      );\n    });\n\n    it('should prevent duplicate invitations', async () => {\n      // Create existing user\n      await prisma.user.create({\n        data: {\n          email: 'existing@example.com',\n          password: 'hashed',\n          organizationId,\n        },\n      });\n\n      const response = await request(app)\n        .post('/api/users/invite')\n        .set('Cookie', `auth-token=${adminToken}`)\n        .send({\n          email: 'existing@example.com',\n          role: Role.editor,\n        });\n\n      expect(response.status).toBe(400);\n      expect(response.body).toHaveProperty('error', 'User already exists');\n    });\n\n    it('should validate email format', async () => {\n      const response = await request(app)\n        .post('/api/users/invite')\n        .set('Cookie', `auth-token=${adminToken}`)\n        .send({\n          email: 'invalid-email',\n          role: Role.editor,\n        });\n\n      expect(response.status).toBe(400);\n      expect(response.body).toHaveProperty('error');\n    });\n  });\n});\n"],"version":3}