{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/integration/reports.test.ts","mappings":"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","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/integration/reports.test.ts"],"sourcesContent":["import request from 'supertest';\nimport app from '../../src/app';\nimport { prisma } from '../../src/lib/prisma';\nimport jwt from 'jsonwebtoken';\nimport { Role } from '@prisma/client';\n\ndescribe('Reports Routes', () => {\n  let authToken: string;\n  let userId: string;\n  let organizationId: string;\n  let widgetId: string;\n\n  beforeEach(async () => {\n    // Create test organization\n    const organization = await prisma.organization.create({\n      data: {\n        name: 'Test Organization',\n        slug: 'test-org',\n      },\n    });\n    organizationId = organization.id;\n\n    // Create test company\n    const company = await prisma.company.create({\n      data: {\n        name: 'Test Company',\n        email: 'company@example.com',\n        organizationId,\n      },\n    });\n\n    // Create test widget\n    const widget = await prisma.widget.create({\n      data: {\n        widgetKey: 'test-widget',\n        name: 'Test Widget',\n        companyId: company.id,\n      },\n    });\n    widgetId = widget.id;\n\n    // Create test user\n    const user = await prisma.user.create({\n      data: {\n        email: 'test@example.com',\n        password: 'hashed_password',\n        name: 'Test User',\n        roles: [Role.org_admin],\n        organizationId,\n      },\n    });\n    userId = user.id;\n\n    authToken = jwt.sign(\n      { userId: user.id, email: user.email },\n      process.env.JWT_SECRET!,\n      { expiresIn: '1d' }\n    );\n\n    // Create test chat logs\n    const yesterday = new Date();\n    yesterday.setDate(yesterday.getDate() - 1);\n\n    const weekAgo = new Date();\n    weekAgo.setDate(weekAgo.getDate() - 7);\n\n    await prisma.chatLog.createMany({\n      data: [\n        {\n          userId,\n          widgetId,\n          question: 'How do I reset my password?',\n          answer: 'You can reset your password from the settings page.',\n          tokens: 15,\n          createdAt: new Date(),\n        },\n        {\n          userId,\n          widgetId,\n          question: 'What are your business hours?',\n          answer: 'We are open Monday to Friday, 9 AM to 5 PM.',\n          tokens: 12,\n          createdAt: yesterday,\n        },\n        {\n          userId,\n          widgetId,\n          question: 'How can I contact support?',\n          answer: 'You can contact support at support@example.com.',\n          tokens: 10,\n          createdAt: weekAgo,\n        },\n      ],\n    });\n  });\n\n  describe('GET /api/reports/summary', () => {\n    it('should return report summary for default period', async () => {\n      const response = await request(app)\n        .get('/api/reports/summary')\n        .set('Cookie', `auth-token=${authToken}`);\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty('totalChats');\n      expect(response.body).toHaveProperty('uniqueUsers');\n      expect(response.body).toHaveProperty('totalTokens');\n      expect(response.body).toHaveProperty('avgTokensPerChat');\n      expect(response.body).toHaveProperty('topQuestions');\n      expect(response.body.topQuestions).toBeInstanceOf(Array);\n    });\n\n    it('should filter by date range', async () => {\n      const startDate = new Date();\n      startDate.setDate(startDate.getDate() - 2);\n      const endDate = new Date();\n\n      const response = await request(app)\n        .get('/api/reports/summary')\n        .set('Cookie', `auth-token=${authToken}`)\n        .query({\n          startDate: startDate.toISOString(),\n          endDate: endDate.toISOString(),\n        });\n\n      expect(response.status).toBe(200);\n      expect(response.body.totalChats).toBe(2); // Only today and yesterday\n    });\n\n    it('should filter by widget', async () => {\n      // Create another widget with no chats\n      const anotherWidget = await prisma.widget.create({\n        data: {\n          widgetKey: 'another-widget',\n          name: 'Another Widget',\n          companyId: (await prisma.company.findFirst())!.id,\n        },\n      });\n\n      const response = await request(app)\n        .get('/api/reports/summary')\n        .set('Cookie', `auth-token=${authToken}`)\n        .query({ widgetId });\n\n      expect(response.status).toBe(200);\n      expect(response.body.totalChats).toBe(3);\n    });\n  });\n\n  describe('GET /api/reports/chart', () => {\n    it('should return chart data grouped by day', async () => {\n      const response = await request(app)\n        .get('/api/reports/chart')\n        .set('Cookie', `auth-token=${authToken}`)\n        .query({ groupBy: 'day' });\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty('data');\n      expect(response.body.data).toBeInstanceOf(Array);\n      expect(response.body.data.length).toBeGreaterThan(0);\n\n      response.body.data.forEach((item: any) => {\n        expect(item).toHaveProperty('date');\n        expect(item).toHaveProperty('count');\n        expect(item).toHaveProperty('tokens');\n      });\n    });\n\n    it('should support grouping by hour', async () => {\n      const response = await request(app)\n        .get('/api/reports/chart')\n        .set('Cookie', `auth-token=${authToken}`)\n        .query({ groupBy: 'hour' });\n\n      expect(response.status).toBe(200);\n      expect(response.body.data).toBeInstanceOf(Array);\n    });\n\n    it('should support grouping by week', async () => {\n      const response = await request(app)\n        .get('/api/reports/chart')\n        .set('Cookie', `auth-token=${authToken}`)\n        .query({ groupBy: 'week' });\n\n      expect(response.status).toBe(200);\n      expect(response.body.data).toBeInstanceOf(Array);\n    });\n\n    it('should support grouping by month', async () => {\n      const response = await request(app)\n        .get('/api/reports/chart')\n        .set('Cookie', `auth-token=${authToken}`)\n        .query({ groupBy: 'month' });\n\n      expect(response.status).toBe(200);\n      expect(response.body.data).toBeInstanceOf(Array);\n    });\n  });\n\n  describe('GET /api/reports/csv', () => {\n    it('should export report data as CSV', async () => {\n      const response = await request(app)\n        .get('/api/reports/csv')\n        .set('Cookie', `auth-token=${authToken}`);\n\n      expect(response.status).toBe(200);\n      expect(response.headers['content-type']).toContain('text/csv');\n      expect(response.headers['content-disposition']).toContain('attachment');\n      expect(response.headers['content-disposition']).toContain('chat-report');\n\n      // Check CSV content\n      const csvLines = response.text.split('\\n');\n      expect(csvLines.length).toBeGreaterThan(1); // Header + data\n      expect(csvLines[0]).toContain('Date');\n      expect(csvLines[0]).toContain('User');\n      expect(csvLines[0]).toContain('Question');\n    });\n\n    it('should include date range in filename', async () => {\n      const startDate = new Date();\n      startDate.setDate(startDate.getDate() - 7);\n\n      const response = await request(app)\n        .get('/api/reports/csv')\n        .set('Cookie', `auth-token=${authToken}`)\n        .query({ startDate: startDate.toISOString() });\n\n      expect(response.status).toBe(200);\n      expect(response.headers['content-disposition']).toContain('chat-report');\n    });\n\n    it('should handle empty results', async () => {\n      // Query for future dates to get empty results\n      const futureDate = new Date();\n      futureDate.setFullYear(futureDate.getFullYear() + 1);\n\n      const response = await request(app)\n        .get('/api/reports/csv')\n        .set('Cookie', `auth-token=${authToken}`)\n        .query({\n          startDate: futureDate.toISOString(),\n          endDate: futureDate.toISOString(),\n        });\n\n      expect(response.status).toBe(200);\n      expect(response.headers['content-type']).toContain('text/csv');\n      const csvLines = response.text.split('\\n').filter((line) => line.trim());\n      expect(csvLines.length).toBe(1); // Only header\n    });\n  });\n\n  describe('Error handling', () => {\n    it('should return 401 for unauthenticated requests', async () => {\n      const endpoints = ['/summary', '/chart', '/csv'];\n\n      for (const endpoint of endpoints) {\n        const response = await request(app).get(`/api/reports${endpoint}`);\n\n        expect(response.status).toBe(401);\n      }\n    });\n\n    it('should handle database errors gracefully', async () => {\n      jest\n        .spyOn(prisma.chatLog, 'count')\n        .mockRejectedValueOnce(new Error('DB Error'));\n\n      const response = await request(app)\n        .get('/api/reports/summary')\n        .set('Cookie', `auth-token=${authToken}`);\n\n      expect(response.status).toBe(500);\n      expect(response.body).toHaveProperty('error');\n    });\n  });\n});\n"],"version":3}