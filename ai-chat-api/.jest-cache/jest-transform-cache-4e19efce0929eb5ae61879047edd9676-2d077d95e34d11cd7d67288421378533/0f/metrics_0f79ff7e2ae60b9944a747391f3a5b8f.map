{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/middleware/metrics.ts","mappings":"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","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/middleware/metrics.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport * as Sentry from '@sentry/node';\nimport { metricsCollector } from '../lib/sentry';\nimport { customMetrics, recordMetric } from '../lib/telemetry';\nimport { prisma } from '../lib/prisma';\nimport { logger } from '../lib/logger';\n\nexport function metricsMiddleware(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  const startTime = Date.now();\n\n  // Add request context to Sentry\n  Sentry.setTag('route', req.route?.path || req.path);\n  Sentry.setTag('method', req.method);\n\n  // Increment active connections\n  recordMetric(customMetrics.activeConnections, 1);\n\n  // Capture response time when request finishes\n  res.on('finish', () => {\n    const responseTime = Date.now() - startTime;\n\n    // Record response time\n    metricsCollector.recordResponseTime(responseTime);\n\n    // Record response time in OpenTelemetry\n    recordMetric(customMetrics.httpRequestDuration, responseTime, {\n      method: req.method,\n      route: req.route?.path || req.path,\n      status_code: res.statusCode,\n    });\n\n    // Decrement active connections\n    recordMetric(customMetrics.activeConnections, -1);\n\n    // Store metric in database for system health monitoring\n    if (responseTime > 100) {\n      // Only store significant response times\n      prisma.systemMetric\n        .create({\n          data: {\n            service: 'api',\n            metricType: 'response_time',\n            value: responseTime,\n            unit: 'ms',\n            metadata: {\n              method: req.method,\n              path: req.path,\n              statusCode: res.statusCode,\n            },\n          },\n        })\n        .catch((error) => {\n          logger.error('Failed to store response time metric', error);\n        });\n    }\n\n    // Record error if status code indicates error\n    if (res.statusCode >= 400) {\n      metricsCollector.recordError();\n\n      // Record error in OpenTelemetry\n      recordMetric(customMetrics.errors, 1, {\n        method: req.method,\n        route: req.route?.path || req.path,\n        status_code: res.statusCode,\n      });\n\n      // Capture error context in Sentry\n      Sentry.setContext('response', {\n        status: res.statusCode,\n        responseTime,\n        path: req.path,\n        method: req.method,\n      });\n    }\n\n    // Log slow requests\n    if (responseTime > 1000) {\n      console.warn(\n        `Slow request detected: ${req.method} ${req.path} - ${responseTime}ms`\n      );\n      Sentry.addBreadcrumb({\n        message: 'Slow request',\n        level: 'warning',\n        data: {\n          method: req.method,\n          path: req.path,\n          responseTime,\n          statusCode: res.statusCode,\n        },\n      });\n    }\n  });\n\n  next();\n}\n\nexport function errorTrackingMiddleware(\n  error: Error,\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  // Capture exception in Sentry\n  Sentry.captureException(error, {\n    tags: {\n      route: req.route?.path || req.path,\n      method: req.method,\n    },\n    contexts: {\n      request: {\n        method: req.method,\n        url: req.url,\n        headers: req.headers,\n        body: req.body,\n      },\n    },\n  });\n\n  // Record error metric\n  metricsCollector.recordError();\n\n  // Log error\n  console.error('Unhandled error:', error);\n\n  // Send error response\n  if (!res.headersSent) {\n    res.status(500).json({\n      error: 'Internal server error',\n      message:\n        process.env.NODE_ENV === 'development' ? error.message : undefined,\n    });\n  }\n\n  next(error);\n}\n"],"version":3}