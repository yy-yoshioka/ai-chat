f2578489f8c5a5190758d2c16a81e821
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorTrackingMiddleware = exports.metricsMiddleware = void 0;
const Sentry = __importStar(require("@sentry/node"));
const sentry_1 = require("../lib/sentry");
const telemetry_1 = require("../lib/telemetry");
const prisma_1 = require("../lib/prisma");
const logger_1 = require("../lib/logger");
function metricsMiddleware(req, res, next) {
    var _a;
    const startTime = Date.now();
    // Add request context to Sentry
    Sentry.setTag('route', ((_a = req.route) === null || _a === void 0 ? void 0 : _a.path) || req.path);
    Sentry.setTag('method', req.method);
    // Increment active connections
    (0, telemetry_1.recordMetric)(telemetry_1.customMetrics.activeConnections, 1);
    // Capture response time when request finishes
    res.on('finish', () => {
        var _a, _b;
        const responseTime = Date.now() - startTime;
        // Record response time
        sentry_1.metricsCollector.recordResponseTime(responseTime);
        // Record response time in OpenTelemetry
        (0, telemetry_1.recordMetric)(telemetry_1.customMetrics.httpRequestDuration, responseTime, {
            method: req.method,
            route: ((_a = req.route) === null || _a === void 0 ? void 0 : _a.path) || req.path,
            status_code: res.statusCode,
        });
        // Decrement active connections
        (0, telemetry_1.recordMetric)(telemetry_1.customMetrics.activeConnections, -1);
        // Store metric in database for system health monitoring
        if (responseTime > 100) {
            // Only store significant response times
            prisma_1.prisma.systemMetric
                .create({
                data: {
                    service: 'api',
                    metricType: 'response_time',
                    value: responseTime,
                    unit: 'ms',
                    metadata: {
                        method: req.method,
                        path: req.path,
                        statusCode: res.statusCode,
                    },
                },
            })
                .catch((error) => {
                logger_1.logger.error('Failed to store response time metric', error);
            });
        }
        // Record error if status code indicates error
        if (res.statusCode >= 400) {
            sentry_1.metricsCollector.recordError();
            // Record error in OpenTelemetry
            (0, telemetry_1.recordMetric)(telemetry_1.customMetrics.errors, 1, {
                method: req.method,
                route: ((_b = req.route) === null || _b === void 0 ? void 0 : _b.path) || req.path,
                status_code: res.statusCode,
            });
            // Capture error context in Sentry
            Sentry.setContext('response', {
                status: res.statusCode,
                responseTime,
                path: req.path,
                method: req.method,
            });
        }
        // Log slow requests
        if (responseTime > 1000) {
            console.warn(`Slow request detected: ${req.method} ${req.path} - ${responseTime}ms`);
            Sentry.addBreadcrumb({
                message: 'Slow request',
                level: 'warning',
                data: {
                    method: req.method,
                    path: req.path,
                    responseTime,
                    statusCode: res.statusCode,
                },
            });
        }
    });
    next();
}
exports.metricsMiddleware = metricsMiddleware;
function errorTrackingMiddleware(error, req, res, next) {
    var _a;
    // Capture exception in Sentry
    Sentry.captureException(error, {
        tags: {
            route: ((_a = req.route) === null || _a === void 0 ? void 0 : _a.path) || req.path,
            method: req.method,
        },
        contexts: {
            request: {
                method: req.method,
                url: req.url,
                headers: req.headers,
                body: req.body,
            },
        },
    });
    // Record error metric
    sentry_1.metricsCollector.recordError();
    // Log error
    console.error('Unhandled error:', error);
    // Send error response
    if (!res.headersSent) {
        res.status(500).json({
            error: 'Internal server error',
            message: process.env.NODE_ENV === 'development' ? error.message : undefined,
        });
    }
    next(error);
}
exports.errorTrackingMiddleware = errorTrackingMiddleware;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,