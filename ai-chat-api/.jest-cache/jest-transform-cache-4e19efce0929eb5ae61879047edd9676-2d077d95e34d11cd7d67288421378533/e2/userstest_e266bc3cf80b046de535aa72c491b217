3846acbc3cb19c8db0b6990f03c10635
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock dependencies
jest.mock('../../src/lib/prisma');
jest.mock('../../src/middleware/auth');
jest.mock('../../src/middleware/admin');
jest.mock('../../src/middleware/organizationAccess');
jest.mock('../../src/services/webhookService');
jest.mock('../../src/utils/password');
jest.mock('crypto');
const supertest_1 = __importDefault(require("supertest"));
const express_1 = __importDefault(require("express"));
const prisma_1 = require("../../src/lib/prisma");
const users_1 = __importDefault(require("../../src/routes/users"));
const auth_1 = require("../../src/middleware/auth");
const admin_1 = require("../../src/middleware/admin");
const organizationAccess_1 = require("../../src/middleware/organizationAccess");
const test_data_1 = require("../fixtures/test-data");
const client_1 = require("@prisma/client");
const webhookService_1 = require("../../src/services/webhookService");
const password_1 = require("../../src/utils/password");
// Mock crypto for consistent invite tokens
const mockCrypto = require('crypto');
mockCrypto.randomBytes = jest.fn().mockReturnValue({
    toString: jest.fn().mockReturnValue('mock-invite-token-12345'),
});
describe('Users Routes', () => {
    let app;
    const adminUser = Object.assign(Object.assign({}, test_data_1.testUser), { id: 'admin-user-id', roles: [client_1.Role.org_admin] });
    const memberUser = {
        id: 'member-user-id',
        name: 'Member User',
        email: 'member@example.com',
        roles: [client_1.Role.editor],
        organizationId: test_data_1.testOrganization.id,
        createdAt: new Date('2024-01-15'),
        updatedAt: new Date('2024-01-20'),
    };
    const guestUser = {
        id: 'guest-user-id',
        name: 'Guest User',
        email: 'guest@example.com',
        roles: [client_1.Role.viewer],
        organizationId: test_data_1.testOrganization.id,
        createdAt: new Date('2024-01-20'),
        updatedAt: new Date('2024-01-25'),
    };
    beforeEach(() => {
        app = (0, express_1.default)();
        app.use(express_1.default.json());
        app.use('/api/users', users_1.default);
        // Setup middleware mocks
        auth_1.authMiddleware.mockImplementation((req, res, next) => {
            req.user = Object.assign(Object.assign({}, adminUser), { organization: test_data_1.testOrganization });
            next();
        });
        admin_1.adminMiddleware.mockImplementation((req, res, next) => {
            next();
        });
        organizationAccess_1.requireOrganizationAccess.mockImplementation((req, res, next) => {
            next();
        });
        password_1.hashPassword.mockResolvedValue('hashed-password');
        // Reset all mocks
        jest.clearAllMocks();
    });
    describe('GET /api/users', () => {
        it('should return paginated list of users in organization', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockUsers = [adminUser, memberUser, guestUser];
            prisma_1.prisma.user.findUnique.mockResolvedValue({
                organizationId: test_data_1.testOrganization.id,
            });
            prisma_1.prisma.user.findMany.mockResolvedValue(mockUsers);
            prisma_1.prisma.user.count.mockResolvedValue(3);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/users')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`)
                .query({ page: 1, limit: 10 });
            expect(response.status).toBe(200);
            expect(response.body).toMatchObject({
                users: [
                    {
                        id: adminUser.id,
                        name: adminUser.name,
                        email: adminUser.email,
                        role: 'admin',
                        status: 'active',
                    },
                    {
                        id: memberUser.id,
                        name: memberUser.name,
                        email: memberUser.email,
                        role: 'member',
                        status: 'active',
                    },
                    {
                        id: guestUser.id,
                        name: guestUser.name,
                        email: guestUser.email,
                        role: 'guest',
                        status: 'active',
                    },
                ],
                total: 3,
                page: 1,
                limit: 10,
                totalPages: 1,
            });
        }));
        it('should filter users by search term', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.user.findUnique.mockResolvedValue({
                organizationId: test_data_1.testOrganization.id,
            });
            prisma_1.prisma.user.findMany.mockResolvedValue([memberUser]);
            prisma_1.prisma.user.count.mockResolvedValue(1);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/users')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`)
                .query({ search: 'member' });
            expect(response.status).toBe(200);
            expect(response.body.users).toHaveLength(1);
            expect(response.body.users[0].email).toBe(memberUser.email);
            expect(prisma_1.prisma.user.findMany).toHaveBeenCalledWith(expect.objectContaining({
                where: expect.objectContaining({
                    OR: [
                        { name: { contains: 'member', mode: 'insensitive' } },
                        { email: { contains: 'member', mode: 'insensitive' } },
                    ],
                }),
            }));
        }));
        it('should filter users by role', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.user.findUnique.mockResolvedValue({
                organizationId: test_data_1.testOrganization.id,
            });
            prisma_1.prisma.user.findMany.mockResolvedValue([adminUser]);
            prisma_1.prisma.user.count.mockResolvedValue(1);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/users')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`)
                .query({ role: 'admin' });
            expect(response.status).toBe(200);
            expect(response.body.users).toHaveLength(1);
            expect(response.body.users[0].role).toBe('admin');
            expect(prisma_1.prisma.user.findMany).toHaveBeenCalledWith(expect.objectContaining({
                where: expect.objectContaining({
                    roles: { has: client_1.Role.org_admin },
                }),
            }));
        }));
        it('should handle pagination correctly', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.user.findUnique.mockResolvedValue({
                organizationId: test_data_1.testOrganization.id,
            });
            prisma_1.prisma.user.findMany.mockResolvedValue([memberUser]);
            prisma_1.prisma.user.count.mockResolvedValue(25);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/users')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`)
                .query({ page: 2, limit: 5 });
            expect(response.status).toBe(200);
            expect(response.body).toMatchObject({
                page: 2,
                limit: 5,
                total: 25,
                totalPages: 5,
            });
            expect(prisma_1.prisma.user.findMany).toHaveBeenCalledWith(expect.objectContaining({
                skip: 5, // (page 2 - 1) * limit 5
                take: 5,
            }));
        }));
        it('should return 400 if user not associated with organization', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.user.findUnique.mockResolvedValue({
                organizationId: null,
            });
            const response = yield (0, supertest_1.default)(app)
                .get('/api/users')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(400);
            expect(response.body).toEqual({
                error: 'User not associated with an organization',
            });
        }));
    });
    describe('GET /api/users/:id', () => {
        it('should return user by ID', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.user.findUnique.mockResolvedValue({
                organizationId: test_data_1.testOrganization.id,
            });
            prisma_1.prisma.user.findFirst.mockResolvedValue(memberUser);
            const response = yield (0, supertest_1.default)(app)
                .get(`/api/users/${memberUser.id}`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body).toMatchObject({
                id: memberUser.id,
                name: memberUser.name,
                email: memberUser.email,
                role: 'member',
                status: 'active',
            });
            expect(prisma_1.prisma.user.findFirst).toHaveBeenCalledWith({
                where: {
                    id: memberUser.id,
                    organizationId: test_data_1.testOrganization.id,
                },
                select: expect.any(Object),
            });
        }));
        it('should return 404 if user not found', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.user.findUnique.mockResolvedValue({
                organizationId: test_data_1.testOrganization.id,
            });
            prisma_1.prisma.user.findFirst.mockResolvedValue(null);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/users/non-existent-id')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(404);
            expect(response.body).toEqual({ error: 'User not found' });
        }));
        it('should transform roles correctly', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.user.findUnique.mockResolvedValue({
                organizationId: test_data_1.testOrganization.id,
            });
            const ownerUser = Object.assign(Object.assign({}, memberUser), { roles: [client_1.Role.owner] });
            prisma_1.prisma.user.findFirst.mockResolvedValue(ownerUser);
            const response = yield (0, supertest_1.default)(app)
                .get(`/api/users/${memberUser.id}`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body.role).toBe('admin');
        }));
    });
    describe('PUT /api/users/:id', () => {
        it('should update user successfully as admin', () => __awaiter(void 0, void 0, void 0, function* () {
            const updateData = {
                name: 'Updated Name',
                email: 'updated@example.com',
                role: 'admin',
            };
            prisma_1.prisma.user.findUnique.mockResolvedValue({
                organizationId: test_data_1.testOrganization.id,
                roles: [client_1.Role.org_admin],
            });
            prisma_1.prisma.user.findFirst.mockResolvedValue(memberUser);
            const updatedUser = Object.assign(Object.assign(Object.assign({}, memberUser), updateData), { roles: [client_1.Role.org_admin], updatedAt: new Date() });
            prisma_1.prisma.user.update.mockResolvedValue(updatedUser);
            const response = yield (0, supertest_1.default)(app)
                .put(`/api/users/${memberUser.id}`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`)
                .send(updateData);
            expect(response.status).toBe(200);
            expect(response.body).toMatchObject({
                id: memberUser.id,
                name: updateData.name,
                email: updateData.email,
                role: 'admin',
            });
            expect(prisma_1.prisma.user.update).toHaveBeenCalledWith({
                where: { id: memberUser.id },
                data: {
                    name: updateData.name,
                    email: updateData.email,
                    roles: [client_1.Role.org_admin],
                },
                select: expect.any(Object),
            });
        }));
        it('should allow users to update their own profile', () => __awaiter(void 0, void 0, void 0, function* () {
            const updateData = {
                name: 'Self Updated Name',
            };
            prisma_1.prisma.user.findUnique.mockResolvedValue({
                organizationId: test_data_1.testOrganization.id,
                roles: [client_1.Role.editor],
            });
            prisma_1.prisma.user.findFirst.mockResolvedValue(memberUser);
            const updatedUser = Object.assign(Object.assign({}, memberUser), { name: updateData.name, updatedAt: new Date() });
            prisma_1.prisma.user.update.mockResolvedValue(updatedUser);
            // Mock as member user updating themselves
            auth_1.authMiddleware.mockImplementationOnce((req, res, next) => {
                req.user = Object.assign(Object.assign({}, memberUser), { organization: test_data_1.testOrganization });
                next();
            });
            const response = yield (0, supertest_1.default)(app)
                .put(`/api/users/${memberUser.id}`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(memberUser.id, test_data_1.testOrganization.id)}`)
                .send(updateData);
            expect(response.status).toBe(200);
            expect(response.body.name).toBe(updateData.name);
        }));
        it('should not allow non-admin users to update others', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.user.findUnique.mockResolvedValue({
                organizationId: test_data_1.testOrganization.id,
                roles: [client_1.Role.editor], // Not admin
            });
            // Mock as member user trying to update another user
            auth_1.authMiddleware.mockImplementationOnce((req, res, next) => {
                req.user = Object.assign(Object.assign({}, memberUser), { organization: test_data_1.testOrganization });
                next();
            });
            const response = yield (0, supertest_1.default)(app)
                .put(`/api/users/${adminUser.id}`) // Different user ID
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(memberUser.id, test_data_1.testOrganization.id)}`)
                .send({ name: 'Unauthorized Update' });
            expect(response.status).toBe(403);
            expect(response.body).toEqual({ error: 'Insufficient permissions' });
        }));
        it('should not allow non-admin users to change roles', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.user.findUnique.mockResolvedValue({
                organizationId: test_data_1.testOrganization.id,
                roles: [client_1.Role.editor], // Not admin
            });
            prisma_1.prisma.user.findFirst.mockResolvedValue(memberUser);
            const updatedUser = Object.assign(Object.assign({}, memberUser), { name: 'Updated Name', updatedAt: new Date() });
            prisma_1.prisma.user.update.mockResolvedValue(updatedUser);
            // Mock as member user updating themselves
            auth_1.authMiddleware.mockImplementationOnce((req, res, next) => {
                req.user = Object.assign(Object.assign({}, memberUser), { organization: test_data_1.testOrganization });
                next();
            });
            const response = yield (0, supertest_1.default)(app)
                .put(`/api/users/${memberUser.id}`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(memberUser.id, test_data_1.testOrganization.id)}`)
                .send({ name: 'Updated Name', role: 'admin' }); // Trying to elevate role
            expect(response.status).toBe(200);
            // Role should not be updated for non-admin
            expect(prisma_1.prisma.user.update).toHaveBeenCalledWith({
                where: { id: memberUser.id },
                data: {
                    name: 'Updated Name',
                    // roles should not be in the update data
                },
                select: expect.any(Object),
            });
        }));
        it('should trigger webhook on user update', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.user.findUnique.mockResolvedValue({
                organizationId: test_data_1.testOrganization.id,
                roles: [client_1.Role.org_admin],
            });
            prisma_1.prisma.user.findFirst.mockResolvedValue(memberUser);
            const updatedUser = Object.assign(Object.assign({}, memberUser), { name: 'Updated Name', updatedAt: new Date() });
            prisma_1.prisma.user.update.mockResolvedValue(updatedUser);
            const triggerWebhookSpy = jest
                .spyOn(webhookService_1.webhookService, 'triggerWebhook')
                .mockResolvedValue();
            const response = yield (0, supertest_1.default)(app)
                .put(`/api/users/${memberUser.id}`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`)
                .send({ name: 'Updated Name' });
            expect(response.status).toBe(200);
            expect(triggerWebhookSpy).toHaveBeenCalledWith(test_data_1.testOrganization.id, 'user.updated', expect.objectContaining({
                userId: memberUser.id,
                email: memberUser.email,
                name: 'Updated Name',
                updatedBy: expect.objectContaining({
                    id: adminUser.id,
                }),
                changes: expect.objectContaining({
                    name: true,
                }),
            }));
        }));
    });
    describe('DELETE /api/users/:id', () => {
        it('should delete user successfully as admin', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.user.findUnique.mockResolvedValue({
                organizationId: test_data_1.testOrganization.id,
                roles: [client_1.Role.org_admin],
            });
            prisma_1.prisma.user.findFirst.mockResolvedValue(memberUser);
            prisma_1.prisma.user.delete.mockResolvedValue(memberUser);
            const response = yield (0, supertest_1.default)(app)
                .delete(`/api/users/${memberUser.id}`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body).toEqual({ success: true });
            expect(prisma_1.prisma.user.delete).toHaveBeenCalledWith({
                where: { id: memberUser.id },
            });
        }));
        it('should not allow users to delete themselves', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = yield (0, supertest_1.default)(app)
                .delete(`/api/users/${adminUser.id}`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(400);
            expect(response.body).toEqual({
                error: 'Cannot delete your own account',
            });
        }));
        it('should not allow non-admin users to delete others', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.user.findUnique.mockResolvedValue({
                organizationId: test_data_1.testOrganization.id,
                roles: [client_1.Role.editor], // Not admin
            });
            // Mock as member user
            auth_1.authMiddleware.mockImplementationOnce((req, res, next) => {
                req.user = Object.assign(Object.assign({}, memberUser), { organization: test_data_1.testOrganization });
                next();
            });
            const response = yield (0, supertest_1.default)(app)
                .delete(`/api/users/${guestUser.id}`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(memberUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(403);
            expect(response.body).toEqual({ error: 'Insufficient permissions' });
        }));
        it('should return 404 if user to delete not found', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.user.findUnique.mockResolvedValue({
                organizationId: test_data_1.testOrganization.id,
                roles: [client_1.Role.org_admin],
            });
            prisma_1.prisma.user.findFirst.mockResolvedValue(null);
            const response = yield (0, supertest_1.default)(app)
                .delete('/api/users/non-existent-id')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(404);
            expect(response.body).toEqual({ error: 'User not found' });
        }));
    });
    describe('POST /api/users/invite', () => {
        it('should invite user successfully as admin', () => __awaiter(void 0, void 0, void 0, function* () {
            const inviteData = {
                email: 'newuser@example.com',
                name: 'New User',
                role: 'member',
            };
            prisma_1.prisma.user.findUnique
                .mockResolvedValueOnce({
                organizationId: test_data_1.testOrganization.id,
                roles: [client_1.Role.org_admin],
            })
                .mockResolvedValueOnce(null); // No existing user
            const newUser = {
                id: 'new-user-id',
                email: inviteData.email,
            };
            prisma_1.prisma.user.create.mockResolvedValue(newUser);
            const triggerWebhookSpy = jest
                .spyOn(webhookService_1.webhookService, 'triggerWebhook')
                .mockResolvedValue();
            const response = yield (0, supertest_1.default)(app)
                .post('/api/users/invite')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`)
                .send(inviteData);
            expect(response.status).toBe(200);
            expect(response.body).toMatchObject({
                success: true,
                message: 'User invited successfully',
                inviteId: newUser.id,
            });
            expect(prisma_1.prisma.user.create).toHaveBeenCalledWith({
                data: {
                    email: inviteData.email,
                    name: inviteData.name,
                    password: 'hashed-password',
                    roles: [client_1.Role.editor], // member role
                    organizationId: test_data_1.testOrganization.id,
                },
                select: expect.any(Object),
            });
            expect(triggerWebhookSpy).toHaveBeenCalledWith(test_data_1.testOrganization.id, 'user.created', expect.objectContaining({
                userId: newUser.id,
                email: inviteData.email,
                name: inviteData.name,
                role: inviteData.role,
                invitedBy: expect.objectContaining({
                    id: adminUser.id,
                }),
            }));
        }));
        it('should invite admin user with correct roles', () => __awaiter(void 0, void 0, void 0, function* () {
            const inviteData = {
                email: 'admin@example.com',
                name: 'Admin User',
                role: 'admin',
            };
            prisma_1.prisma.user.findUnique
                .mockResolvedValueOnce({
                organizationId: test_data_1.testOrganization.id,
                roles: [client_1.Role.org_admin],
            })
                .mockResolvedValueOnce(null);
            const newUser = {
                id: 'new-admin-id',
                email: inviteData.email,
            };
            prisma_1.prisma.user.create.mockResolvedValue(newUser);
            const response = yield (0, supertest_1.default)(app)
                .post('/api/users/invite')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`)
                .send(inviteData);
            expect(response.status).toBe(200);
            expect(prisma_1.prisma.user.create).toHaveBeenCalledWith({
                data: expect.objectContaining({
                    roles: [client_1.Role.org_admin], // admin role
                }),
                select: expect.any(Object),
            });
        }));
        it('should invite guest user with correct roles', () => __awaiter(void 0, void 0, void 0, function* () {
            const inviteData = {
                email: 'guest@example.com',
                name: 'Guest User',
                role: 'guest',
            };
            prisma_1.prisma.user.findUnique
                .mockResolvedValueOnce({
                organizationId: test_data_1.testOrganization.id,
                roles: [client_1.Role.org_admin],
            })
                .mockResolvedValueOnce(null);
            const newUser = {
                id: 'new-guest-id',
                email: inviteData.email,
            };
            prisma_1.prisma.user.create.mockResolvedValue(newUser);
            const response = yield (0, supertest_1.default)(app)
                .post('/api/users/invite')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`)
                .send(inviteData);
            expect(response.status).toBe(200);
            expect(prisma_1.prisma.user.create).toHaveBeenCalledWith({
                data: expect.objectContaining({
                    roles: [client_1.Role.viewer], // guest role
                }),
                select: expect.any(Object),
            });
        }));
        it('should not allow non-admin users to invite', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.user.findUnique.mockResolvedValue({
                organizationId: test_data_1.testOrganization.id,
                roles: [client_1.Role.editor], // Not admin
            });
            // Mock as member user
            auth_1.authMiddleware.mockImplementationOnce((req, res, next) => {
                req.user = Object.assign(Object.assign({}, memberUser), { organization: test_data_1.testOrganization });
                next();
            });
            const response = yield (0, supertest_1.default)(app)
                .post('/api/users/invite')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(memberUser.id, test_data_1.testOrganization.id)}`)
                .send({
                email: 'newuser@example.com',
                role: 'member',
            });
            expect(response.status).toBe(403);
            expect(response.body).toEqual({
                error: 'Insufficient permissions to invite users',
            });
        }));
        it('should return 409 if user already exists', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.user.findUnique
                .mockResolvedValueOnce({
                organizationId: test_data_1.testOrganization.id,
                roles: [client_1.Role.org_admin],
            })
                .mockResolvedValueOnce(memberUser); // Existing user
            const response = yield (0, supertest_1.default)(app)
                .post('/api/users/invite')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`)
                .send({
                email: memberUser.email,
                role: 'member',
            });
            expect(response.status).toBe(409);
            expect(response.body).toEqual({
                error: 'User with this email already exists',
            });
        }));
        it('should generate secure invite tokens and passwords', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.user.findUnique
                .mockResolvedValueOnce({
                organizationId: test_data_1.testOrganization.id,
                roles: [client_1.Role.org_admin],
            })
                .mockResolvedValueOnce(null);
            prisma_1.prisma.user.create.mockResolvedValue({
                id: 'new-user-id',
                email: 'test@example.com',
            });
            yield (0, supertest_1.default)(app)
                .post('/api/users/invite')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`)
                .send({
                email: 'test@example.com',
                role: 'member',
            });
            // Verify crypto.randomBytes was called for both invite token and temp password
            expect(mockCrypto.randomBytes).toHaveBeenCalledWith(32); // Invite token
            expect(mockCrypto.randomBytes).toHaveBeenCalledWith(16); // Temp password
            expect(password_1.hashPassword).toHaveBeenCalled();
        }));
    });
    describe('Middleware integration', () => {
        it('should require authentication', () => __awaiter(void 0, void 0, void 0, function* () {
            auth_1.authMiddleware.mockImplementationOnce((req, res) => {
                res.status(401).json({ error: 'Unauthorized' });
            });
            const response = yield (0, supertest_1.default)(app).get('/api/users');
            expect(response.status).toBe(401);
            expect(response.body).toEqual({ error: 'Unauthorized' });
        }));
        it('should require admin permissions', () => __awaiter(void 0, void 0, void 0, function* () {
            admin_1.adminMiddleware.mockImplementationOnce((req, res) => {
                res.status(403).json({ error: 'Admin access required' });
            });
            const response = yield (0, supertest_1.default)(app)
                .get('/api/users')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(memberUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(403);
            expect(response.body).toEqual({ error: 'Admin access required' });
        }));
        it('should require organization access', () => __awaiter(void 0, void 0, void 0, function* () {
            organizationAccess_1.requireOrganizationAccess.mockImplementationOnce((req, res) => {
                res.status(403).json({ error: 'Organization access required' });
            });
            const response = yield (0, supertest_1.default)(app)
                .get('/api/users')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(403);
            expect(response.body).toEqual({ error: 'Organization access required' });
        }));
    });
    describe('Error handling', () => {
        it('should handle database errors gracefully', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.user.findUnique.mockRejectedValue(new Error('Database connection failed'));
            const response = yield (0, supertest_1.default)(app)
                .get('/api/users')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(500);
            expect(response.body).toMatchObject({
                error: 'Failed to fetch users',
                message: 'Database connection failed',
            });
        }));
        it('should handle webhook failures gracefully', () => __awaiter(void 0, void 0, void 0, function* () {
            prisma_1.prisma.user.findUnique.mockResolvedValue({
                organizationId: test_data_1.testOrganization.id,
                roles: [client_1.Role.org_admin],
            });
            prisma_1.prisma.user.findFirst.mockResolvedValue(memberUser);
            const updatedUser = Object.assign(Object.assign({}, memberUser), { name: 'Updated Name', updatedAt: new Date() });
            prisma_1.prisma.user.update.mockResolvedValue(updatedUser);
            // Mock webhook failure
            jest
                .spyOn(webhookService_1.webhookService, 'triggerWebhook')
                .mockRejectedValue(new Error('Webhook service unavailable'));
            const response = yield (0, supertest_1.default)(app)
                .put(`/api/users/${memberUser.id}`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(adminUser.id, test_data_1.testOrganization.id)}`)
                .send({ name: 'Updated Name' });
            // Should still succeed even if webhook fails
            expect(response.status).toBe(200);
            expect(response.body.name).toBe('Updated Name');
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,