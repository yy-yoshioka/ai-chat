{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/routes/users.test.ts","mappings":"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","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/routes/users.test.ts"],"sourcesContent":["import request from 'supertest';\nimport express from 'express';\nimport { prisma } from '../../src/lib/prisma';\nimport usersRouter from '../../src/routes/users';\nimport { authMiddleware } from '../../src/middleware/auth';\nimport { adminMiddleware } from '../../src/middleware/admin';\nimport { requireOrganizationAccess } from '../../src/middleware/organizationAccess';\nimport {\n  testUser,\n  testOrganization,\n  generateTestToken,\n} from '../fixtures/test-data';\nimport { Role } from '@prisma/client';\nimport { webhookService } from '../../src/services/webhookService';\nimport { hashPassword } from '../../src/utils/password';\n\n// Mock dependencies\njest.mock('../../src/lib/prisma');\njest.mock('../../src/middleware/auth');\njest.mock('../../src/middleware/admin');\njest.mock('../../src/middleware/organizationAccess');\njest.mock('../../src/services/webhookService');\njest.mock('../../src/utils/password');\njest.mock('crypto');\n\n// Mock crypto for consistent invite tokens\nconst mockCrypto = require('crypto');\nmockCrypto.randomBytes = jest.fn().mockReturnValue({\n  toString: jest.fn().mockReturnValue('mock-invite-token-12345'),\n});\n\ndescribe('Users Routes', () => {\n  let app: express.Application;\n\n  const adminUser = {\n    ...testUser,\n    id: 'admin-user-id',\n    roles: [Role.org_admin],\n  };\n\n  const memberUser = {\n    id: 'member-user-id',\n    name: 'Member User',\n    email: 'member@example.com',\n    roles: [Role.editor],\n    organizationId: testOrganization.id,\n    createdAt: new Date('2024-01-15'),\n    updatedAt: new Date('2024-01-20'),\n  };\n\n  const guestUser = {\n    id: 'guest-user-id',\n    name: 'Guest User',\n    email: 'guest@example.com',\n    roles: [Role.viewer],\n    organizationId: testOrganization.id,\n    createdAt: new Date('2024-01-20'),\n    updatedAt: new Date('2024-01-25'),\n  };\n\n  beforeEach(() => {\n    app = express();\n    app.use(express.json());\n    app.use('/api/users', usersRouter);\n\n    // Setup middleware mocks\n    (authMiddleware as jest.Mock).mockImplementation((req, res, next) => {\n      req.user = { ...adminUser, organization: testOrganization };\n      next();\n    });\n\n    (adminMiddleware as jest.Mock).mockImplementation((req, res, next) => {\n      next();\n    });\n\n    (requireOrganizationAccess as jest.Mock).mockImplementation(\n      (req, res, next) => {\n        next();\n      }\n    );\n\n    (hashPassword as jest.Mock).mockResolvedValue('hashed-password');\n\n    // Reset all mocks\n    jest.clearAllMocks();\n  });\n\n  describe('GET /api/users', () => {\n    it('should return paginated list of users in organization', async () => {\n      const mockUsers = [adminUser, memberUser, guestUser];\n\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue({\n        organizationId: testOrganization.id,\n      });\n\n      (prisma.user.findMany as jest.Mock).mockResolvedValue(mockUsers);\n      (prisma.user.count as jest.Mock).mockResolvedValue(3);\n\n      const response = await request(app)\n        .get('/api/users')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        )\n        .query({ page: 1, limit: 10 });\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        users: [\n          {\n            id: adminUser.id,\n            name: adminUser.name,\n            email: adminUser.email,\n            role: 'admin',\n            status: 'active',\n          },\n          {\n            id: memberUser.id,\n            name: memberUser.name,\n            email: memberUser.email,\n            role: 'member',\n            status: 'active',\n          },\n          {\n            id: guestUser.id,\n            name: guestUser.name,\n            email: guestUser.email,\n            role: 'guest',\n            status: 'active',\n          },\n        ],\n        total: 3,\n        page: 1,\n        limit: 10,\n        totalPages: 1,\n      });\n    });\n\n    it('should filter users by search term', async () => {\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue({\n        organizationId: testOrganization.id,\n      });\n\n      (prisma.user.findMany as jest.Mock).mockResolvedValue([memberUser]);\n      (prisma.user.count as jest.Mock).mockResolvedValue(1);\n\n      const response = await request(app)\n        .get('/api/users')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        )\n        .query({ search: 'member' });\n\n      expect(response.status).toBe(200);\n      expect(response.body.users).toHaveLength(1);\n      expect(response.body.users[0].email).toBe(memberUser.email);\n\n      expect(prisma.user.findMany).toHaveBeenCalledWith(\n        expect.objectContaining({\n          where: expect.objectContaining({\n            OR: [\n              { name: { contains: 'member', mode: 'insensitive' } },\n              { email: { contains: 'member', mode: 'insensitive' } },\n            ],\n          }),\n        })\n      );\n    });\n\n    it('should filter users by role', async () => {\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue({\n        organizationId: testOrganization.id,\n      });\n\n      (prisma.user.findMany as jest.Mock).mockResolvedValue([adminUser]);\n      (prisma.user.count as jest.Mock).mockResolvedValue(1);\n\n      const response = await request(app)\n        .get('/api/users')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        )\n        .query({ role: 'admin' });\n\n      expect(response.status).toBe(200);\n      expect(response.body.users).toHaveLength(1);\n      expect(response.body.users[0].role).toBe('admin');\n\n      expect(prisma.user.findMany).toHaveBeenCalledWith(\n        expect.objectContaining({\n          where: expect.objectContaining({\n            roles: { has: Role.org_admin },\n          }),\n        })\n      );\n    });\n\n    it('should handle pagination correctly', async () => {\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue({\n        organizationId: testOrganization.id,\n      });\n\n      (prisma.user.findMany as jest.Mock).mockResolvedValue([memberUser]);\n      (prisma.user.count as jest.Mock).mockResolvedValue(25);\n\n      const response = await request(app)\n        .get('/api/users')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        )\n        .query({ page: 2, limit: 5 });\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        page: 2,\n        limit: 5,\n        total: 25,\n        totalPages: 5,\n      });\n\n      expect(prisma.user.findMany).toHaveBeenCalledWith(\n        expect.objectContaining({\n          skip: 5, // (page 2 - 1) * limit 5\n          take: 5,\n        })\n      );\n    });\n\n    it('should return 400 if user not associated with organization', async () => {\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue({\n        organizationId: null,\n      });\n\n      const response = await request(app)\n        .get('/api/users')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(400);\n      expect(response.body).toEqual({\n        error: 'User not associated with an organization',\n      });\n    });\n  });\n\n  describe('GET /api/users/:id', () => {\n    it('should return user by ID', async () => {\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue({\n        organizationId: testOrganization.id,\n      });\n\n      (prisma.user.findFirst as jest.Mock).mockResolvedValue(memberUser);\n\n      const response = await request(app)\n        .get(`/api/users/${memberUser.id}`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        id: memberUser.id,\n        name: memberUser.name,\n        email: memberUser.email,\n        role: 'member',\n        status: 'active',\n      });\n\n      expect(prisma.user.findFirst).toHaveBeenCalledWith({\n        where: {\n          id: memberUser.id,\n          organizationId: testOrganization.id,\n        },\n        select: expect.any(Object),\n      });\n    });\n\n    it('should return 404 if user not found', async () => {\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue({\n        organizationId: testOrganization.id,\n      });\n\n      (prisma.user.findFirst as jest.Mock).mockResolvedValue(null);\n\n      const response = await request(app)\n        .get('/api/users/non-existent-id')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(404);\n      expect(response.body).toEqual({ error: 'User not found' });\n    });\n\n    it('should transform roles correctly', async () => {\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue({\n        organizationId: testOrganization.id,\n      });\n\n      const ownerUser = {\n        ...memberUser,\n        roles: [Role.owner],\n      };\n\n      (prisma.user.findFirst as jest.Mock).mockResolvedValue(ownerUser);\n\n      const response = await request(app)\n        .get(`/api/users/${memberUser.id}`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body.role).toBe('admin');\n    });\n  });\n\n  describe('PUT /api/users/:id', () => {\n    it('should update user successfully as admin', async () => {\n      const updateData = {\n        name: 'Updated Name',\n        email: 'updated@example.com',\n        role: 'admin',\n      };\n\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue({\n        organizationId: testOrganization.id,\n        roles: [Role.org_admin],\n      });\n\n      (prisma.user.findFirst as jest.Mock).mockResolvedValue(memberUser);\n\n      const updatedUser = {\n        ...memberUser,\n        ...updateData,\n        roles: [Role.org_admin],\n        updatedAt: new Date(),\n      };\n\n      (prisma.user.update as jest.Mock).mockResolvedValue(updatedUser);\n\n      const response = await request(app)\n        .put(`/api/users/${memberUser.id}`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        )\n        .send(updateData);\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        id: memberUser.id,\n        name: updateData.name,\n        email: updateData.email,\n        role: 'admin',\n      });\n\n      expect(prisma.user.update).toHaveBeenCalledWith({\n        where: { id: memberUser.id },\n        data: {\n          name: updateData.name,\n          email: updateData.email,\n          roles: [Role.org_admin],\n        },\n        select: expect.any(Object),\n      });\n    });\n\n    it('should allow users to update their own profile', async () => {\n      const updateData = {\n        name: 'Self Updated Name',\n      };\n\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue({\n        organizationId: testOrganization.id,\n        roles: [Role.editor],\n      });\n\n      (prisma.user.findFirst as jest.Mock).mockResolvedValue(memberUser);\n\n      const updatedUser = {\n        ...memberUser,\n        name: updateData.name,\n        updatedAt: new Date(),\n      };\n\n      (prisma.user.update as jest.Mock).mockResolvedValue(updatedUser);\n\n      // Mock as member user updating themselves\n      (authMiddleware as jest.Mock).mockImplementationOnce((req, res, next) => {\n        req.user = { ...memberUser, organization: testOrganization };\n        next();\n      });\n\n      const response = await request(app)\n        .put(`/api/users/${memberUser.id}`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(memberUser.id, testOrganization.id)}`\n        )\n        .send(updateData);\n\n      expect(response.status).toBe(200);\n      expect(response.body.name).toBe(updateData.name);\n    });\n\n    it('should not allow non-admin users to update others', async () => {\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue({\n        organizationId: testOrganization.id,\n        roles: [Role.editor], // Not admin\n      });\n\n      // Mock as member user trying to update another user\n      (authMiddleware as jest.Mock).mockImplementationOnce((req, res, next) => {\n        req.user = { ...memberUser, organization: testOrganization };\n        next();\n      });\n\n      const response = await request(app)\n        .put(`/api/users/${adminUser.id}`) // Different user ID\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(memberUser.id, testOrganization.id)}`\n        )\n        .send({ name: 'Unauthorized Update' });\n\n      expect(response.status).toBe(403);\n      expect(response.body).toEqual({ error: 'Insufficient permissions' });\n    });\n\n    it('should not allow non-admin users to change roles', async () => {\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue({\n        organizationId: testOrganization.id,\n        roles: [Role.editor], // Not admin\n      });\n\n      (prisma.user.findFirst as jest.Mock).mockResolvedValue(memberUser);\n\n      const updatedUser = {\n        ...memberUser,\n        name: 'Updated Name',\n        updatedAt: new Date(),\n      };\n\n      (prisma.user.update as jest.Mock).mockResolvedValue(updatedUser);\n\n      // Mock as member user updating themselves\n      (authMiddleware as jest.Mock).mockImplementationOnce((req, res, next) => {\n        req.user = { ...memberUser, organization: testOrganization };\n        next();\n      });\n\n      const response = await request(app)\n        .put(`/api/users/${memberUser.id}`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(memberUser.id, testOrganization.id)}`\n        )\n        .send({ name: 'Updated Name', role: 'admin' }); // Trying to elevate role\n\n      expect(response.status).toBe(200);\n      // Role should not be updated for non-admin\n      expect(prisma.user.update).toHaveBeenCalledWith({\n        where: { id: memberUser.id },\n        data: {\n          name: 'Updated Name',\n          // roles should not be in the update data\n        },\n        select: expect.any(Object),\n      });\n    });\n\n    it('should trigger webhook on user update', async () => {\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue({\n        organizationId: testOrganization.id,\n        roles: [Role.org_admin],\n      });\n\n      (prisma.user.findFirst as jest.Mock).mockResolvedValue(memberUser);\n\n      const updatedUser = {\n        ...memberUser,\n        name: 'Updated Name',\n        updatedAt: new Date(),\n      };\n\n      (prisma.user.update as jest.Mock).mockResolvedValue(updatedUser);\n\n      const triggerWebhookSpy = jest\n        .spyOn(webhookService, 'triggerWebhook')\n        .mockResolvedValue();\n\n      const response = await request(app)\n        .put(`/api/users/${memberUser.id}`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        )\n        .send({ name: 'Updated Name' });\n\n      expect(response.status).toBe(200);\n      expect(triggerWebhookSpy).toHaveBeenCalledWith(\n        testOrganization.id,\n        'user.updated',\n        expect.objectContaining({\n          userId: memberUser.id,\n          email: memberUser.email,\n          name: 'Updated Name',\n          updatedBy: expect.objectContaining({\n            id: adminUser.id,\n          }),\n          changes: expect.objectContaining({\n            name: true,\n          }),\n        })\n      );\n    });\n  });\n\n  describe('DELETE /api/users/:id', () => {\n    it('should delete user successfully as admin', async () => {\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue({\n        organizationId: testOrganization.id,\n        roles: [Role.org_admin],\n      });\n\n      (prisma.user.findFirst as jest.Mock).mockResolvedValue(memberUser);\n      (prisma.user.delete as jest.Mock).mockResolvedValue(memberUser);\n\n      const response = await request(app)\n        .delete(`/api/users/${memberUser.id}`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toEqual({ success: true });\n\n      expect(prisma.user.delete).toHaveBeenCalledWith({\n        where: { id: memberUser.id },\n      });\n    });\n\n    it('should not allow users to delete themselves', async () => {\n      const response = await request(app)\n        .delete(`/api/users/${adminUser.id}`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(400);\n      expect(response.body).toEqual({\n        error: 'Cannot delete your own account',\n      });\n    });\n\n    it('should not allow non-admin users to delete others', async () => {\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue({\n        organizationId: testOrganization.id,\n        roles: [Role.editor], // Not admin\n      });\n\n      // Mock as member user\n      (authMiddleware as jest.Mock).mockImplementationOnce((req, res, next) => {\n        req.user = { ...memberUser, organization: testOrganization };\n        next();\n      });\n\n      const response = await request(app)\n        .delete(`/api/users/${guestUser.id}`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(memberUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(403);\n      expect(response.body).toEqual({ error: 'Insufficient permissions' });\n    });\n\n    it('should return 404 if user to delete not found', async () => {\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue({\n        organizationId: testOrganization.id,\n        roles: [Role.org_admin],\n      });\n\n      (prisma.user.findFirst as jest.Mock).mockResolvedValue(null);\n\n      const response = await request(app)\n        .delete('/api/users/non-existent-id')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(404);\n      expect(response.body).toEqual({ error: 'User not found' });\n    });\n  });\n\n  describe('POST /api/users/invite', () => {\n    it('should invite user successfully as admin', async () => {\n      const inviteData = {\n        email: 'newuser@example.com',\n        name: 'New User',\n        role: 'member',\n      };\n\n      (prisma.user.findUnique as jest.Mock)\n        .mockResolvedValueOnce({\n          organizationId: testOrganization.id,\n          roles: [Role.org_admin],\n        })\n        .mockResolvedValueOnce(null); // No existing user\n\n      const newUser = {\n        id: 'new-user-id',\n        email: inviteData.email,\n      };\n\n      (prisma.user.create as jest.Mock).mockResolvedValue(newUser);\n\n      const triggerWebhookSpy = jest\n        .spyOn(webhookService, 'triggerWebhook')\n        .mockResolvedValue();\n\n      const response = await request(app)\n        .post('/api/users/invite')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        )\n        .send(inviteData);\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        success: true,\n        message: 'User invited successfully',\n        inviteId: newUser.id,\n      });\n\n      expect(prisma.user.create).toHaveBeenCalledWith({\n        data: {\n          email: inviteData.email,\n          name: inviteData.name,\n          password: 'hashed-password',\n          roles: [Role.editor], // member role\n          organizationId: testOrganization.id,\n        },\n        select: expect.any(Object),\n      });\n\n      expect(triggerWebhookSpy).toHaveBeenCalledWith(\n        testOrganization.id,\n        'user.created',\n        expect.objectContaining({\n          userId: newUser.id,\n          email: inviteData.email,\n          name: inviteData.name,\n          role: inviteData.role,\n          invitedBy: expect.objectContaining({\n            id: adminUser.id,\n          }),\n        })\n      );\n    });\n\n    it('should invite admin user with correct roles', async () => {\n      const inviteData = {\n        email: 'admin@example.com',\n        name: 'Admin User',\n        role: 'admin',\n      };\n\n      (prisma.user.findUnique as jest.Mock)\n        .mockResolvedValueOnce({\n          organizationId: testOrganization.id,\n          roles: [Role.org_admin],\n        })\n        .mockResolvedValueOnce(null);\n\n      const newUser = {\n        id: 'new-admin-id',\n        email: inviteData.email,\n      };\n\n      (prisma.user.create as jest.Mock).mockResolvedValue(newUser);\n\n      const response = await request(app)\n        .post('/api/users/invite')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        )\n        .send(inviteData);\n\n      expect(response.status).toBe(200);\n\n      expect(prisma.user.create).toHaveBeenCalledWith({\n        data: expect.objectContaining({\n          roles: [Role.org_admin], // admin role\n        }),\n        select: expect.any(Object),\n      });\n    });\n\n    it('should invite guest user with correct roles', async () => {\n      const inviteData = {\n        email: 'guest@example.com',\n        name: 'Guest User',\n        role: 'guest',\n      };\n\n      (prisma.user.findUnique as jest.Mock)\n        .mockResolvedValueOnce({\n          organizationId: testOrganization.id,\n          roles: [Role.org_admin],\n        })\n        .mockResolvedValueOnce(null);\n\n      const newUser = {\n        id: 'new-guest-id',\n        email: inviteData.email,\n      };\n\n      (prisma.user.create as jest.Mock).mockResolvedValue(newUser);\n\n      const response = await request(app)\n        .post('/api/users/invite')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        )\n        .send(inviteData);\n\n      expect(response.status).toBe(200);\n\n      expect(prisma.user.create).toHaveBeenCalledWith({\n        data: expect.objectContaining({\n          roles: [Role.viewer], // guest role\n        }),\n        select: expect.any(Object),\n      });\n    });\n\n    it('should not allow non-admin users to invite', async () => {\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue({\n        organizationId: testOrganization.id,\n        roles: [Role.editor], // Not admin\n      });\n\n      // Mock as member user\n      (authMiddleware as jest.Mock).mockImplementationOnce((req, res, next) => {\n        req.user = { ...memberUser, organization: testOrganization };\n        next();\n      });\n\n      const response = await request(app)\n        .post('/api/users/invite')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(memberUser.id, testOrganization.id)}`\n        )\n        .send({\n          email: 'newuser@example.com',\n          role: 'member',\n        });\n\n      expect(response.status).toBe(403);\n      expect(response.body).toEqual({\n        error: 'Insufficient permissions to invite users',\n      });\n    });\n\n    it('should return 409 if user already exists', async () => {\n      (prisma.user.findUnique as jest.Mock)\n        .mockResolvedValueOnce({\n          organizationId: testOrganization.id,\n          roles: [Role.org_admin],\n        })\n        .mockResolvedValueOnce(memberUser); // Existing user\n\n      const response = await request(app)\n        .post('/api/users/invite')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        )\n        .send({\n          email: memberUser.email,\n          role: 'member',\n        });\n\n      expect(response.status).toBe(409);\n      expect(response.body).toEqual({\n        error: 'User with this email already exists',\n      });\n    });\n\n    it('should generate secure invite tokens and passwords', async () => {\n      (prisma.user.findUnique as jest.Mock)\n        .mockResolvedValueOnce({\n          organizationId: testOrganization.id,\n          roles: [Role.org_admin],\n        })\n        .mockResolvedValueOnce(null);\n\n      (prisma.user.create as jest.Mock).mockResolvedValue({\n        id: 'new-user-id',\n        email: 'test@example.com',\n      });\n\n      await request(app)\n        .post('/api/users/invite')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        )\n        .send({\n          email: 'test@example.com',\n          role: 'member',\n        });\n\n      // Verify crypto.randomBytes was called for both invite token and temp password\n      expect(mockCrypto.randomBytes).toHaveBeenCalledWith(32); // Invite token\n      expect(mockCrypto.randomBytes).toHaveBeenCalledWith(16); // Temp password\n      expect(hashPassword).toHaveBeenCalled();\n    });\n  });\n\n  describe('Middleware integration', () => {\n    it('should require authentication', async () => {\n      (authMiddleware as jest.Mock).mockImplementationOnce((req, res) => {\n        res.status(401).json({ error: 'Unauthorized' });\n      });\n\n      const response = await request(app).get('/api/users');\n\n      expect(response.status).toBe(401);\n      expect(response.body).toEqual({ error: 'Unauthorized' });\n    });\n\n    it('should require admin permissions', async () => {\n      (adminMiddleware as jest.Mock).mockImplementationOnce((req, res) => {\n        res.status(403).json({ error: 'Admin access required' });\n      });\n\n      const response = await request(app)\n        .get('/api/users')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(memberUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(403);\n      expect(response.body).toEqual({ error: 'Admin access required' });\n    });\n\n    it('should require organization access', async () => {\n      (requireOrganizationAccess as jest.Mock).mockImplementationOnce(\n        (req, res) => {\n          res.status(403).json({ error: 'Organization access required' });\n        }\n      );\n\n      const response = await request(app)\n        .get('/api/users')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(403);\n      expect(response.body).toEqual({ error: 'Organization access required' });\n    });\n  });\n\n  describe('Error handling', () => {\n    it('should handle database errors gracefully', async () => {\n      (prisma.user.findUnique as jest.Mock).mockRejectedValue(\n        new Error('Database connection failed')\n      );\n\n      const response = await request(app)\n        .get('/api/users')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(500);\n      expect(response.body).toMatchObject({\n        error: 'Failed to fetch users',\n        message: 'Database connection failed',\n      });\n    });\n\n    it('should handle webhook failures gracefully', async () => {\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue({\n        organizationId: testOrganization.id,\n        roles: [Role.org_admin],\n      });\n\n      (prisma.user.findFirst as jest.Mock).mockResolvedValue(memberUser);\n\n      const updatedUser = {\n        ...memberUser,\n        name: 'Updated Name',\n        updatedAt: new Date(),\n      };\n\n      (prisma.user.update as jest.Mock).mockResolvedValue(updatedUser);\n\n      // Mock webhook failure\n      jest\n        .spyOn(webhookService, 'triggerWebhook')\n        .mockRejectedValue(new Error('Webhook service unavailable'));\n\n      const response = await request(app)\n        .put(`/api/users/${memberUser.id}`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(adminUser.id, testOrganization.id)}`\n        )\n        .send({ name: 'Updated Name' });\n\n      // Should still succeed even if webhook fails\n      expect(response.status).toBe(200);\n      expect(response.body.name).toBe('Updated Name');\n    });\n  });\n});\n"],"version":3}