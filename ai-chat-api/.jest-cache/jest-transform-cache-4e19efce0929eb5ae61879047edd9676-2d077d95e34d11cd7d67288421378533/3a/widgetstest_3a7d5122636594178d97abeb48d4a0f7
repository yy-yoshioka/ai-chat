b4ef1409c3014ebc0162a1b95c713e86
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const supertest_1 = __importDefault(require("supertest"));
const express_1 = __importDefault(require("express"));
const widgets_1 = __importDefault(require("../../src/routes/widgets"));
const test_data_1 = require("../fixtures/test-data");
// Create Express app for testing
const app = (0, express_1.default)();
app.use(express_1.default.json());
// Mock middleware to attach user and organizationId
app.use((req, res, next) => {
    req.user = test_data_1.testUser;
    req.organizationId = test_data_1.testUser.organizationId;
    next();
});
app.use('/api/widgets', widgets_1.default);
// Get mocked services
const widgetService = require('../../src/services/widgetService');
describe('Widget Routes', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    describe('GET /api/widgets', () => {
        it('should return widgets for organization', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockResult = {
                widgets: [
                    Object.assign(Object.assign({}, test_data_1.testWidget), { company: {
                            id: test_data_1.testCompany.id,
                            name: test_data_1.testCompany.name,
                            plan: 'pro',
                        }, _count: {
                            chatLogs: 10,
                        } }),
                ],
                pagination: {
                    page: 1,
                    limit: 20,
                    total: 1,
                    totalPages: 1,
                },
            };
            widgetService.getWidgetsByOrganization.mockResolvedValue(mockResult);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/widgets')
                .query({ page: 1, limit: 20 });
            expect(response.status).toBe(200);
            expect(response.body).toEqual(mockResult);
            expect(widgetService.getWidgetsByOrganization).toHaveBeenCalledWith(test_data_1.testUser.organizationId, { page: 1, limit: 20, search: undefined });
        }));
        it('should handle search parameter', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockResult = {
                widgets: [],
                pagination: {
                    page: 1,
                    limit: 20,
                    total: 0,
                    totalPages: 0,
                },
            };
            widgetService.getWidgetsByOrganization.mockResolvedValue(mockResult);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/widgets')
                .query({ search: 'test' });
            expect(response.status).toBe(200);
            expect(widgetService.getWidgetsByOrganization).toHaveBeenCalledWith(test_data_1.testUser.organizationId, { page: 1, limit: 20, search: 'test' });
        }));
    });
    describe('GET /api/widgets/:id', () => {
        it('should return a widget by id', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockWidget = Object.assign(Object.assign({}, test_data_1.testWidget), { company: {
                    id: test_data_1.testCompany.id,
                    name: test_data_1.testCompany.name,
                    plan: 'pro',
                    organizationId: test_data_1.testUser.organizationId,
                }, knowledgeBases: [], _count: {
                    chatLogs: 10,
                    knowledgeBases: 0,
                } });
            widgetService.getWidgetById.mockResolvedValue(mockWidget);
            const response = yield (0, supertest_1.default)(app).get(`/api/widgets/${test_data_1.testWidget.id}`);
            expect(response.status).toBe(200);
            expect(response.body).toEqual(mockWidget);
            expect(widgetService.getWidgetById).toHaveBeenCalledWith(test_data_1.testWidget.id, test_data_1.testUser.organizationId);
        }));
        it('should return 404 if widget not found', () => __awaiter(void 0, void 0, void 0, function* () {
            widgetService.getWidgetById.mockResolvedValue(null);
            const response = yield (0, supertest_1.default)(app).get('/api/widgets/non-existent-id');
            expect(response.status).toBe(404);
            expect(response.body.message).toBe('Widget not found');
        }));
    });
    describe('POST /api/widgets', () => {
        it('should create a new widget', () => __awaiter(void 0, void 0, void 0, function* () {
            const createData = {
                name: 'New Widget',
                companyId: test_data_1.testCompany.id,
                themeColor: '#0000FF',
                welcomeMessage: 'Welcome!',
                placeholderText: 'Ask me anything...',
            };
            const mockCreatedWidget = Object.assign(Object.assign(Object.assign({}, test_data_1.testWidget), createData), { id: 'new-widget-id', widgetKey: 'wk_new_123', company: {
                    id: test_data_1.testCompany.id,
                    name: test_data_1.testCompany.name,
                    plan: 'pro',
                } });
            widgetService.createWidget.mockResolvedValue(mockCreatedWidget);
            const response = yield (0, supertest_1.default)(app)
                .post('/api/widgets')
                .send(createData);
            expect(response.status).toBe(201);
            expect(response.body).toEqual(mockCreatedWidget);
            expect(widgetService.createWidget).toHaveBeenCalledWith(createData, test_data_1.testUser.organizationId);
        }));
        it('should return 400 for invalid data', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = yield (0, supertest_1.default)(app)
                .post('/api/widgets')
                .send({
                name: 'Widget',
                // missing required fields
            });
            expect(response.status).toBe(400);
        }));
    });
    describe('PUT /api/widgets/:id', () => {
        it('should update a widget', () => __awaiter(void 0, void 0, void 0, function* () {
            const updateData = {
                name: 'Updated Widget',
                themeColor: '#FF0000',
            };
            const mockUpdatedWidget = Object.assign(Object.assign(Object.assign({}, test_data_1.testWidget), updateData), { company: {
                    id: test_data_1.testCompany.id,
                    name: test_data_1.testCompany.name,
                    plan: 'pro',
                } });
            widgetService.updateWidget.mockResolvedValue(mockUpdatedWidget);
            const response = yield (0, supertest_1.default)(app)
                .put(`/api/widgets/${test_data_1.testWidget.id}`)
                .send(updateData);
            expect(response.status).toBe(200);
            expect(response.body).toEqual(mockUpdatedWidget);
            expect(widgetService.updateWidget).toHaveBeenCalledWith(test_data_1.testWidget.id, updateData, test_data_1.testUser.organizationId);
        }));
        it('should return 404 if widget not found', () => __awaiter(void 0, void 0, void 0, function* () {
            widgetService.updateWidget.mockResolvedValue(null);
            const response = yield (0, supertest_1.default)(app)
                .put('/api/widgets/non-existent-id')
                .send({ name: 'Updated' });
            expect(response.status).toBe(404);
            expect(response.body.message).toBe('Widget not found');
        }));
    });
    describe('DELETE /api/widgets/:id', () => {
        it('should delete a widget', () => __awaiter(void 0, void 0, void 0, function* () {
            widgetService.deleteWidget.mockResolvedValue(test_data_1.testWidget);
            const response = yield (0, supertest_1.default)(app).delete(`/api/widgets/${test_data_1.testWidget.id}`);
            expect(response.status).toBe(200);
            expect(response.body.message).toBe('Widget deleted successfully');
            expect(widgetService.deleteWidget).toHaveBeenCalledWith(test_data_1.testWidget.id, test_data_1.testUser.organizationId);
        }));
        it('should return 404 if widget not found', () => __awaiter(void 0, void 0, void 0, function* () {
            widgetService.deleteWidget.mockResolvedValue(null);
            const response = yield (0, supertest_1.default)(app).delete('/api/widgets/non-existent-id');
            expect(response.status).toBe(404);
            expect(response.body.message).toBe('Widget not found');
        }));
    });
    describe('GET /api/widgets/:id/analytics', () => {
        it('should return widget analytics', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockAnalytics = {
                totalChats: 100,
                monthlyChats: 30,
                avgSatisfaction: 4.5,
                topQuestions: [
                    { question: 'How do I reset my password?', count: 10 },
                    { question: 'What are your hours?', count: 8 },
                ],
            };
            widgetService.getWidgetAnalytics.mockResolvedValue(mockAnalytics);
            const response = yield (0, supertest_1.default)(app)
                .get(`/api/widgets/${test_data_1.testWidget.id}/analytics`)
                .query({ period: 'month' });
            expect(response.status).toBe(200);
            expect(response.body).toEqual(mockAnalytics);
            expect(widgetService.getWidgetAnalytics).toHaveBeenCalledWith(test_data_1.testWidget.id, 'month', test_data_1.testUser.organizationId);
        }));
    });
    describe('POST /api/widgets/:id/regenerate-key', () => {
        it('should regenerate widget key', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockUpdatedWidget = Object.assign(Object.assign({}, test_data_1.testWidget), { widgetKey: 'wk_new_key_123' });
            widgetService.regenerateWidgetKey.mockResolvedValue(mockUpdatedWidget);
            const response = yield (0, supertest_1.default)(app)
                .post(`/api/widgets/${test_data_1.testWidget.id}/regenerate-key`)
                .send();
            expect(response.status).toBe(200);
            expect(response.body.widgetKey).toBe('wk_new_key_123');
            expect(widgetService.regenerateWidgetKey).toHaveBeenCalledWith(test_data_1.testWidget.id, test_data_1.testUser.organizationId);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,