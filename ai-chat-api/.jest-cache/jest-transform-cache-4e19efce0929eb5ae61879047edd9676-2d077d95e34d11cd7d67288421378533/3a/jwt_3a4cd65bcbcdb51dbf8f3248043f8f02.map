{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/utils/jwt.ts","mappings":";;;;;;AAAA,gEAA+B;AAU/B,+CAA+C;AACxC,MAAM,SAAS,GAAG,CAAC,IAAiB,EAAE,GAAa,EAAU,EAAE;IACpE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;QAC5B,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;IACxE,CAAC;IAED,MAAM,KAAK,GAAG,sBAAG,CAAC,IAAI,CACpB,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,EACzD,OAAO,CAAC,GAAG,CAAC,UAAU,EACtB,EAAE,SAAS,EAAE,IAAI,EAAE,CACpB,CAAC;IAEF,uBAAuB;IACvB,GAAG,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,EAAE;QACzB,QAAQ,EAAE,IAAI;QACd,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,SAAS;QAC1C,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY;QAC7C,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK;KACnE,CAAC,CAAC;IAEH,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AApBW,QAAA,SAAS,aAoBpB;AAEF,mBAAmB;AACZ,MAAM,WAAW,GAAG,CAAC,KAAa,EAAe,EAAE;IACxD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;QAC5B,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;IACxE,CAAC;IAED,IAAI,CAAC;QACH,MAAM,OAAO,GAAG,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU,CAAgB,CAAC;QACzE,OAAO,OAAO,CAAC;IACjB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,IAAI,KAAK,YAAY,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK,mBAAmB,EAAE,CAAC;YACjE,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC;QACjC,CAAC;QACD,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC;AACH,CAAC,CAAC;AAdW,QAAA,WAAW,eActB","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/utils/jwt.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\nimport { Response } from 'express';\n\n// User interface (simplified)\nexport interface UserPayload {\n  id: string;\n  email: string;\n  isAdmin?: boolean;\n}\n\n// Sign JWT token and store in HTTP-Only Cookie\nexport const signToken = (user: UserPayload, res: Response): string => {\n  if (!process.env.JWT_SECRET) {\n    throw new Error('JWT_SECRET is not defined in environment variables');\n  }\n\n  const token = jwt.sign(\n    { id: user.id, email: user.email, isAdmin: user.isAdmin },\n    process.env.JWT_SECRET,\n    { expiresIn: '7d' }\n  );\n\n  // Set HTTP-Only cookie\n  res.cookie('token', token, {\n    httpOnly: true,\n    maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n    secure: process.env.NODE_ENV === 'production',\n    sameSite: process.env.NODE_ENV === 'production' ? 'strict' : 'lax',\n  });\n\n  return token;\n};\n\n// Verify JWT token\nexport const verifyToken = (token: string): UserPayload => {\n  if (!process.env.JWT_SECRET) {\n    throw new Error('JWT_SECRET is not defined in environment variables');\n  }\n\n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET) as UserPayload;\n    return decoded;\n  } catch (error) {\n    if (error instanceof Error && error.name === 'TokenExpiredError') {\n      throw new Error('jwt expired');\n    }\n    throw new Error('Invalid token');\n  }\n};\n"],"version":3}