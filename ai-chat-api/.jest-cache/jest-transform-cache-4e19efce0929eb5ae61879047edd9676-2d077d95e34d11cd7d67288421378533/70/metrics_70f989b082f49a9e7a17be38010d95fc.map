{"version":3,"names":["Sentry","cov_1wg4vynen4","s","__importStar","require","sentry_1","telemetry_1","prisma_1","logger_1","metricsMiddleware","req","res","next","f","startTime","Date","now","setTag","b","_a","route","path","method","recordMetric","customMetrics","activeConnections","on","responseTime","metricsCollector","recordResponseTime","httpRequestDuration","status_code","statusCode","prisma","systemMetric","create","data","service","metricType","value","unit","metadata","catch","error","logger","recordError","errors","_b","setContext","status","console","warn","addBreadcrumb","message","level","exports","errorTrackingMiddleware","captureException","tags","contexts","request","url","headers","body","headersSent","json","process","env","NODE_ENV","undefined"],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/middleware/metrics.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport * as Sentry from '@sentry/node';\nimport { metricsCollector } from '../lib/sentry';\nimport { customMetrics, recordMetric } from '../lib/telemetry';\nimport { prisma } from '../lib/prisma';\nimport { logger } from '../lib/logger';\n\nexport function metricsMiddleware(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  const startTime = Date.now();\n\n  // Add request context to Sentry\n  Sentry.setTag('route', req.route?.path || req.path);\n  Sentry.setTag('method', req.method);\n\n  // Increment active connections\n  recordMetric(customMetrics.activeConnections, 1);\n\n  // Capture response time when request finishes\n  res.on('finish', () => {\n    const responseTime = Date.now() - startTime;\n\n    // Record response time\n    metricsCollector.recordResponseTime(responseTime);\n\n    // Record response time in OpenTelemetry\n    recordMetric(customMetrics.httpRequestDuration, responseTime, {\n      method: req.method,\n      route: req.route?.path || req.path,\n      status_code: res.statusCode,\n    });\n\n    // Decrement active connections\n    recordMetric(customMetrics.activeConnections, -1);\n\n    // Store metric in database for system health monitoring\n    if (responseTime > 100) {\n      // Only store significant response times\n      prisma.systemMetric\n        .create({\n          data: {\n            service: 'api',\n            metricType: 'response_time',\n            value: responseTime,\n            unit: 'ms',\n            metadata: {\n              method: req.method,\n              path: req.path,\n              statusCode: res.statusCode,\n            },\n          },\n        })\n        .catch((error) => {\n          logger.error('Failed to store response time metric', error);\n        });\n    }\n\n    // Record error if status code indicates error\n    if (res.statusCode >= 400) {\n      metricsCollector.recordError();\n\n      // Record error in OpenTelemetry\n      recordMetric(customMetrics.errors, 1, {\n        method: req.method,\n        route: req.route?.path || req.path,\n        status_code: res.statusCode,\n      });\n\n      // Capture error context in Sentry\n      Sentry.setContext('response', {\n        status: res.statusCode,\n        responseTime,\n        path: req.path,\n        method: req.method,\n      });\n    }\n\n    // Log slow requests\n    if (responseTime > 1000) {\n      console.warn(\n        `Slow request detected: ${req.method} ${req.path} - ${responseTime}ms`\n      );\n      Sentry.addBreadcrumb({\n        message: 'Slow request',\n        level: 'warning',\n        data: {\n          method: req.method,\n          path: req.path,\n          responseTime,\n          statusCode: res.statusCode,\n        },\n      });\n    }\n  });\n\n  next();\n}\n\nexport function errorTrackingMiddleware(\n  error: Error,\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  // Capture exception in Sentry\n  Sentry.captureException(error, {\n    tags: {\n      route: req.route?.path || req.path,\n      method: req.method,\n    },\n    contexts: {\n      request: {\n        method: req.method,\n        url: req.url,\n        headers: req.headers,\n        body: req.body,\n      },\n    },\n  });\n\n  // Record error metric\n  metricsCollector.recordError();\n\n  // Log error\n  console.error('Unhandled error:', error);\n\n  // Send error response\n  if (!res.headersSent) {\n    res.status(500).json({\n      error: 'Internal server error',\n      message:\n        process.env.NODE_ENV === 'development' ? error.message : undefined,\n    });\n  }\n\n  next(error);\n}\n"],"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","ignoreList":[]}