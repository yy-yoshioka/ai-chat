{"version":3,"names":["cov_y3p1hgsb9","actualCoverage","prisma_1","s","require","trackEvent","params","f","prisma","event","create","data","companyId","widgetId","userId","anonymousId","sessionId","eventType","eventName","properties","b","userAgent","_a","context","ipAddress","_b","referrer","_c","pageUrl","_d","error","console","exports","getEventContext","req","get","ip","connection","remoteAddress","generateSessionId","timestamp","Math","floor","Date","now","Buffer","from","toString","slice","EventTypes","IDENTIFY","WIDGET_LOADED","WIDGET_OPENED","WIDGET_CLOSED","MESSAGE_SENT","MESSAGE_RECEIVED","CONVERSATION_STARTED","CONVERSATION_ENDED","CONVERSION","SIGNUP","PURCHASE","LEAD_GENERATED","ERROR","WIDGET_ERROR","trackIdentify","Object","assign","traits","trackMessageSent","messageLength","messageType","trackConversion","conversionType","value","currency","getAnalytics","whereClause","createdAt","gte","startDate","lte","endDate","eventTypes","in","totalEvents","count","where","uniqueUserIds","groupBy","by","not","uniqueAnonymousIds","uniqueUsers","length","uniqueSessionsData","uniqueSessions","eventsByTypeData","_count","id","eventsByType","forEach","item","events","findMany","select","dailyStatsMap","Map","date","toISOString","split","has","set","Set","users","sessions","dayStats","add","dailyStats","Array","entries","map","stats","size","sort","a","localeCompare","topPagesData","orderBy","take","topPages","url","funnelSteps","step","conversionFunnel","previousUsers","index","userCount","conversionRate","push","round"],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/lib/analytics.ts"],"sourcesContent":["import { prisma } from './prisma';\nimport { Request } from 'express';\n\nexport interface EventProperties {\n  [key: string]:\n    | string\n    | number\n    | boolean\n    | null\n    | undefined\n    | EventProperties\n    | EventProperties[];\n}\n\nexport interface EventContext {\n  userAgent?: string;\n  ipAddress?: string;\n  referrer?: string;\n  pageUrl?: string;\n}\n\nexport interface TrackEventParams {\n  companyId: string;\n  widgetId?: string;\n  userId?: string;\n  anonymousId?: string;\n  sessionId?: string;\n  eventType: string;\n  eventName?: string;\n  properties?: EventProperties;\n  context?: EventContext;\n}\n\n/**\n * Track an event\n */\nexport async function trackEvent(params: TrackEventParams): Promise<void> {\n  try {\n    await prisma.event.create({\n      data: {\n        companyId: params.companyId,\n        widgetId: params.widgetId,\n        userId: params.userId,\n        anonymousId: params.anonymousId,\n        sessionId: params.sessionId,\n        eventType: params.eventType,\n        eventName: params.eventName,\n        properties: params.properties || {},\n        userAgent: params.context?.userAgent,\n        ipAddress: params.context?.ipAddress,\n        referrer: params.context?.referrer,\n        pageUrl: params.context?.pageUrl,\n      },\n    });\n  } catch (error) {\n    console.error('Failed to track event:', error);\n    // Don't throw error to avoid breaking the main flow\n  }\n}\n\n/**\n * Extract context from Express request\n */\nexport function getEventContext(req: Request): EventContext {\n  return {\n    userAgent: req.get('User-Agent'),\n    ipAddress: req.ip || req.connection.remoteAddress,\n    referrer: req.get('Referer'),\n    pageUrl: req.get('Origin'),\n  };\n}\n\n/**\n * Generate session ID from request\n */\nexport function generateSessionId(req: Request): string {\n  const userAgent = req.get('User-Agent') || '';\n  const ip = req.ip || req.connection.remoteAddress || '';\n  const timestamp = Math.floor(Date.now() / (1000 * 60 * 30)); // 30-minute sessions\n\n  return Buffer.from(`${ip}-${userAgent}-${timestamp}`)\n    .toString('base64')\n    .slice(0, 32);\n}\n\n/**\n * Predefined event types\n */\nexport const EventTypes = {\n  // User identification\n  IDENTIFY: 'identify',\n\n  // Widget interactions\n  WIDGET_LOADED: 'widget_loaded',\n  WIDGET_OPENED: 'widget_opened',\n  WIDGET_CLOSED: 'widget_closed',\n\n  // Chat interactions\n  MESSAGE_SENT: 'message_sent',\n  MESSAGE_RECEIVED: 'message_received',\n  CONVERSATION_STARTED: 'conversation_started',\n  CONVERSATION_ENDED: 'conversation_ended',\n\n  // Conversions\n  CONVERSION: 'conversion',\n  SIGNUP: 'signup',\n  PURCHASE: 'purchase',\n  LEAD_GENERATED: 'lead_generated',\n\n  // Errors\n  ERROR: 'error',\n  WIDGET_ERROR: 'widget_error',\n} as const;\n\n/**\n * Track user identification\n */\nexport async function trackIdentify(params: {\n  companyId: string;\n  widgetId?: string;\n  userId?: string;\n  anonymousId?: string;\n  sessionId: string;\n  traits?: EventProperties;\n  context: EventContext;\n}): Promise<void> {\n  await trackEvent({\n    ...params,\n    eventType: EventTypes.IDENTIFY,\n    properties: {\n      traits: params.traits || {},\n    },\n  });\n}\n\n/**\n * Track message sent\n */\nexport async function trackMessageSent(params: {\n  companyId: string;\n  widgetId: string;\n  userId?: string;\n  anonymousId?: string;\n  sessionId: string;\n  messageLength: number;\n  messageType?: string;\n  context: EventContext;\n}): Promise<void> {\n  await trackEvent({\n    ...params,\n    eventType: EventTypes.MESSAGE_SENT,\n    properties: {\n      messageLength: params.messageLength,\n      messageType: params.messageType || 'text',\n    },\n  });\n}\n\n/**\n * Track conversion\n */\nexport async function trackConversion(params: {\n  companyId: string;\n  widgetId?: string;\n  userId?: string;\n  anonymousId?: string;\n  sessionId: string;\n  conversionType: string;\n  value?: number;\n  currency?: string;\n  properties?: EventProperties;\n  context: EventContext;\n}): Promise<void> {\n  await trackEvent({\n    ...params,\n    eventType: EventTypes.CONVERSION,\n    eventName: params.conversionType,\n    properties: {\n      conversionType: params.conversionType,\n      value: params.value,\n      currency: params.currency || 'USD',\n      ...params.properties,\n    },\n  });\n}\n\n/**\n * Get analytics data for a company\n */\nexport async function getAnalytics(params: {\n  companyId: string;\n  widgetId?: string;\n  startDate: Date;\n  endDate: Date;\n  eventTypes?: string[];\n}): Promise<{\n  totalEvents: number;\n  uniqueUsers: number;\n  uniqueSessions: number;\n  eventsByType: Record<string, number>;\n  dailyStats: Array<{\n    date: string;\n    events: number;\n    users: number;\n    sessions: number;\n  }>;\n  topPages: Array<{\n    url: string;\n    events: number;\n  }>;\n  conversionFunnel: Array<{\n    step: string;\n    users: number;\n    conversionRate: number;\n  }>;\n}> {\n  const whereClause = {\n    companyId: params.companyId,\n    ...(params.widgetId && { widgetId: params.widgetId }),\n    createdAt: {\n      gte: params.startDate,\n      lte: params.endDate,\n    },\n    ...(params.eventTypes && { eventType: { in: params.eventTypes } }),\n  };\n\n  // Total events\n  const totalEvents = await prisma.event.count({ where: whereClause });\n\n  // Unique users (including anonymous)\n  const uniqueUserIds = await prisma.event.groupBy({\n    by: ['userId'],\n    where: { ...whereClause, userId: { not: null } },\n  });\n\n  const uniqueAnonymousIds = await prisma.event.groupBy({\n    by: ['anonymousId'],\n    where: { ...whereClause, anonymousId: { not: null }, userId: null },\n  });\n\n  const uniqueUsers = uniqueUserIds.length + uniqueAnonymousIds.length;\n\n  // Unique sessions\n  const uniqueSessionsData = await prisma.event.groupBy({\n    by: ['sessionId'],\n    where: { ...whereClause, sessionId: { not: null } },\n  });\n  const uniqueSessions = uniqueSessionsData.length;\n\n  // Events by type\n  const eventsByTypeData = await prisma.event.groupBy({\n    by: ['eventType'],\n    where: whereClause,\n    _count: { id: true },\n  });\n\n  const eventsByType: Record<string, number> = {};\n  eventsByTypeData.forEach((item) => {\n    eventsByType[item.eventType] = item._count.id;\n  });\n\n  // Daily stats - using simpler approach without raw SQL\n  const events = await prisma.event.findMany({\n    where: whereClause,\n    select: {\n      createdAt: true,\n      userId: true,\n      anonymousId: true,\n      sessionId: true,\n    },\n  });\n\n  const dailyStatsMap = new Map<\n    string,\n    { events: Set<string>; users: Set<string>; sessions: Set<string> }\n  >();\n\n  events.forEach((event) => {\n    const date = event.createdAt.toISOString().split('T')[0];\n    if (!dailyStatsMap.has(date)) {\n      dailyStatsMap.set(date, {\n        events: new Set(),\n        users: new Set(),\n        sessions: new Set(),\n      });\n    }\n\n    const dayStats = dailyStatsMap.get(date)!;\n    dayStats.events.add(event.createdAt.toISOString());\n\n    const userId = event.userId || event.anonymousId;\n    if (userId) dayStats.users.add(userId);\n\n    if (event.sessionId) dayStats.sessions.add(event.sessionId);\n  });\n\n  const dailyStats = Array.from(dailyStatsMap.entries())\n    .map(([date, stats]) => ({\n      date,\n      events: stats.events.size,\n      users: stats.users.size,\n      sessions: stats.sessions.size,\n    }))\n    .sort((a, b) => a.date.localeCompare(b.date));\n\n  // Top pages\n  const topPagesData = await prisma.event.groupBy({\n    by: ['pageUrl'],\n    where: { ...whereClause, pageUrl: { not: null } },\n    _count: { id: true },\n    orderBy: { _count: { id: 'desc' } },\n    take: 10,\n  });\n\n  const topPages = topPagesData.map((item) => ({\n    url: item.pageUrl || '',\n    events: item._count.id,\n  }));\n\n  // Conversion funnel (simplified)\n  const funnelSteps = [\n    { step: 'Widget Loaded', eventType: EventTypes.WIDGET_LOADED },\n    { step: 'Widget Opened', eventType: EventTypes.WIDGET_OPENED },\n    { step: 'Message Sent', eventType: EventTypes.MESSAGE_SENT },\n    { step: 'Conversion', eventType: EventTypes.CONVERSION },\n  ];\n\n  const conversionFunnel = [];\n  let previousUsers = 0;\n\n  for (const [index, step] of funnelSteps.entries()) {\n    const users = await prisma.event.groupBy({\n      by: ['userId', 'anonymousId'],\n      where: {\n        ...whereClause,\n        eventType: step.eventType,\n      },\n    });\n\n    const userCount = users.length;\n    const conversionRate =\n      index === 0\n        ? 100\n        : previousUsers > 0\n          ? (userCount / previousUsers) * 100\n          : 0;\n\n    conversionFunnel.push({\n      step: step.step,\n      users: userCount,\n      conversionRate: Math.round(conversionRate * 100) / 100,\n    });\n\n    previousUsers = userCount;\n  }\n\n  return {\n    totalEvents,\n    uniqueUsers,\n    uniqueSessions,\n    eventsByType,\n    dailyStats,\n    topPages,\n    conversionFunnel,\n  };\n}\n"],"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","ignoreList":[]}