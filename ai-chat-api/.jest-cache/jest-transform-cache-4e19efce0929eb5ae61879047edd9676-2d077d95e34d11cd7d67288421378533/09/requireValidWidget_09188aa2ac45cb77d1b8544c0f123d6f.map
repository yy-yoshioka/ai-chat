{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/middleware/requireValidWidget.ts","mappings":";;;;;;;;;;;;AACA,0CAAuC;AACvC,kDAAsD;AActD;;GAEG;AACH,SAAsB,kBAAkB,CACtC,GAAkB,EAClB,GAAa,EACb,IAAkB;;QAElB,IAAI,CAAC;YACH,MAAM,SAAS,GACb,GAAG,CAAC,MAAM,CAAC,SAAS,IAAI,GAAG,CAAC,IAAI,CAAC,SAAS,IAAI,GAAG,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;YAE5E,IAAI,CAAC,SAAS,EAAE,CAAC;gBACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,wBAAwB,EAAE,CAAC,CAAC;gBAC1D,OAAO;YACT,CAAC;YAED,IAAI,CAAC,IAAA,4BAAgB,EAAC,SAAS,CAAC,EAAE,CAAC;gBACjC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,2BAA2B,EAAE,CAAC,CAAC;gBAC7D,OAAO;YACT,CAAC;YAED,MAAM,MAAM,GAAG,MAAM,eAAM,CAAC,MAAM,CAAC,UAAU,CAAC;gBAC5C,KAAK,EAAE,EAAE,SAAS,EAAE;gBACpB,OAAO,EAAE;oBACP,OAAO,EAAE;wBACP,MAAM,EAAE;4BACN,EAAE,EAAE,IAAI;4BACR,IAAI,EAAE,IAAI;4BACV,IAAI,EAAE,IAAI;yBACX;qBACF;iBACF;aACF,CAAC,CAAC;YAEH,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,kBAAkB,EAAE,CAAC,CAAC;gBACpD,OAAO;YACT,CAAC;YAED,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;gBACrB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,oBAAoB,EAAE,CAAC,CAAC;gBACtD,OAAO;YACT,CAAC;YAED,gCAAgC;YAChC,GAAG,CAAC,MAAM,GAAG;gBACX,EAAE,EAAE,MAAM,CAAC,EAAE;gBACb,SAAS,EAAE,MAAM,CAAC,SAAS;gBAC3B,IAAI,EAAE,MAAM,CAAC,IAAI;gBACjB,SAAS,EAAE,MAAM,CAAC,SAAS;gBAC3B,QAAQ,EAAE,MAAM,CAAC,QAAQ;gBACzB,WAAW,EAAE,MAAM,CAAC,WAAW;gBAC/B,OAAO,EAAE,MAAM,CAAC,OAAO;aACxB,CAAC;YAEF,IAAI,EAAE,CAAC;QACT,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,0BAA0B,EAAE,KAAK,CAAC,CAAC;YACjD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,uBAAuB,EAAE,CAAC,CAAC;QAC3D,CAAC;IACH,CAAC;CAAA;AA1DD,gDA0DC","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/middleware/requireValidWidget.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { prisma } from '../lib/prisma';\nimport { isValidWidgetKey } from '../utils/widgetKey';\n\nexport interface WidgetRequest extends Request {\n  widget?: {\n    id: string;\n    widgetKey: string;\n    name: string;\n    companyId: string;\n    isActive: boolean;\n    accentColor: string;\n    logoUrl: string | null;\n  };\n}\n\n/**\n * Middleware to validate widget key and attach widget to request\n */\nexport async function requireValidWidget(\n  req: WidgetRequest,\n  res: Response,\n  next: NextFunction\n): Promise<void> {\n  try {\n    const widgetKey =\n      req.params.widgetKey || req.body.widgetKey || req.headers['x-widget-key'];\n\n    if (!widgetKey) {\n      res.status(400).json({ error: 'Widget key is required' });\n      return;\n    }\n\n    if (!isValidWidgetKey(widgetKey)) {\n      res.status(400).json({ error: 'Invalid widget key format' });\n      return;\n    }\n\n    const widget = await prisma.widget.findUnique({\n      where: { widgetKey },\n      include: {\n        company: {\n          select: {\n            id: true,\n            name: true,\n            plan: true,\n          },\n        },\n      },\n    });\n\n    if (!widget) {\n      res.status(404).json({ error: 'Widget not found' });\n      return;\n    }\n\n    if (!widget.isActive) {\n      res.status(403).json({ error: 'Widget is inactive' });\n      return;\n    }\n\n    // Attach widget info to request\n    req.widget = {\n      id: widget.id,\n      widgetKey: widget.widgetKey,\n      name: widget.name,\n      companyId: widget.companyId,\n      isActive: widget.isActive,\n      accentColor: widget.accentColor,\n      logoUrl: widget.logoUrl,\n    };\n\n    next();\n  } catch (error) {\n    console.error('Widget validation error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n}\n"],"version":3}