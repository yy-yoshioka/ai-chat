{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/routes/webhooks.test.ts","mappings":"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","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/routes/webhooks.test.ts"],"sourcesContent":["import request from 'supertest';\nimport express from 'express';\nimport { prisma } from '../../src/lib/prisma';\nimport webhooksRouter from '../../src/routes/webhooks';\nimport { authMiddleware } from '../../src/middleware/auth';\nimport { orgAccessMiddleware } from '../../src/middleware/organizationAccess';\nimport {\n  testUser,\n  testOrganization,\n  generateTestToken,\n} from '../fixtures/test-data';\nimport { webhookService } from '../../src/services/webhookService';\nimport { logger } from '../../src/lib/logger';\n\n// Mock dependencies\njest.mock('../../src/lib/prisma');\njest.mock('../../src/middleware/auth');\njest.mock('../../src/middleware/organizationAccess');\njest.mock('../../src/services/webhookService');\njest.mock('../../src/lib/logger');\n\ndescribe('Webhooks Routes', () => {\n  let app: express.Application;\n  let mockWebhookService: jest.Mocked<typeof webhookService>;\n\n  const testWebhook = {\n    id: 'webhook-test-123',\n    name: 'Test Webhook',\n    url: 'https://api.example.com/webhook',\n    events: ['chat.created', 'user.created'],\n    headers: { Authorization: 'Bearer token123' },\n    retryCount: 3,\n    timeoutMs: 5000,\n    isActive: true,\n    organizationId: testOrganization.id,\n    secret: 'webhook-secret-123',\n    createdAt: new Date('2024-01-01'),\n    updatedAt: new Date('2024-01-15'),\n  };\n\n  const testWebhookLog = {\n    id: 'log-test-123',\n    webhookId: testWebhook.id,\n    event: 'chat.created',\n    payload: { chatId: 'chat-123', message: 'Hello' },\n    status: 'success',\n    statusCode: 200,\n    response: { success: true },\n    attempt: 1,\n    createdAt: new Date('2024-01-15'),\n  };\n\n  beforeEach(() => {\n    app = express();\n    app.use(express.json());\n    app.use('/api/webhooks', webhooksRouter);\n\n    // Setup middleware mocks\n    (authMiddleware as jest.Mock).mockImplementation((req, res, next) => {\n      req.user = { ...testUser, organization: testOrganization };\n      next();\n    });\n\n    (orgAccessMiddleware as jest.Mock).mockImplementation((req, res, next) => {\n      req.organizationId = testOrganization.id;\n      next();\n    });\n\n    mockWebhookService = webhookService as jest.Mocked<typeof webhookService>;\n\n    // Reset all mocks\n    jest.clearAllMocks();\n  });\n\n  describe('GET /api/webhooks', () => {\n    it('should return list of webhooks for organization', async () => {\n      const mockWebhooks = [\n        testWebhook,\n        {\n          ...testWebhook,\n          id: 'webhook-test-456',\n          name: 'Analytics Webhook',\n          events: ['widget.created', 'widget.updated'],\n        },\n      ];\n\n      mockWebhookService.getWebhooks.mockResolvedValue(mockWebhooks as any);\n\n      const response = await request(app)\n        .get('/api/webhooks')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveLength(2);\n      expect(response.body[0]).toMatchObject({\n        id: testWebhook.id,\n        name: testWebhook.name,\n        url: testWebhook.url,\n        events: testWebhook.events,\n      });\n\n      expect(mockWebhookService.getWebhooks).toHaveBeenCalledWith(\n        testOrganization.id\n      );\n    });\n\n    it('should handle service errors', async () => {\n      mockWebhookService.getWebhooks.mockRejectedValue(\n        new Error('Database connection failed')\n      );\n\n      const response = await request(app)\n        .get('/api/webhooks')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(500);\n      expect(response.body).toEqual({\n        error: 'Failed to fetch webhooks',\n      });\n\n      expect(logger.error).toHaveBeenCalledWith(\n        'Failed to fetch webhooks',\n        expect.any(Error)\n      );\n    });\n\n    it('should return empty array if no webhooks exist', async () => {\n      mockWebhookService.getWebhooks.mockResolvedValue([]);\n\n      const response = await request(app)\n        .get('/api/webhooks')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toEqual([]);\n    });\n  });\n\n  describe('GET /api/webhooks/:id', () => {\n    it('should return webhook by ID', async () => {\n      mockWebhookService.getWebhook.mockResolvedValue(testWebhook as any);\n\n      const response = await request(app)\n        .get(`/api/webhooks/${testWebhook.id}`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        id: testWebhook.id,\n        name: testWebhook.name,\n        url: testWebhook.url,\n        events: testWebhook.events,\n        headers: testWebhook.headers,\n        retryCount: testWebhook.retryCount,\n        timeoutMs: testWebhook.timeoutMs,\n      });\n\n      expect(mockWebhookService.getWebhook).toHaveBeenCalledWith(\n        testWebhook.id,\n        testOrganization.id\n      );\n    });\n\n    it('should return 404 if webhook not found', async () => {\n      mockWebhookService.getWebhook.mockRejectedValue(\n        new Error('Webhook not found')\n      );\n\n      const response = await request(app)\n        .get('/api/webhooks/non-existent-id')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(404);\n      expect(response.body).toEqual({ error: 'Webhook not found' });\n    });\n\n    it('should handle other service errors', async () => {\n      mockWebhookService.getWebhook.mockRejectedValue(\n        new Error('Database connection failed')\n      );\n\n      const response = await request(app)\n        .get(`/api/webhooks/${testWebhook.id}`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(500);\n      expect(response.body).toEqual({\n        error: 'Failed to fetch webhook',\n      });\n    });\n  });\n\n  describe('POST /api/webhooks', () => {\n    it('should create webhook successfully', async () => {\n      const createData = {\n        name: 'New Webhook',\n        url: 'https://api.example.com/webhook',\n        events: ['chat.created', 'user.updated'],\n        headers: { 'X-API-Key': 'secret-key' },\n        retryCount: 5,\n        timeoutMs: 10000,\n      };\n\n      const createdWebhook = {\n        ...testWebhook,\n        ...createData,\n        id: 'new-webhook-id',\n      };\n\n      mockWebhookService.createWebhook.mockResolvedValue(createdWebhook as any);\n\n      const response = await request(app)\n        .post('/api/webhooks')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .send(createData);\n\n      expect(response.status).toBe(201);\n      expect(response.body).toMatchObject({\n        id: 'new-webhook-id',\n        name: createData.name,\n        url: createData.url,\n        events: createData.events,\n        headers: createData.headers,\n        retryCount: createData.retryCount,\n        timeoutMs: createData.timeoutMs,\n      });\n\n      expect(mockWebhookService.createWebhook).toHaveBeenCalledWith(\n        testOrganization.id,\n        createData\n      );\n    });\n\n    it('should validate required fields', async () => {\n      const invalidData = {\n        name: '',\n        url: 'https://api.example.com/webhook',\n        events: ['chat.created'],\n      };\n\n      const response = await request(app)\n        .post('/api/webhooks')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .send(invalidData);\n\n      expect(response.status).toBe(400);\n      expect(response.body).toEqual({\n        error: 'Name, URL, and events array are required',\n      });\n    });\n\n    it('should validate URL format', async () => {\n      const invalidData = {\n        name: 'Test Webhook',\n        url: 'invalid-url',\n        events: ['chat.created'],\n      };\n\n      const response = await request(app)\n        .post('/api/webhooks')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .send(invalidData);\n\n      expect(response.status).toBe(400);\n      expect(response.body).toEqual({ error: 'Invalid URL format' });\n    });\n\n    it('should validate events array', async () => {\n      const invalidData = {\n        name: 'Test Webhook',\n        url: 'https://api.example.com/webhook',\n        events: ['invalid.event', 'chat.created', 'another.invalid'],\n      };\n\n      const response = await request(app)\n        .post('/api/webhooks')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .send(invalidData);\n\n      expect(response.status).toBe(400);\n      expect(response.body).toMatchObject({\n        error: 'Invalid events: invalid.event, another.invalid',\n        validEvents: expect.arrayContaining([\n          'chat.created',\n          'user.created',\n          'user.updated',\n          'widget.created',\n          'widget.updated',\n          'widget.deleted',\n          'knowledge_base.created',\n          'knowledge_base.updated',\n          'knowledge_base.deleted',\n        ]),\n      });\n    });\n\n    it('should handle events as non-array', async () => {\n      const invalidData = {\n        name: 'Test Webhook',\n        url: 'https://api.example.com/webhook',\n        events: 'chat.created', // Should be array\n      };\n\n      const response = await request(app)\n        .post('/api/webhooks')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .send(invalidData);\n\n      expect(response.status).toBe(400);\n      expect(response.body).toEqual({\n        error: 'Name, URL, and events array are required',\n      });\n    });\n\n    it('should handle service creation errors', async () => {\n      const createData = {\n        name: 'Test Webhook',\n        url: 'https://api.example.com/webhook',\n        events: ['chat.created'],\n      };\n\n      mockWebhookService.createWebhook.mockRejectedValue(\n        new Error('Failed to create webhook in database')\n      );\n\n      const response = await request(app)\n        .post('/api/webhooks')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .send(createData);\n\n      expect(response.status).toBe(500);\n      expect(response.body).toEqual({\n        error: 'Failed to create webhook',\n      });\n    });\n  });\n\n  describe('PUT /api/webhooks/:id', () => {\n    it('should update webhook successfully', async () => {\n      const updateData = {\n        name: 'Updated Webhook',\n        url: 'https://api.example.com/updated-webhook',\n        events: ['user.created', 'widget.created'],\n        isActive: false,\n      };\n\n      const updatedWebhook = {\n        ...testWebhook,\n        ...updateData,\n        updatedAt: new Date(),\n      };\n\n      mockWebhookService.updateWebhook.mockResolvedValue(updatedWebhook as any);\n\n      const response = await request(app)\n        .put(`/api/webhooks/${testWebhook.id}`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .send(updateData);\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        id: testWebhook.id,\n        name: updateData.name,\n        url: updateData.url,\n        events: updateData.events,\n        isActive: updateData.isActive,\n      });\n\n      expect(mockWebhookService.updateWebhook).toHaveBeenCalledWith(\n        testWebhook.id,\n        testOrganization.id,\n        updateData\n      );\n    });\n\n    it('should return 404 if webhook not found', async () => {\n      mockWebhookService.updateWebhook.mockRejectedValue(\n        new Error('Webhook not found or access denied')\n      );\n\n      const response = await request(app)\n        .put('/api/webhooks/non-existent-id')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .send({ name: 'Updated Name' });\n\n      expect(response.status).toBe(404);\n      expect(response.body).toEqual({ error: 'Webhook not found' });\n    });\n\n    it('should handle other service errors', async () => {\n      mockWebhookService.updateWebhook.mockRejectedValue(\n        new Error('Database connection failed')\n      );\n\n      const response = await request(app)\n        .put(`/api/webhooks/${testWebhook.id}`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .send({ name: 'Updated Name' });\n\n      expect(response.status).toBe(500);\n      expect(response.body).toEqual({\n        error: 'Failed to update webhook',\n      });\n    });\n  });\n\n  describe('DELETE /api/webhooks/:id', () => {\n    it('should delete webhook successfully', async () => {\n      mockWebhookService.deleteWebhook.mockResolvedValue();\n\n      const response = await request(app)\n        .delete(`/api/webhooks/${testWebhook.id}`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(204);\n      expect(response.body).toEqual({});\n\n      expect(mockWebhookService.deleteWebhook).toHaveBeenCalledWith(\n        testWebhook.id,\n        testOrganization.id\n      );\n    });\n\n    it('should return 404 if webhook not found', async () => {\n      mockWebhookService.deleteWebhook.mockRejectedValue(\n        new Error('Webhook not found or access denied')\n      );\n\n      const response = await request(app)\n        .delete('/api/webhooks/non-existent-id')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(404);\n      expect(response.body).toEqual({ error: 'Webhook not found' });\n    });\n\n    it('should handle other service errors', async () => {\n      mockWebhookService.deleteWebhook.mockRejectedValue(\n        new Error('Database connection failed')\n      );\n\n      const response = await request(app)\n        .delete(`/api/webhooks/${testWebhook.id}`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(500);\n      expect(response.body).toEqual({\n        error: 'Failed to delete webhook',\n      });\n    });\n  });\n\n  describe('GET /api/webhooks/:id/logs', () => {\n    it('should return webhook logs', async () => {\n      const mockLogs = [\n        testWebhookLog,\n        {\n          ...testWebhookLog,\n          id: 'log-test-456',\n          status: 'failed',\n          statusCode: 500,\n          response: { error: 'Internal Server Error' },\n          attempt: 2,\n        },\n      ];\n\n      mockWebhookService.getWebhookLogs.mockResolvedValue(mockLogs as any);\n\n      const response = await request(app)\n        .get(`/api/webhooks/${testWebhook.id}/logs`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveLength(2);\n      expect(response.body[0]).toMatchObject({\n        id: testWebhookLog.id,\n        event: testWebhookLog.event,\n        status: testWebhookLog.status,\n        statusCode: testWebhookLog.statusCode,\n      });\n\n      expect(mockWebhookService.getWebhookLogs).toHaveBeenCalledWith(\n        testWebhook.id,\n        testOrganization.id,\n        {\n          status: undefined,\n          event: undefined,\n          startDate: undefined,\n          endDate: undefined,\n          limit: undefined,\n        }\n      );\n    });\n\n    it('should filter logs by query parameters', async () => {\n      mockWebhookService.getWebhookLogs.mockResolvedValue([\n        testWebhookLog,\n      ] as any);\n\n      const queryParams = {\n        status: 'success',\n        event: 'chat.created',\n        startDate: '2024-01-01',\n        endDate: '2024-01-31',\n        limit: '10',\n      };\n\n      const response = await request(app)\n        .get(`/api/webhooks/${testWebhook.id}/logs`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .query(queryParams);\n\n      expect(response.status).toBe(200);\n\n      expect(mockWebhookService.getWebhookLogs).toHaveBeenCalledWith(\n        testWebhook.id,\n        testOrganization.id,\n        {\n          status: 'success',\n          event: 'chat.created',\n          startDate: new Date('2024-01-01'),\n          endDate: new Date('2024-01-31'),\n          limit: 10,\n        }\n      );\n    });\n\n    it('should return 404 if webhook not found', async () => {\n      mockWebhookService.getWebhookLogs.mockRejectedValue(\n        new Error('Webhook not found or access denied')\n      );\n\n      const response = await request(app)\n        .get('/api/webhooks/non-existent-id/logs')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(404);\n      expect(response.body).toEqual({ error: 'Webhook not found' });\n    });\n\n    it('should handle service errors', async () => {\n      mockWebhookService.getWebhookLogs.mockRejectedValue(\n        new Error('Database query failed')\n      );\n\n      const response = await request(app)\n        .get(`/api/webhooks/${testWebhook.id}/logs`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(500);\n      expect(response.body).toEqual({\n        error: 'Failed to fetch webhook logs',\n      });\n    });\n  });\n\n  describe('POST /api/webhooks/:id/test', () => {\n    it('should test webhook successfully', async () => {\n      const testLog = {\n        ...testWebhookLog,\n        id: 'test-log-123',\n        event: 'test',\n        payload: { test: true },\n        status: 'success',\n        statusCode: 200,\n        response: { received: true },\n      };\n\n      mockWebhookService.testWebhook.mockResolvedValue(testLog as any);\n\n      const response = await request(app)\n        .post(`/api/webhooks/${testWebhook.id}/test`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        id: testLog.id,\n        event: 'test',\n        status: 'success',\n        statusCode: 200,\n        response: { received: true },\n      });\n\n      expect(mockWebhookService.testWebhook).toHaveBeenCalledWith(\n        testWebhook.id,\n        testOrganization.id\n      );\n    });\n\n    it('should return test results even if webhook fails', async () => {\n      const failedTestLog = {\n        ...testWebhookLog,\n        id: 'test-log-failed',\n        event: 'test',\n        status: 'failed',\n        statusCode: 404,\n        response: { error: 'Not Found' },\n        errorMessage: 'Webhook endpoint returned 404',\n      };\n\n      mockWebhookService.testWebhook.mockResolvedValue(failedTestLog as any);\n\n      const response = await request(app)\n        .post(`/api/webhooks/${testWebhook.id}/test`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        status: 'failed',\n        statusCode: 404,\n        errorMessage: 'Webhook endpoint returned 404',\n      });\n    });\n\n    it('should return 404 if webhook not found', async () => {\n      mockWebhookService.testWebhook.mockRejectedValue(\n        new Error('Webhook not found')\n      );\n\n      const response = await request(app)\n        .post('/api/webhooks/non-existent-id/test')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(404);\n      expect(response.body).toEqual({ error: 'Webhook not found' });\n    });\n\n    it('should handle service errors during test', async () => {\n      mockWebhookService.testWebhook.mockRejectedValue(\n        new Error('Network timeout during test')\n      );\n\n      const response = await request(app)\n        .post(`/api/webhooks/${testWebhook.id}/test`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(500);\n      expect(response.body).toEqual({\n        error: 'Failed to test webhook',\n      });\n    });\n  });\n\n  describe('Authentication and authorization', () => {\n    it('should require authentication for all endpoints', async () => {\n      (authMiddleware as jest.Mock).mockImplementationOnce((req, res) => {\n        res.status(401).json({ error: 'Unauthorized' });\n      });\n\n      const response = await request(app).get('/api/webhooks');\n\n      expect(response.status).toBe(401);\n      expect(response.body).toEqual({ error: 'Unauthorized' });\n    });\n\n    it('should require organization access for all endpoints', async () => {\n      (orgAccessMiddleware as jest.Mock).mockImplementationOnce((req, res) => {\n        res.status(403).json({ error: 'Organization access required' });\n      });\n\n      const response = await request(app)\n        .get('/api/webhooks')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(403);\n      expect(response.body).toEqual({ error: 'Organization access required' });\n    });\n\n    it('should isolate webhooks by organization', async () => {\n      mockWebhookService.getWebhooks.mockResolvedValue([testWebhook] as any);\n\n      await request(app)\n        .get('/api/webhooks')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(mockWebhookService.getWebhooks).toHaveBeenCalledWith(\n        testOrganization.id\n      );\n    });\n  });\n\n  describe('Input validation and security', () => {\n    it('should validate webhook URL protocols', async () => {\n      const testCases = [\n        { url: 'http://api.example.com/webhook', shouldPass: true },\n        { url: 'https://api.example.com/webhook', shouldPass: true },\n        { url: 'ftp://api.example.com/webhook', shouldPass: true }, // URL constructor allows this\n        { url: 'javascript:alert(1)', shouldPass: false },\n        { url: 'data:text/html,<script>alert(1)</script>', shouldPass: true }, // URL constructor allows this\n      ];\n\n      for (const testCase of testCases) {\n        const createData = {\n          name: 'Test Webhook',\n          url: testCase.url,\n          events: ['chat.created'],\n        };\n\n        const response = await request(app)\n          .post('/api/webhooks')\n          .set(\n            'Authorization',\n            `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n          )\n          .send(createData);\n\n        if (testCase.shouldPass) {\n          // If URL passes validation, we expect either success or service error\n          expect([200, 201, 500]).toContain(response.status);\n        } else {\n          expect(response.status).toBe(400);\n          expect(response.body.error).toContain('Invalid URL format');\n        }\n      }\n    });\n\n    it('should sanitize webhook headers', async () => {\n      const createData = {\n        name: 'Test Webhook',\n        url: 'https://api.example.com/webhook',\n        events: ['chat.created'],\n        headers: {\n          Authorization: 'Bearer token123',\n          'X-Custom-Header': 'value',\n          'Content-Type': 'application/json',\n        },\n      };\n\n      mockWebhookService.createWebhook.mockResolvedValue(testWebhook as any);\n\n      const response = await request(app)\n        .post('/api/webhooks')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .send(createData);\n\n      expect(response.status).toBe(201);\n      expect(mockWebhookService.createWebhook).toHaveBeenCalledWith(\n        testOrganization.id,\n        expect.objectContaining({\n          headers: createData.headers,\n        })\n      );\n    });\n\n    it('should validate numeric fields', async () => {\n      const createData = {\n        name: 'Test Webhook',\n        url: 'https://api.example.com/webhook',\n        events: ['chat.created'],\n        retryCount: 'not-a-number',\n        timeoutMs: 'also-not-a-number',\n      };\n\n      // The service layer should handle validation\n      mockWebhookService.createWebhook.mockResolvedValue(testWebhook as any);\n\n      const response = await request(app)\n        .post('/api/webhooks')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .send(createData);\n\n      expect(response.status).toBe(201);\n      // Service receives the raw values and should validate them\n      expect(mockWebhookService.createWebhook).toHaveBeenCalledWith(\n        testOrganization.id,\n        expect.objectContaining({\n          retryCount: 'not-a-number',\n          timeoutMs: 'also-not-a-number',\n        })\n      );\n    });\n  });\n\n  describe('Edge cases and error handling', () => {\n    it('should handle malformed JSON in request body', async () => {\n      const response = await request(app)\n        .post('/api/webhooks')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .set('Content-Type', 'application/json')\n        .send('{ invalid json }');\n\n      expect(response.status).toBe(400);\n    });\n\n    it('should handle very long webhook names', async () => {\n      const longName = 'A'.repeat(1000);\n      const createData = {\n        name: longName,\n        url: 'https://api.example.com/webhook',\n        events: ['chat.created'],\n      };\n\n      // Service should handle validation\n      mockWebhookService.createWebhook.mockResolvedValue({\n        ...testWebhook,\n        name: longName,\n      } as any);\n\n      const response = await request(app)\n        .post('/api/webhooks')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .send(createData);\n\n      expect(response.status).toBe(201);\n    });\n\n    it('should handle empty events array', async () => {\n      const createData = {\n        name: 'Test Webhook',\n        url: 'https://api.example.com/webhook',\n        events: [],\n      };\n\n      // Empty events array should be handled by the service\n      mockWebhookService.createWebhook.mockResolvedValue(testWebhook as any);\n\n      const response = await request(app)\n        .post('/api/webhooks')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .send(createData);\n\n      expect(response.status).toBe(201);\n    });\n\n    it('should handle date parsing errors in logs query', async () => {\n      mockWebhookService.getWebhookLogs.mockResolvedValue([]);\n\n      const response = await request(app)\n        .get(`/api/webhooks/${testWebhook.id}/logs`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .query({\n          startDate: 'invalid-date',\n          endDate: 'also-invalid',\n        });\n\n      expect(response.status).toBe(200);\n\n      // Service should receive Date objects (even if invalid dates)\n      expect(mockWebhookService.getWebhookLogs).toHaveBeenCalledWith(\n        testWebhook.id,\n        testOrganization.id,\n        expect.objectContaining({\n          startDate: expect.any(Date),\n          endDate: expect.any(Date),\n        })\n      );\n    });\n  });\n});\n"],"version":3}