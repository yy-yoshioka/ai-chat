bc2b39ccd08f763eb14b9df7db50dc8b
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock dependencies
jest.mock('../../src/lib/prisma');
jest.mock('../../src/middleware/auth');
jest.mock('../../src/middleware/organizationAccess');
jest.mock('../../src/services/webhookService');
jest.mock('../../src/lib/logger');
const supertest_1 = __importDefault(require("supertest"));
const express_1 = __importDefault(require("express"));
const webhooks_1 = __importDefault(require("../../src/routes/webhooks"));
const auth_1 = require("../../src/middleware/auth");
const organizationAccess_1 = require("../../src/middleware/organizationAccess");
const test_data_1 = require("../fixtures/test-data");
const webhookService_1 = require("../../src/services/webhookService");
const logger_1 = require("../../src/lib/logger");
describe('Webhooks Routes', () => {
    let app;
    let mockWebhookService;
    const testWebhook = {
        id: 'webhook-test-123',
        name: 'Test Webhook',
        url: 'https://api.example.com/webhook',
        events: ['chat.created', 'user.created'],
        headers: { Authorization: 'Bearer token123' },
        retryCount: 3,
        timeoutMs: 5000,
        isActive: true,
        organizationId: test_data_1.testOrganization.id,
        secret: 'webhook-secret-123',
        createdAt: new Date('2024-01-01'),
        updatedAt: new Date('2024-01-15'),
    };
    const testWebhookLog = {
        id: 'log-test-123',
        webhookId: testWebhook.id,
        event: 'chat.created',
        payload: { chatId: 'chat-123', message: 'Hello' },
        status: 'success',
        statusCode: 200,
        response: { success: true },
        attempt: 1,
        createdAt: new Date('2024-01-15'),
    };
    beforeEach(() => {
        app = (0, express_1.default)();
        app.use(express_1.default.json());
        app.use('/api/webhooks', webhooks_1.default);
        // Setup middleware mocks
        auth_1.authMiddleware.mockImplementation((req, res, next) => {
            req.user = Object.assign(Object.assign({}, test_data_1.testUser), { organization: test_data_1.testOrganization });
            next();
        });
        organizationAccess_1.orgAccessMiddleware.mockImplementation((req, res, next) => {
            req.organizationId = test_data_1.testOrganization.id;
            next();
        });
        mockWebhookService = webhookService_1.webhookService;
        // Reset all mocks
        jest.clearAllMocks();
    });
    describe('GET /api/webhooks', () => {
        it('should return list of webhooks for organization', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockWebhooks = [
                testWebhook,
                Object.assign(Object.assign({}, testWebhook), { id: 'webhook-test-456', name: 'Analytics Webhook', events: ['widget.created', 'widget.updated'] }),
            ];
            mockWebhookService.getWebhooks.mockResolvedValue(mockWebhooks);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/webhooks')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body).toHaveLength(2);
            expect(response.body[0]).toMatchObject({
                id: testWebhook.id,
                name: testWebhook.name,
                url: testWebhook.url,
                events: testWebhook.events,
            });
            expect(mockWebhookService.getWebhooks).toHaveBeenCalledWith(test_data_1.testOrganization.id);
        }));
        it('should handle service errors', () => __awaiter(void 0, void 0, void 0, function* () {
            mockWebhookService.getWebhooks.mockRejectedValue(new Error('Database connection failed'));
            const response = yield (0, supertest_1.default)(app)
                .get('/api/webhooks')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(500);
            expect(response.body).toEqual({
                error: 'Failed to fetch webhooks',
            });
            expect(logger_1.logger.error).toHaveBeenCalledWith('Failed to fetch webhooks', expect.any(Error));
        }));
        it('should return empty array if no webhooks exist', () => __awaiter(void 0, void 0, void 0, function* () {
            mockWebhookService.getWebhooks.mockResolvedValue([]);
            const response = yield (0, supertest_1.default)(app)
                .get('/api/webhooks')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body).toEqual([]);
        }));
    });
    describe('GET /api/webhooks/:id', () => {
        it('should return webhook by ID', () => __awaiter(void 0, void 0, void 0, function* () {
            mockWebhookService.getWebhook.mockResolvedValue(testWebhook);
            const response = yield (0, supertest_1.default)(app)
                .get(`/api/webhooks/${testWebhook.id}`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body).toMatchObject({
                id: testWebhook.id,
                name: testWebhook.name,
                url: testWebhook.url,
                events: testWebhook.events,
                headers: testWebhook.headers,
                retryCount: testWebhook.retryCount,
                timeoutMs: testWebhook.timeoutMs,
            });
            expect(mockWebhookService.getWebhook).toHaveBeenCalledWith(testWebhook.id, test_data_1.testOrganization.id);
        }));
        it('should return 404 if webhook not found', () => __awaiter(void 0, void 0, void 0, function* () {
            mockWebhookService.getWebhook.mockRejectedValue(new Error('Webhook not found'));
            const response = yield (0, supertest_1.default)(app)
                .get('/api/webhooks/non-existent-id')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(404);
            expect(response.body).toEqual({ error: 'Webhook not found' });
        }));
        it('should handle other service errors', () => __awaiter(void 0, void 0, void 0, function* () {
            mockWebhookService.getWebhook.mockRejectedValue(new Error('Database connection failed'));
            const response = yield (0, supertest_1.default)(app)
                .get(`/api/webhooks/${testWebhook.id}`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(500);
            expect(response.body).toEqual({
                error: 'Failed to fetch webhook',
            });
        }));
    });
    describe('POST /api/webhooks', () => {
        it('should create webhook successfully', () => __awaiter(void 0, void 0, void 0, function* () {
            const createData = {
                name: 'New Webhook',
                url: 'https://api.example.com/webhook',
                events: ['chat.created', 'user.updated'],
                headers: { 'X-API-Key': 'secret-key' },
                retryCount: 5,
                timeoutMs: 10000,
            };
            const createdWebhook = Object.assign(Object.assign(Object.assign({}, testWebhook), createData), { id: 'new-webhook-id' });
            mockWebhookService.createWebhook.mockResolvedValue(createdWebhook);
            const response = yield (0, supertest_1.default)(app)
                .post('/api/webhooks')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`)
                .send(createData);
            expect(response.status).toBe(201);
            expect(response.body).toMatchObject({
                id: 'new-webhook-id',
                name: createData.name,
                url: createData.url,
                events: createData.events,
                headers: createData.headers,
                retryCount: createData.retryCount,
                timeoutMs: createData.timeoutMs,
            });
            expect(mockWebhookService.createWebhook).toHaveBeenCalledWith(test_data_1.testOrganization.id, createData);
        }));
        it('should validate required fields', () => __awaiter(void 0, void 0, void 0, function* () {
            const invalidData = {
                name: '',
                url: 'https://api.example.com/webhook',
                events: ['chat.created'],
            };
            const response = yield (0, supertest_1.default)(app)
                .post('/api/webhooks')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`)
                .send(invalidData);
            expect(response.status).toBe(400);
            expect(response.body).toEqual({
                error: 'Name, URL, and events array are required',
            });
        }));
        it('should validate URL format', () => __awaiter(void 0, void 0, void 0, function* () {
            const invalidData = {
                name: 'Test Webhook',
                url: 'invalid-url',
                events: ['chat.created'],
            };
            const response = yield (0, supertest_1.default)(app)
                .post('/api/webhooks')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`)
                .send(invalidData);
            expect(response.status).toBe(400);
            expect(response.body).toEqual({ error: 'Invalid URL format' });
        }));
        it('should validate events array', () => __awaiter(void 0, void 0, void 0, function* () {
            const invalidData = {
                name: 'Test Webhook',
                url: 'https://api.example.com/webhook',
                events: ['invalid.event', 'chat.created', 'another.invalid'],
            };
            const response = yield (0, supertest_1.default)(app)
                .post('/api/webhooks')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`)
                .send(invalidData);
            expect(response.status).toBe(400);
            expect(response.body).toMatchObject({
                error: 'Invalid events: invalid.event, another.invalid',
                validEvents: expect.arrayContaining([
                    'chat.created',
                    'user.created',
                    'user.updated',
                    'widget.created',
                    'widget.updated',
                    'widget.deleted',
                    'knowledge_base.created',
                    'knowledge_base.updated',
                    'knowledge_base.deleted',
                ]),
            });
        }));
        it('should handle events as non-array', () => __awaiter(void 0, void 0, void 0, function* () {
            const invalidData = {
                name: 'Test Webhook',
                url: 'https://api.example.com/webhook',
                events: 'chat.created', // Should be array
            };
            const response = yield (0, supertest_1.default)(app)
                .post('/api/webhooks')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`)
                .send(invalidData);
            expect(response.status).toBe(400);
            expect(response.body).toEqual({
                error: 'Name, URL, and events array are required',
            });
        }));
        it('should handle service creation errors', () => __awaiter(void 0, void 0, void 0, function* () {
            const createData = {
                name: 'Test Webhook',
                url: 'https://api.example.com/webhook',
                events: ['chat.created'],
            };
            mockWebhookService.createWebhook.mockRejectedValue(new Error('Failed to create webhook in database'));
            const response = yield (0, supertest_1.default)(app)
                .post('/api/webhooks')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`)
                .send(createData);
            expect(response.status).toBe(500);
            expect(response.body).toEqual({
                error: 'Failed to create webhook',
            });
        }));
    });
    describe('PUT /api/webhooks/:id', () => {
        it('should update webhook successfully', () => __awaiter(void 0, void 0, void 0, function* () {
            const updateData = {
                name: 'Updated Webhook',
                url: 'https://api.example.com/updated-webhook',
                events: ['user.created', 'widget.created'],
                isActive: false,
            };
            const updatedWebhook = Object.assign(Object.assign(Object.assign({}, testWebhook), updateData), { updatedAt: new Date() });
            mockWebhookService.updateWebhook.mockResolvedValue(updatedWebhook);
            const response = yield (0, supertest_1.default)(app)
                .put(`/api/webhooks/${testWebhook.id}`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`)
                .send(updateData);
            expect(response.status).toBe(200);
            expect(response.body).toMatchObject({
                id: testWebhook.id,
                name: updateData.name,
                url: updateData.url,
                events: updateData.events,
                isActive: updateData.isActive,
            });
            expect(mockWebhookService.updateWebhook).toHaveBeenCalledWith(testWebhook.id, test_data_1.testOrganization.id, updateData);
        }));
        it('should return 404 if webhook not found', () => __awaiter(void 0, void 0, void 0, function* () {
            mockWebhookService.updateWebhook.mockRejectedValue(new Error('Webhook not found or access denied'));
            const response = yield (0, supertest_1.default)(app)
                .put('/api/webhooks/non-existent-id')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`)
                .send({ name: 'Updated Name' });
            expect(response.status).toBe(404);
            expect(response.body).toEqual({ error: 'Webhook not found' });
        }));
        it('should handle other service errors', () => __awaiter(void 0, void 0, void 0, function* () {
            mockWebhookService.updateWebhook.mockRejectedValue(new Error('Database connection failed'));
            const response = yield (0, supertest_1.default)(app)
                .put(`/api/webhooks/${testWebhook.id}`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`)
                .send({ name: 'Updated Name' });
            expect(response.status).toBe(500);
            expect(response.body).toEqual({
                error: 'Failed to update webhook',
            });
        }));
    });
    describe('DELETE /api/webhooks/:id', () => {
        it('should delete webhook successfully', () => __awaiter(void 0, void 0, void 0, function* () {
            mockWebhookService.deleteWebhook.mockResolvedValue();
            const response = yield (0, supertest_1.default)(app)
                .delete(`/api/webhooks/${testWebhook.id}`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(204);
            expect(response.body).toEqual({});
            expect(mockWebhookService.deleteWebhook).toHaveBeenCalledWith(testWebhook.id, test_data_1.testOrganization.id);
        }));
        it('should return 404 if webhook not found', () => __awaiter(void 0, void 0, void 0, function* () {
            mockWebhookService.deleteWebhook.mockRejectedValue(new Error('Webhook not found or access denied'));
            const response = yield (0, supertest_1.default)(app)
                .delete('/api/webhooks/non-existent-id')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(404);
            expect(response.body).toEqual({ error: 'Webhook not found' });
        }));
        it('should handle other service errors', () => __awaiter(void 0, void 0, void 0, function* () {
            mockWebhookService.deleteWebhook.mockRejectedValue(new Error('Database connection failed'));
            const response = yield (0, supertest_1.default)(app)
                .delete(`/api/webhooks/${testWebhook.id}`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(500);
            expect(response.body).toEqual({
                error: 'Failed to delete webhook',
            });
        }));
    });
    describe('GET /api/webhooks/:id/logs', () => {
        it('should return webhook logs', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockLogs = [
                testWebhookLog,
                Object.assign(Object.assign({}, testWebhookLog), { id: 'log-test-456', status: 'failed', statusCode: 500, response: { error: 'Internal Server Error' }, attempt: 2 }),
            ];
            mockWebhookService.getWebhookLogs.mockResolvedValue(mockLogs);
            const response = yield (0, supertest_1.default)(app)
                .get(`/api/webhooks/${testWebhook.id}/logs`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body).toHaveLength(2);
            expect(response.body[0]).toMatchObject({
                id: testWebhookLog.id,
                event: testWebhookLog.event,
                status: testWebhookLog.status,
                statusCode: testWebhookLog.statusCode,
            });
            expect(mockWebhookService.getWebhookLogs).toHaveBeenCalledWith(testWebhook.id, test_data_1.testOrganization.id, {
                status: undefined,
                event: undefined,
                startDate: undefined,
                endDate: undefined,
                limit: undefined,
            });
        }));
        it('should filter logs by query parameters', () => __awaiter(void 0, void 0, void 0, function* () {
            mockWebhookService.getWebhookLogs.mockResolvedValue([
                testWebhookLog,
            ]);
            const queryParams = {
                status: 'success',
                event: 'chat.created',
                startDate: '2024-01-01',
                endDate: '2024-01-31',
                limit: '10',
            };
            const response = yield (0, supertest_1.default)(app)
                .get(`/api/webhooks/${testWebhook.id}/logs`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`)
                .query(queryParams);
            expect(response.status).toBe(200);
            expect(mockWebhookService.getWebhookLogs).toHaveBeenCalledWith(testWebhook.id, test_data_1.testOrganization.id, {
                status: 'success',
                event: 'chat.created',
                startDate: new Date('2024-01-01'),
                endDate: new Date('2024-01-31'),
                limit: 10,
            });
        }));
        it('should return 404 if webhook not found', () => __awaiter(void 0, void 0, void 0, function* () {
            mockWebhookService.getWebhookLogs.mockRejectedValue(new Error('Webhook not found or access denied'));
            const response = yield (0, supertest_1.default)(app)
                .get('/api/webhooks/non-existent-id/logs')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(404);
            expect(response.body).toEqual({ error: 'Webhook not found' });
        }));
        it('should handle service errors', () => __awaiter(void 0, void 0, void 0, function* () {
            mockWebhookService.getWebhookLogs.mockRejectedValue(new Error('Database query failed'));
            const response = yield (0, supertest_1.default)(app)
                .get(`/api/webhooks/${testWebhook.id}/logs`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(500);
            expect(response.body).toEqual({
                error: 'Failed to fetch webhook logs',
            });
        }));
    });
    describe('POST /api/webhooks/:id/test', () => {
        it('should test webhook successfully', () => __awaiter(void 0, void 0, void 0, function* () {
            const testLog = Object.assign(Object.assign({}, testWebhookLog), { id: 'test-log-123', event: 'test', payload: { test: true }, status: 'success', statusCode: 200, response: { received: true } });
            mockWebhookService.testWebhook.mockResolvedValue(testLog);
            const response = yield (0, supertest_1.default)(app)
                .post(`/api/webhooks/${testWebhook.id}/test`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body).toMatchObject({
                id: testLog.id,
                event: 'test',
                status: 'success',
                statusCode: 200,
                response: { received: true },
            });
            expect(mockWebhookService.testWebhook).toHaveBeenCalledWith(testWebhook.id, test_data_1.testOrganization.id);
        }));
        it('should return test results even if webhook fails', () => __awaiter(void 0, void 0, void 0, function* () {
            const failedTestLog = Object.assign(Object.assign({}, testWebhookLog), { id: 'test-log-failed', event: 'test', status: 'failed', statusCode: 404, response: { error: 'Not Found' }, errorMessage: 'Webhook endpoint returned 404' });
            mockWebhookService.testWebhook.mockResolvedValue(failedTestLog);
            const response = yield (0, supertest_1.default)(app)
                .post(`/api/webhooks/${testWebhook.id}/test`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(200);
            expect(response.body).toMatchObject({
                status: 'failed',
                statusCode: 404,
                errorMessage: 'Webhook endpoint returned 404',
            });
        }));
        it('should return 404 if webhook not found', () => __awaiter(void 0, void 0, void 0, function* () {
            mockWebhookService.testWebhook.mockRejectedValue(new Error('Webhook not found'));
            const response = yield (0, supertest_1.default)(app)
                .post('/api/webhooks/non-existent-id/test')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(404);
            expect(response.body).toEqual({ error: 'Webhook not found' });
        }));
        it('should handle service errors during test', () => __awaiter(void 0, void 0, void 0, function* () {
            mockWebhookService.testWebhook.mockRejectedValue(new Error('Network timeout during test'));
            const response = yield (0, supertest_1.default)(app)
                .post(`/api/webhooks/${testWebhook.id}/test`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(500);
            expect(response.body).toEqual({
                error: 'Failed to test webhook',
            });
        }));
    });
    describe('Authentication and authorization', () => {
        it('should require authentication for all endpoints', () => __awaiter(void 0, void 0, void 0, function* () {
            auth_1.authMiddleware.mockImplementationOnce((req, res) => {
                res.status(401).json({ error: 'Unauthorized' });
            });
            const response = yield (0, supertest_1.default)(app).get('/api/webhooks');
            expect(response.status).toBe(401);
            expect(response.body).toEqual({ error: 'Unauthorized' });
        }));
        it('should require organization access for all endpoints', () => __awaiter(void 0, void 0, void 0, function* () {
            organizationAccess_1.orgAccessMiddleware.mockImplementationOnce((req, res) => {
                res.status(403).json({ error: 'Organization access required' });
            });
            const response = yield (0, supertest_1.default)(app)
                .get('/api/webhooks')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(response.status).toBe(403);
            expect(response.body).toEqual({ error: 'Organization access required' });
        }));
        it('should isolate webhooks by organization', () => __awaiter(void 0, void 0, void 0, function* () {
            mockWebhookService.getWebhooks.mockResolvedValue([testWebhook]);
            yield (0, supertest_1.default)(app)
                .get('/api/webhooks')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`);
            expect(mockWebhookService.getWebhooks).toHaveBeenCalledWith(test_data_1.testOrganization.id);
        }));
    });
    describe('Input validation and security', () => {
        it('should validate webhook URL protocols', () => __awaiter(void 0, void 0, void 0, function* () {
            const testCases = [
                { url: 'http://api.example.com/webhook', shouldPass: true },
                { url: 'https://api.example.com/webhook', shouldPass: true },
                { url: 'ftp://api.example.com/webhook', shouldPass: true }, // URL constructor allows this
                { url: 'javascript:alert(1)', shouldPass: false },
                { url: 'data:text/html,<script>alert(1)</script>', shouldPass: true }, // URL constructor allows this
            ];
            for (const testCase of testCases) {
                const createData = {
                    name: 'Test Webhook',
                    url: testCase.url,
                    events: ['chat.created'],
                };
                const response = yield (0, supertest_1.default)(app)
                    .post('/api/webhooks')
                    .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`)
                    .send(createData);
                if (testCase.shouldPass) {
                    // If URL passes validation, we expect either success or service error
                    expect([200, 201, 500]).toContain(response.status);
                }
                else {
                    expect(response.status).toBe(400);
                    expect(response.body.error).toContain('Invalid URL format');
                }
            }
        }));
        it('should sanitize webhook headers', () => __awaiter(void 0, void 0, void 0, function* () {
            const createData = {
                name: 'Test Webhook',
                url: 'https://api.example.com/webhook',
                events: ['chat.created'],
                headers: {
                    Authorization: 'Bearer token123',
                    'X-Custom-Header': 'value',
                    'Content-Type': 'application/json',
                },
            };
            mockWebhookService.createWebhook.mockResolvedValue(testWebhook);
            const response = yield (0, supertest_1.default)(app)
                .post('/api/webhooks')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`)
                .send(createData);
            expect(response.status).toBe(201);
            expect(mockWebhookService.createWebhook).toHaveBeenCalledWith(test_data_1.testOrganization.id, expect.objectContaining({
                headers: createData.headers,
            }));
        }));
        it('should validate numeric fields', () => __awaiter(void 0, void 0, void 0, function* () {
            const createData = {
                name: 'Test Webhook',
                url: 'https://api.example.com/webhook',
                events: ['chat.created'],
                retryCount: 'not-a-number',
                timeoutMs: 'also-not-a-number',
            };
            // The service layer should handle validation
            mockWebhookService.createWebhook.mockResolvedValue(testWebhook);
            const response = yield (0, supertest_1.default)(app)
                .post('/api/webhooks')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`)
                .send(createData);
            expect(response.status).toBe(201);
            // Service receives the raw values and should validate them
            expect(mockWebhookService.createWebhook).toHaveBeenCalledWith(test_data_1.testOrganization.id, expect.objectContaining({
                retryCount: 'not-a-number',
                timeoutMs: 'also-not-a-number',
            }));
        }));
    });
    describe('Edge cases and error handling', () => {
        it('should handle malformed JSON in request body', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = yield (0, supertest_1.default)(app)
                .post('/api/webhooks')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`)
                .set('Content-Type', 'application/json')
                .send('{ invalid json }');
            expect(response.status).toBe(400);
        }));
        it('should handle very long webhook names', () => __awaiter(void 0, void 0, void 0, function* () {
            const longName = 'A'.repeat(1000);
            const createData = {
                name: longName,
                url: 'https://api.example.com/webhook',
                events: ['chat.created'],
            };
            // Service should handle validation
            mockWebhookService.createWebhook.mockResolvedValue(Object.assign(Object.assign({}, testWebhook), { name: longName }));
            const response = yield (0, supertest_1.default)(app)
                .post('/api/webhooks')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`)
                .send(createData);
            expect(response.status).toBe(201);
        }));
        it('should handle empty events array', () => __awaiter(void 0, void 0, void 0, function* () {
            const createData = {
                name: 'Test Webhook',
                url: 'https://api.example.com/webhook',
                events: [],
            };
            // Empty events array should be handled by the service
            mockWebhookService.createWebhook.mockResolvedValue(testWebhook);
            const response = yield (0, supertest_1.default)(app)
                .post('/api/webhooks')
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`)
                .send(createData);
            expect(response.status).toBe(201);
        }));
        it('should handle date parsing errors in logs query', () => __awaiter(void 0, void 0, void 0, function* () {
            mockWebhookService.getWebhookLogs.mockResolvedValue([]);
            const response = yield (0, supertest_1.default)(app)
                .get(`/api/webhooks/${testWebhook.id}/logs`)
                .set('Authorization', `Bearer ${(0, test_data_1.generateTestToken)(test_data_1.testUser.id, test_data_1.testOrganization.id)}`)
                .query({
                startDate: 'invalid-date',
                endDate: 'also-invalid',
            });
            expect(response.status).toBe(200);
            // Service should receive Date objects (even if invalid dates)
            expect(mockWebhookService.getWebhookLogs).toHaveBeenCalledWith(testWebhook.id, test_data_1.testOrganization.id, expect.objectContaining({
                startDate: expect.any(Date),
                endDate: expect.any(Date),
            }));
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,