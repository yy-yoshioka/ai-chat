{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/app.ts","mappings":"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","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/app.ts"],"sourcesContent":["import express from 'express';\nimport dotenv from 'dotenv';\nimport cookieParser from 'cookie-parser';\nimport cors from 'cors';\nimport helmet from 'helmet';\nimport {\n  metricsMiddleware,\n  errorTrackingMiddleware,\n} from './middleware/metrics';\nimport authRoutes from './routes/auth';\nimport faqRoutes from './routes/faqs';\nimport chatRoutes from './routes/chat';\nimport adminRoutes from './routes/admin';\nimport widgetsRoutes from './routes/widgets';\nimport { widgetLoaderRoutes } from './routes/widgetLoader';\nimport { prisma } from './lib/prisma';\nimport { embedRoutes } from './routes/embed';\nimport { analyticsRoutes } from './routes/analytics';\nimport { translationRoutes } from './routes/translation';\nimport { billingRoutes } from './routes/billing';\nimport { companyRoutes } from './routes/companies';\nimport organizationsRoutes from './routes/organizations';\nimport usersRoutes from './routes/users';\nimport dashboardRoutes from './routes/dashboard';\nimport reportsRoutes from './routes/reports';\nimport knowledgeBaseRoutes from './routes/knowledge-base';\nimport trainingRoutes from './routes/training';\nimport settingsRoutes from './routes/settings';\nimport webhooksRoutes from './routes/webhooks';\nimport statusRoutes from './routes/status';\nimport dataRetentionRoutes from './routes/dataRetention';\nimport securityRoutes from './routes/security';\n\n// Load environment variables\ndotenv.config();\n\n// Initialize Express app\nconst app = express();\n\n// Add metrics middleware early\napp.use(metricsMiddleware);\n\n// Security headers (except for widget loader which needs to be embeddable)\napp.use('/widget-loader', (req, res, next) => {\n  // Allow widget loader to be embedded in any site\n  res.removeHeader('X-Frame-Options');\n  next();\n});\n\napp.use(\n  helmet({\n    frameguard: { action: 'sameorigin' }, // Default frame protection\n  })\n);\n\n// CORS middleware with different configs for different routes\napp.use(\n  '/api/widgets/:widgetKey',\n  cors({\n    origin: '*', // Allow any origin for public widget config\n    methods: ['GET'],\n    allowedHeaders: ['Content-Type'],\n  })\n);\n\napp.use(\n  '/api/chat/widget',\n  cors({\n    origin: '*', // Allow any origin for widget chat\n    methods: ['POST'],\n    allowedHeaders: ['Content-Type', 'X-Widget-Key'],\n  })\n);\n\napp.use(\n  '/widget-loader',\n  cors({\n    origin: '*', // Allow any origin for widget loader\n    methods: ['GET'],\n    allowedHeaders: ['Content-Type'],\n  })\n);\n\n// Default CORS for admin/auth routes\napp.use(\n  cors({\n    origin: [\n      'http://localhost:3000',\n      process.env.FRONTEND_URL || 'http://localhost:3000',\n    ], // Your frontend URL(s)\n    credentials: true, // Allow cookies to be sent with requests\n    methods: ['GET', 'POST', 'PUT', 'DELETE'],\n    allowedHeaders: ['Content-Type', 'Authorization'],\n  })\n);\n\n// Middleware\napp.use(express.json());\napp.use(cookieParser());\n\n// Routes\napp.get('/', (_req, res) => {\n  res.send('Hello from Express + TypeScript!');\n});\n\n// Widget loader routes (serve JS files)\napp.use('/widget-loader', widgetLoaderRoutes);\n\n// API routes\napp.use('/api/auth', authRoutes);\napp.use('/api/faqs', faqRoutes);\napp.use('/api/chat', chatRoutes);\napp.use('/api/admin', adminRoutes);\napp.use('/api/widgets', widgetsRoutes);\napp.use('/api/billing', billingRoutes);\napp.use('/api/embed', embedRoutes);\napp.use('/api/analytics', analyticsRoutes);\napp.use('/api/translation', translationRoutes);\napp.use('/api/companies', companyRoutes);\napp.use('/api/organizations', organizationsRoutes);\napp.use('/api/users', usersRoutes);\napp.use('/api/dashboard', dashboardRoutes);\napp.use('/api/reports', reportsRoutes);\napp.use('/api', knowledgeBaseRoutes);\napp.use('/api', trainingRoutes);\napp.use('/api/settings', settingsRoutes);\napp.use('/api/webhooks', webhooksRoutes);\napp.use('/api/status', statusRoutes);\napp.use('/api/data-retention', dataRetentionRoutes);\napp.use('/api/security', securityRoutes);\napp.use('/v1/settings', settingsRoutes);\napp.use('/v1/organizations', organizationsRoutes);\napp.use('/v1/widgets', widgetsRoutes);\n\n// Legacy routes (backwards compatibility)\napp.use('/auth', authRoutes);\napp.use('/faqs', faqRoutes);\napp.use('/chat', chatRoutes);\napp.use('/admin', adminRoutes);\n\n// For checking that Prisma is connected\napp.get('/debug/db', async (_req, res) => {\n  try {\n    // Count users in the database\n    const userCount = await prisma.user.count();\n    const widgetCount = await prisma.widget.count();\n    const companyCount = await prisma.company.count();\n\n    res.json({\n      message: 'Database connection working',\n      userCount,\n      widgetCount,\n      companyCount,\n    });\n  } catch (error) {\n    console.error('Database error:', error);\n    res.status(500).json({ message: 'Database connection error' });\n  }\n});\n\n// ✅ [A] ヘルスチェック\napp.get('/health', (_req, res) => res.sendStatus(200));\n\n// Add error tracking middleware at the end\napp.use(errorTrackingMiddleware);\n\nexport default app;\n"],"version":3}