22308d0072dec39a5b3258e370bd2a94
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const auth_1 = require("../middleware/auth");
const organizationAccess_1 = require("../middleware/organizationAccess");
const security_1 = require("../middleware/security");
const client_1 = require("@prisma/client");
const widgetService = __importStar(require("../services/widgetService"));
const router = express_1.default.Router();
// Get widgets by organization
router.get('/', auth_1.authMiddleware, organizationAccess_1.orgAccessMiddleware, (0, security_1.requirePermission)(client_1.Permission.WIDGET_READ), (0, security_1.logDataAccess)('widgets', 'SELECT'), (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { page, limit, search, status } = req.query;
        const result = yield widgetService.getWidgetsByOrganization(req.organizationId, {
            page: page ? parseInt(page) : undefined,
            limit: limit ? parseInt(limit) : undefined,
            search: search,
            status: status,
        });
        res.json(result);
    }
    catch (error) {
        res.status(500).json({ error: 'Failed to fetch widgets' });
    }
}));
// Create widget
router.post('/', auth_1.authMiddleware, organizationAccess_1.orgAccessMiddleware, (0, security_1.requirePermission)(client_1.Permission.WIDGET_WRITE), (0, security_1.logDataAccess)('widgets', 'INSERT'), (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const widget = yield widgetService.createWidget(Object.assign(Object.assign({}, req.body), { organizationId: req.organizationId }));
        res.status(201).json(widget);
    }
    catch (error) {
        const message = error instanceof Error ? error.message : 'Failed to create widget';
        const status = message.includes('not found') || message.includes('access denied')
            ? 400
            : 500;
        res.status(status).json({ error: message });
    }
}));
// Get widget by ID
router.get('/:id', auth_1.authMiddleware, organizationAccess_1.orgAccessMiddleware, (0, security_1.requirePermission)(client_1.Permission.WIDGET_READ), (0, security_1.logDataAccess)('widgets', 'SELECT'), (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const widget = yield widgetService.getWidgetById(req.params.id, req.organizationId);
        res.json(widget);
    }
    catch (error) {
        const message = error instanceof Error ? error.message : 'Failed to fetch widget';
        const status = message.includes('not found') || message.includes('access denied')
            ? 404
            : 500;
        res.status(status).json({ error: message });
    }
}));
// Update widget
router.put('/:id', auth_1.authMiddleware, organizationAccess_1.orgAccessMiddleware, (0, security_1.requirePermission)(client_1.Permission.WIDGET_WRITE), (0, security_1.logDataAccess)('widgets', 'UPDATE'), (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const widget = yield widgetService.updateWidget(req.params.id, req.organizationId, req.body);
        res.json(widget);
    }
    catch (error) {
        const message = error instanceof Error ? error.message : 'Failed to update widget';
        const status = message.includes('not found') || message.includes('access denied')
            ? 404
            : 500;
        res.status(status).json({ error: message });
    }
}));
// Delete widget
router.delete('/:id', auth_1.authMiddleware, organizationAccess_1.orgAccessMiddleware, (0, security_1.requirePermission)(client_1.Permission.WIDGET_DELETE), (0, security_1.logDataAccess)('widgets', 'DELETE'), (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        yield widgetService.deleteWidget(req.params.id, req.organizationId);
        res.status(204).send();
    }
    catch (error) {
        const message = error instanceof Error ? error.message : 'Failed to delete widget';
        const status = message.includes('not found') || message.includes('access denied')
            ? 404
            : 500;
        res.status(status).json({ error: message });
    }
}));
// Get widget analytics
router.get('/:id/analytics', auth_1.authMiddleware, organizationAccess_1.orgAccessMiddleware, (0, security_1.requirePermission)(client_1.Permission.ANALYTICS_READ), (0, security_1.logDataAccess)('analytics', 'SELECT'), (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const analytics = yield widgetService.getWidgetAnalytics(req.params.id, req.organizationId);
        res.json(analytics);
    }
    catch (error) {
        const message = error instanceof Error
            ? error.message
            : 'Failed to fetch widget analytics';
        const status = message.includes('not found') || message.includes('access denied')
            ? 404
            : 500;
        res.status(status).json({ error: message });
    }
}));
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,