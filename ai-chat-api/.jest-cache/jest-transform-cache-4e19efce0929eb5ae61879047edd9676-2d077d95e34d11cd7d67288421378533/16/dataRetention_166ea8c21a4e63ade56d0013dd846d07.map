{"version":3,"names":["express_1","cov_1hajev5r1o","s","__importDefault","require","auth_1","admin_1","dataRetentionService","__importStar","prisma_1","dataRetentionSchema_1","router","default","Router","get","authMiddleware","req","res","f","__awaiter","user","prisma","findUnique","where","id","select","organizationId","b","status","json","error","policy","getOrganizationRetentionPolicy","put","adminMiddleware","validatedData","dataRetentionPolicySchema","parse","body","updateRetentionPolicy","Error","name","details","post","dataType","dataRetentionCleanupSchema","result","anonymizeData","anonymizeChatLogs","chatLogs","cleanupChatLogs","cleanupWebhookLogs","webhookLogs","message","itemsProcessed","jobs","getRetentionJobHistory","parseInt","query","limit","undefined","retentionDays","globalCleanupSchema","cleanupSystemMetrics","cleanupHealthChecks","exports"],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/routes/dataRetention.ts"],"sourcesContent":["import express from 'express';\nimport { authMiddleware } from '../middleware/auth';\nimport { adminMiddleware } from '../middleware/admin';\nimport * as dataRetentionService from '../services/dataRetentionService';\nimport { prisma } from '../lib/prisma';\nimport {\n  dataRetentionPolicySchema,\n  dataRetentionCleanupSchema,\n  globalCleanupSchema,\n} from '../schemas/dataRetentionSchema';\n\nconst router = express.Router();\n\n// Get retention policy\nrouter.get('/policy', authMiddleware, async (req, res) => {\n  try {\n    // Get user's organization\n    const user = await prisma.user.findUnique({\n      where: { id: req.user!.id },\n      select: { organizationId: true },\n    });\n\n    if (!user?.organizationId) {\n      return res\n        .status(403)\n        .json({ error: 'User does not belong to an organization' });\n    }\n\n    const policy = await dataRetentionService.getOrganizationRetentionPolicy(\n      user.organizationId\n    );\n    res.json(policy);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch retention policy' });\n  }\n});\n\n// Update retention policy\nrouter.put('/policy', authMiddleware, adminMiddleware, async (req, res) => {\n  try {\n    // Validate request body\n    const validatedData = dataRetentionPolicySchema.parse(req.body);\n\n    // Get user's organization\n    const user = await prisma.user.findUnique({\n      where: { id: req.user!.id },\n      select: { organizationId: true },\n    });\n\n    if (!user?.organizationId) {\n      return res\n        .status(403)\n        .json({ error: 'User does not belong to an organization' });\n    }\n\n    const policy = await dataRetentionService.updateRetentionPolicy(\n      user.organizationId,\n      validatedData\n    );\n    res.json(policy);\n  } catch (error) {\n    if (error instanceof Error && error.name === 'ZodError') {\n      return res\n        .status(400)\n        .json({ error: 'Invalid request data', details: error });\n    }\n    res.status(500).json({ error: 'Failed to update retention policy' });\n  }\n});\n\n// Manual cleanup trigger\nrouter.post('/cleanup', authMiddleware, adminMiddleware, async (req, res) => {\n  try {\n    // Validate request body\n    const { dataType } = dataRetentionCleanupSchema.parse(req.body);\n\n    // Get user's organization\n    const user = await prisma.user.findUnique({\n      where: { id: req.user!.id },\n      select: { organizationId: true },\n    });\n\n    if (!user?.organizationId) {\n      return res\n        .status(403)\n        .json({ error: 'User does not belong to an organization' });\n    }\n\n    const policy = await dataRetentionService.getOrganizationRetentionPolicy(\n      user.organizationId\n    );\n\n    let result;\n    switch (dataType) {\n      case 'chat_logs':\n        result = policy.anonymizeData\n          ? await dataRetentionService.anonymizeChatLogs(\n              user.organizationId,\n              policy.chatLogs\n            )\n          : await dataRetentionService.cleanupChatLogs(\n              user.organizationId,\n              policy.chatLogs\n            );\n        break;\n      case 'webhook_logs':\n        result = await dataRetentionService.cleanupWebhookLogs(\n          user.organizationId,\n          policy.webhookLogs\n        );\n        break;\n      default:\n        return res.status(400).json({ error: 'Invalid data type' });\n    }\n\n    res.json({\n      message: 'Cleanup completed',\n      itemsProcessed: result,\n    });\n  } catch (error) {\n    if (error instanceof Error && error.name === 'ZodError') {\n      return res\n        .status(400)\n        .json({ error: 'Invalid request data', details: error });\n    }\n    res.status(500).json({ error: 'Cleanup failed' });\n  }\n});\n\n// Get job history\nrouter.get('/jobs', authMiddleware, async (req, res) => {\n  try {\n    // Get user's organization\n    const user = await prisma.user.findUnique({\n      where: { id: req.user!.id },\n      select: { organizationId: true },\n    });\n\n    if (!user?.organizationId) {\n      return res\n        .status(403)\n        .json({ error: 'User does not belong to an organization' });\n    }\n\n    const jobs = await dataRetentionService.getRetentionJobHistory(\n      user.organizationId,\n      parseInt(req.query.limit as string) || 50\n    );\n    res.json(jobs);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch job history' });\n  }\n});\n\n// Admin-only global operations\nrouter.get('/jobs/all', authMiddleware, adminMiddleware, async (req, res) => {\n  try {\n    const jobs = await dataRetentionService.getRetentionJobHistory(\n      undefined,\n      parseInt(req.query.limit as string) || 100\n    );\n    res.json(jobs);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch global job history' });\n  }\n});\n\nrouter.post(\n  '/cleanup/global',\n  authMiddleware,\n  adminMiddleware,\n  async (req, res) => {\n    try {\n      // Validate request body\n      const { dataType, retentionDays } = globalCleanupSchema.parse(req.body);\n\n      let result;\n      switch (dataType) {\n        case 'system_metrics':\n          result = await dataRetentionService.cleanupSystemMetrics(\n            retentionDays || 90\n          );\n          break;\n        case 'health_checks':\n          result = await dataRetentionService.cleanupHealthChecks(\n            retentionDays || 7\n          );\n          break;\n        default:\n          return res.status(400).json({ error: 'Invalid data type' });\n      }\n\n      res.json({\n        message: 'Global cleanup completed',\n        itemsProcessed: result,\n      });\n    } catch (error) {\n      if (error instanceof Error && error.name === 'ZodError') {\n        return res\n          .status(400)\n          .json({ error: 'Invalid request data', details: error });\n      }\n      res.status(500).json({ error: 'Global cleanup failed' });\n    }\n  }\n);\n\nexport default router;\n"],"mappingscAAA,GAAAC,CAAA,QAAAC,eAAA,CAAAC,OAAA;AACA,MAAAC,MAAA;AAAA;AAAA,CAAAJ,cAAA,GAAAC,CAAA,QAAAE,OAAA;AACA,MAAAE,OAAA;AAAA;AAAA,CAAAL,cAAA,GAAAC,CAAA,QAAAE,OAAA;AACA,MAAAG,oBAAA;AAAA;AAAA,CAAAN,cAAA,GAAAC,CAAA,QAAAM,YAAA,CAAAJ,OAAA;AACA,MAAAK,QAAA;AAAA;AAAA,CAAAR,cAAA,GAAAC,CAAA,QAAAE,OAAA;AACA,MAAAM,qBAAA;AAAA;AAAA,CAAAT,cAAA,GAAAC,CAAA,QAAAE,OAAA;AAMA,MAAMO,MAAM;AAAA;AAAA,CAAAV,cAAA,GAAAC,CAAA,QAAGF,SAAA,CAAAY,OAAO,CAACC,MAAM,EAAE;AAE/B;AAAA;AAAAZ,cAAA,GAAAC,CAAA;AACAS,MAAM,CAACG,GAAG,CAAC,SAAS,EAAET,MAAA,CAAAU,cAAc,EAAE,CAAOC,GAAG,EAAEC,GAAG,KAAI;EAAA;EAAAhB,cAAA,GAAAiB,CAAA;EAAAjB,cAAA,GAAAC,CAAA;EAAA,OAAAiB,SAAA;IAAA;IAAAlB,cAAA,GAAAiB,CAAA;IAAAjB,cAAA,GAAAC,CAAA;IACvD,IAAI;MACF;MACA,MAAMkB,IAAI;MAAA;MAAA,CAAAnB,cAAA,GAAAC,CAAA,QAAG,MAAMO,QAAA,CAAAY,MAAM,CAACD,IAAI,CAACE,UAAU,CAAC;QACxCC,KAAK,EAAE;UAAEC,EAAE,EAAER,GAAG,CAACI,IAAK,CAACI;QAAE,CAAE;QAC3BC,MAAM,EAAE;UAAEC,cAAc,EAAE;QAAI;OAC/B,CAAC;MAAC;MAAAzB,cAAA,GAAAC,CAAA;MAEH,IAAI;MAAC;MAAA,CAAAD,cAAA,GAAA0B,CAAA,WAAAP,IAAI;MAAA;MAAA,CAAAnB,cAAA,GAAA0B,CAAA,WAAJP,IAAI;MAAA;MAAA,CAAAnB,cAAA,GAAA0B,CAAA;MAAA;MAAA,CAAA1B,cAAA,GAAA0B,CAAA,WAAJP,IAAI,CAAEM,cAAc,IAAE;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAC,CAAA;QACzB,OAAOe,GAAG,CACPW,MAAM,CAAC,GAAG,CAAC,CACXC,IAAI,CAAC;UAAEC,KAAK,EAAE;QAAyC,CAAE,CAAC;MAC/D,CAAC;MAAA;MAAA;QAAA7B,cAAA,GAAA0B,CAAA;MAAA;MAED,MAAMI,MAAM;MAAA;MAAA,CAAA9B,cAAA,GAAAC,CAAA,QAAG,MAAMK,oBAAoB,CAACyB,8BAA8B,CACtEZ,IAAI,CAACM,cAAc,CACpB;MAAC;MAAAzB,cAAA,GAAAC,CAAA;MACFe,GAAG,CAACY,IAAI,CAACE,MAAM,CAAC;IAClB,CAAC,CAAC,OAAOD,KAAK,EAAE;MAAA;MAAA7B,cAAA,GAAAC,CAAA;MACde,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAkC,CAAE,CAAC;IACrE;EACF,CAAC;AAAA,EAAC;AAEF;AAAA;AAAA7B,cAAA,GAAAC,CAAA;AACAS,MAAM,CAACsB,GAAG,CAAC,SAAS,EAAE5B,MAAA,CAAAU,cAAc,EAAET,OAAA,CAAA4B,eAAe,EAAE,CAAOlB,GAAG,EAAEC,GAAG,KAAI;EAAA;EAAAhB,cAAA,GAAAiB,CAAA;EAAAjB,cAAA,GAAAC,CAAA;EAAA,OAAAiB,SAAA;IAAA;IAAAlB,cAAA,GAAAiB,CAAA;IAAAjB,cAAA,GAAAC,CAAA;IACxE,IAAI;MACF;MACA,MAAMiC,aAAa;MAAA;MAAA,CAAAlC,cAAA,GAAAC,CAAA,QAAGQ,qBAAA,CAAA0B,yBAAyB,CAACC,KAAK,CAACrB,GAAG,CAACsB,IAAI,CAAC;MAE/D;MACA,MAAMlB,IAAI;MAAA;MAAA,CAAAnB,cAAA,GAAAC,CAAA,QAAG,MAAMO,QAAA,CAAAY,MAAM,CAACD,IAAI,CAACE,UAAU,CAAC;QACxCC,KAAK,EAAE;UAAEC,EAAE,EAAER,GAAG,CAACI,IAAK,CAACI;QAAE,CAAE;QAC3BC,MAAM,EAAE;UAAEC,cAAc,EAAE;QAAI;OAC/B,CAAC;MAAC;MAAAzB,cAAA,GAAAC,CAAA;MAEH,IAAI;MAAC;MAAA,CAAAD,cAAA,GAAA0B,CAAA,WAAAP,IAAI;MAAA;MAAA,CAAAnB,cAAA,GAAA0B,CAAA,WAAJP,IAAI;MAAA;MAAA,CAAAnB,cAAA,GAAA0B,CAAA;MAAA;MAAA,CAAA1B,cAAA,GAAA0B,CAAA,WAAJP,IAAI,CAAEM,cAAc,IAAE;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAC,CAAA;QACzB,OAAOe,GAAG,CACPW,MAAM,CAAC,GAAG,CAAC,CACXC,IAAI,CAAC;UAAEC,KAAK,EAAE;QAAyC,CAAE,CAAC;MAC/D,CAAC;MAAA;MAAA;QAAA7B,cAAA,GAAA0B,CAAA;MAAA;MAED,MAAMI,MAAM;MAAA;MAAA,CAAA9B,cAAA,GAAAC,CAAA,QAAG,MAAMK,oBAAoB,CAACgC,qBAAqB,CAC7DnB,IAAI,CAACM,cAAc,EACnBS,aAAa,CACd;MAAC;MAAAlC,cAAA,GAAAC,CAAA;MACFe,GAAG,CAACY,IAAI,CAACE,MAAM,CAAC;IAClB,CAAC,CAAC,OAAOD,KAAK,EAAE;MAAA;MAAA7B,cAAA,GAAAC,CAAA;MACd;MAAI;MAAA,CAAAD,cAAA,GAAA0B,CAAA,WAAAG,KAAK,YAAYU,KAAK;MAAA;MAAA,CAAAvC,cAAA,GAAA0B,CAAA,WAAIG,KAAK,CAACW,IAAI,KAAK,UAAU,GAAE;QAAA;QAAAxC,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAC,CAAA;QACvD,OAAOe,GAAG,CACPW,MAAM,CAAC,GAAG,CAAC,CACXC,IAAI,CAAC;UAAEC,KAAK,EAAE,sBAAsB;UAAEY,OAAO,EAAEZ;QAAK,CAAE,CAAC;MAC5D,CAAC;MAAA;MAAA;QAAA7B,cAAA,GAAA0B,CAAA;MAAA;MAAA1B,cAAA,GAAAC,CAAA;MACDe,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAmC,CAAE,CAAC;IACtE;EACF,CAAC;AAAA,EAAC;AAEF;AAAA;AAAA7B,cAAA,GAAAC,CAAA;AACAS,MAAM,CAACgC,IAAI,CAAC,UAAU,EAAEtC,MAAA,CAAAU,cAAc,EAAET,OAAA,CAAA4B,eAAe,EAAE,CAAOlB,GAAG,EAAEC,GAAG,KAAI;EAAA;EAAAhB,cAAA,GAAAiB,CAAA;EAAAjB,cAAA,GAAAC,CAAA;EAAA,OAAAiB,SAAA;IAAA;IAAAlB,cAAA,GAAAiB,CAAA;IAAAjB,cAAA,GAAAC,CAAA;IAC1E,IAAI;MACF;MACA,MAAM;QAAE0C;MAAQ,CAAE;MAAA;MAAA,CAAA3C,cAAA,GAAAC,CAAA,QAAGQ,qBAAA,CAAAmC,0BAA0B,CAACR,KAAK,CAACrB,GAAG,CAACsB,IAAI,CAAC;MAE/D;MACA,MAAMlB,IAAI;MAAA;MAAA,CAAAnB,cAAA,GAAAC,CAAA,QAAG,MAAMO,QAAA,CAAAY,MAAM,CAACD,IAAI,CAACE,UAAU,CAAC;QACxCC,KAAK,EAAE;UAAEC,EAAE,EAAER,GAAG,CAACI,IAAK,CAACI;QAAE,CAAE;QAC3BC,MAAM,EAAE;UAAEC,cAAc,EAAE;QAAI;OAC/B,CAAC;MAAC;MAAAzB,cAAA,GAAAC,CAAA;MAEH,IAAI;MAAC;MAAA,CAAAD,cAAA,GAAA0B,CAAA,WAAAP,IAAI;MAAA;MAAA,CAAAnB,cAAA,GAAA0B,CAAA,WAAJP,IAAI;MAAA;MAAA,CAAAnB,cAAA,GAAA0B,CAAA;MAAA;MAAA,CAAA1B,cAAA,GAAA0B,CAAA,WAAJP,IAAI,CAAEM,cAAc,IAAE;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAC,CAAA;QACzB,OAAOe,GAAG,CACPW,MAAM,CAAC,GAAG,CAAC,CACXC,IAAI,CAAC;UAAEC,KAAK,EAAE;QAAyC,CAAE,CAAC;MAC/D,CAAC;MAAA;MAAA;QAAA7B,cAAA,GAAA0B,CAAA;MAAA;MAED,MAAMI,MAAM;MAAA;MAAA,CAAA9B,cAAA,GAAAC,CAAA,QAAG,MAAMK,oBAAoB,CAACyB,8BAA8B,CACtEZ,IAAI,CAACM,cAAc,CACpB;MAED,IAAIoB,MAAM;MAAC;MAAA7C,cAAA,GAAAC,CAAA;MACX,QAAQ0C,QAAQ;QACd,KAAK,WAAW;UAAA;UAAA3C,cAAA,GAAA0B,CAAA;UAAA1B,cAAA,GAAAC,CAAA;UACd4C,MAAM,GAAGf,MAAM,CAACgB,aAAa;UAAA;UAAA,CAAA9C,cAAA,GAAA0B,CAAA,WACzB,MAAMpB,oBAAoB,CAACyC,iBAAiB,CAC1C5B,IAAI,CAACM,cAAc,EACnBK,MAAM,CAACkB,QAAQ,CAChB;UAAA;UAAA,CAAAhD,cAAA,GAAA0B,CAAA,WACD,MAAMpB,oBAAoB,CAAC2C,eAAe,CACxC9B,IAAI,CAACM,cAAc,EACnBK,MAAM,CAACkB,QAAQ,CAChB;UAAC;UAAAhD,cAAA,GAAAC,CAAA;UACN;QACF,KAAK,cAAc;UAAA;UAAAD,cAAA,GAAA0B,CAAA;UAAA1B,cAAA,GAAAC,CAAA;UACjB4C,MAAM,GAAG,MAAMvC,oBAAoB,CAAC4C,kBAAkB,CACpD/B,IAAI,CAACM,cAAc,EACnBK,MAAM,CAACqB,WAAW,CACnB;UAAC;UAAAnD,cAAA,GAAAC,CAAA;UACF;QACF;UAAA;UAAAD,cAAA,GAAA0B,CAAA;UAAA1B,cAAA,GAAAC,CAAA;UACE,OAAOe,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;YAAEC,KAAK,EAAE;UAAmB,CAAE,CAAC;MAC/D;MAAC;MAAA7B,cAAA,GAAAC,CAAA;MAEDe,GAAG,CAACY,IAAI,CAAC;QACPwB,OAAO,EAAE,mBAAmB;QAC5BC,cAAc,EAAER;OACjB,CAAC;IACJ,CAAC,CAAC,OAAOhB,KAAK,EAAE;MAAA;MAAA7B,cAAA,GAAAC,CAAA;MACd;MAAI;MAAA,CAAAD,cAAA,GAAA0B,CAAA,WAAAG,KAAK,YAAYU,KAAK;MAAA;MAAA,CAAAvC,cAAA,GAAA0B,CAAA,WAAIG,KAAK,CAACW,IAAI,KAAK,UAAU,GAAE;QAAA;QAAAxC,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAC,CAAA;QACvD,OAAOe,GAAG,CACPW,MAAM,CAAC,GAAG,CAAC,CACXC,IAAI,CAAC;UAAEC,KAAK,EAAE,sBAAsB;UAAEY,OAAO,EAAEZ;QAAK,CAAE,CAAC;MAC5D,CAAC;MAAA;MAAA;QAAA7B,cAAA,GAAA0B,CAAA;MAAA;MAAA1B,cAAA,GAAAC,CAAA;MACDe,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAgB,CAAE,CAAC;IACnD;EACF,CAAC;AAAA,EAAC;AAEF;AAAA;AAAA7B,cAAA,GAAAC,CAAA;AACAS,MAAM,CAACG,GAAG,CAAC,OAAO,EAAET,MAAA,CAAAU,cAAc,EAAE,CAAOC,GAAG,EAAEC,GAAG,KAAI;EAAA;EAAAhB,cAAA,GAAAiB,CAAA;EAAAjB,cAAA,GAAAC,CAAA;EAAA,OAAAiB,SAAA;IAAA;IAAAlB,cAAA,GAAAiB,CAAA;IAAAjB,cAAA,GAAAC,CAAA;IACrD,IAAI;MACF;MACA,MAAMkB,IAAI;MAAA;MAAA,CAAAnB,cAAA,GAAAC,CAAA,QAAG,MAAMO,QAAA,CAAAY,MAAM,CAACD,IAAI,CAACE,UAAU,CAAC;QACxCC,KAAK,EAAE;UAAEC,EAAE,EAAER,GAAG,CAACI,IAAK,CAACI;QAAE,CAAE;QAC3BC,MAAM,EAAE;UAAEC,cAAc,EAAE;QAAI;OAC/B,CAAC;MAAC;MAAAzB,cAAA,GAAAC,CAAA;MAEH,IAAI;MAAC;MAAA,CAAAD,cAAA,GAAA0B,CAAA,WAAAP,IAAI;MAAA;MAAA,CAAAnB,cAAA,GAAA0B,CAAA,WAAJP,IAAI;MAAA;MAAA,CAAAnB,cAAA,GAAA0B,CAAA;MAAA;MAAA,CAAA1B,cAAA,GAAA0B,CAAA,WAAJP,IAAI,CAAEM,cAAc,IAAE;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAC,CAAA;QACzB,OAAOe,GAAG,CACPW,MAAM,CAAC,GAAG,CAAC,CACXC,IAAI,CAAC;UAAEC,KAAK,EAAE;QAAyC,CAAE,CAAC;MAC/D,CAAC;MAAA;MAAA;QAAA7B,cAAA,GAAA0B,CAAA;MAAA;MAED,MAAM4B,IAAI;MAAA;MAAA,CAAAtD,cAAA,GAAAC,CAAA,QAAG,MAAMK,oBAAoB,CAACiD,sBAAsB,CAC5DpC,IAAI,CAACM,cAAc;MACnB;MAAA,CAAAzB,cAAA,GAAA0B,CAAA,WAAA8B,QAAQ,CAACzC,GAAG,CAAC0C,KAAK,CAACC,KAAe,CAAC;MAAA;MAAA,CAAA1D,cAAA,GAAA0B,CAAA,WAAI,EAAE,EAC1C;MAAC;MAAA1B,cAAA,GAAAC,CAAA;MACFe,GAAG,CAACY,IAAI,CAAC0B,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOzB,KAAK,EAAE;MAAA;MAAA7B,cAAA,GAAAC,CAAA;MACde,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAA6B,CAAE,CAAC;IAChE;EACF,CAAC;AAAA,EAAC;AAEF;AAAA;AAAA7B,cAAA,GAAAC,CAAA;AACAS,MAAM,CAACG,GAAG,CAAC,WAAW,EAAET,MAAA,CAAAU,cAAc,EAAET,OAAA,CAAA4B,eAAe,EAAE,CAAOlB,GAAG,EAAEC,GAAG,KAAI;EAAA;EAAAhB,cAAA,GAAAiB,CAAA;EAAAjB,cAAA,GAAAC,CAAA;EAAA,OAAAiB,SAAA;IAAA;IAAAlB,cAAA,GAAAiB,CAAA;IAAAjB,cAAA,GAAAC,CAAA;IAC1E,IAAI;MACF,MAAMqD,IAAI;MAAA;MAAA,CAAAtD,cAAA,GAAAC,CAAA,QAAG,MAAMK,oBAAoB,CAACiD,sBAAsB,CAC5DI,SAAS;MACT;MAAA,CAAA3D,cAAA,GAAA0B,CAAA,WAAA8B,QAAQ,CAACzC,GAAG,CAAC0C,KAAK,CAACC,KAAe,CAAC;MAAA;MAAA,CAAA1D,cAAA,GAAA0B,CAAA,WAAI,GAAG,EAC3C;MAAC;MAAA1B,cAAA,GAAAC,CAAA;MACFe,GAAG,CAACY,IAAI,CAAC0B,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOzB,KAAK,EAAE;MAAA;MAAA7B,cAAA,GAAAC,CAAA;MACde,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAoC,CAAE,CAAC;IACvE;EACF,CAAC;AAAA,EAAC;AAAC;AAAA7B,cAAA,GAAAC,CAAA;AAEHS,MAAM,CAACgC,IAAI,CACT,iBAAiB,EACjBtC,MAAA,CAAAU,cAAc,EACdT,OAAA,CAAA4B,eAAe,EACf,CAAOlB,GAAG,EAAEC,GAAG,KAAI;EAAA;EAAAhB,cAAA,GAAAiB,CAAA;EAAAjB,cAAA,GAAAC,CAAA;EAAA,OAAAiB,SAAA;IAAA;IAAAlB,cAAA,GAAAiB,CAAA;IAAAjB,cAAA,GAAAC,CAAA;IACjB,IAAI;MACF;MACA,MAAM;QAAE0C,QAAQ;QAAEiB;MAAa,CAAE;MAAA;MAAA,CAAA5D,cAAA,GAAAC,CAAA,SAAGQ,qBAAA,CAAAoD,mBAAmB,CAACzB,KAAK,CAACrB,GAAG,CAACsB,IAAI,CAAC;MAEvE,IAAIQ,MAAM;MAAC;MAAA7C,cAAA,GAAAC,CAAA;MACX,QAAQ0C,QAAQ;QACd,KAAK,gBAAgB;UAAA;UAAA3C,cAAA,GAAA0B,CAAA;UAAA1B,cAAA,GAAAC,CAAA;UACnB4C,MAAM,GAAG,MAAMvC,oBAAoB,CAACwD,oBAAoB;UACtD;UAAA,CAAA9D,cAAA,GAAA0B,CAAA,WAAAkC,aAAa;UAAA;UAAA,CAAA5D,cAAA,GAAA0B,CAAA,WAAI,EAAE,EACpB;UAAC;UAAA1B,cAAA,GAAAC,CAAA;UACF;QACF,KAAK,eAAe;UAAA;UAAAD,cAAA,GAAA0B,CAAA;UAAA1B,cAAA,GAAAC,CAAA;UAClB4C,MAAM,GAAG,MAAMvC,oBAAoB,CAACyD,mBAAmB;UACrD;UAAA,CAAA/D,cAAA,GAAA0B,CAAA,WAAAkC,aAAa;UAAA;UAAA,CAAA5D,cAAA,GAAA0B,CAAA,WAAI,CAAC,EACnB;UAAC;UAAA1B,cAAA,GAAAC,CAAA;UACF;QACF;UAAA;UAAAD,cAAA,GAAA0B,CAAA;UAAA1B,cAAA,GAAAC,CAAA;UACE,OAAOe,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;YAAEC,KAAK,EAAE;UAAmB,CAAE,CAAC;MAC/D;MAAC;MAAA7B,cAAA,GAAAC,CAAA;MAEDe,GAAG,CAACY,IAAI,CAAC;QACPwB,OAAO,EAAE,0BAA0B;QACnCC,cAAc,EAAER;OACjB,CAAC;IACJ,CAAC,CAAC,OAAOhB,KAAK,EAAE;MAAA;MAAA7B,cAAA,GAAAC,CAAA;MACd;MAAI;MAAA,CAAAD,cAAA,GAAA0B,CAAA,WAAAG,KAAK,YAAYU,KAAK;MAAA;MAAA,CAAAvC,cAAA,GAAA0B,CAAA,WAAIG,KAAK,CAACW,IAAI,KAAK,UAAU,GAAE;QAAA;QAAAxC,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAC,CAAA;QACvD,OAAOe,GAAG,CACPW,MAAM,CAAC,GAAG,CAAC,CACXC,IAAI,CAAC;UAAEC,KAAK,EAAE,sBAAsB;UAAEY,OAAO,EAAEZ;QAAK,CAAE,CAAC;MAC5D,CAAC;MAAA;MAAA;QAAA7B,cAAA,GAAA0B,CAAA;MAAA;MAAA1B,cAAA,GAAAC,CAAA;MACDe,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAuB,CAAE,CAAC;IAC1D;EACF,CAAC;AAAA,EACF;AAAC;AAAA7B,cAAA,GAAAC,CAAA;AAEF+D,OAAA,CAAArD,OAAA,GAAeD,MAAM","ignoreList":[]}