{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/setup.ts","mappings":"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","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/setup.ts"],"sourcesContent":["// Set up test environment\nimport 'reflect-metadata';\nimport { TextEncoder, TextDecoder } from 'util';\n\n// Set environment variables for tests\nprocess.env.NODE_ENV = 'test';\nprocess.env.DATABASE_URL = 'postgresql://test:test@localhost:5432/test';\nprocess.env.JWT_SECRET = 'test-secret-key';\nprocess.env.STRIPE_SECRET_KEY = 'sk_test_mock';\nprocess.env.SENDGRID_API_KEY = 'SG.test-key';\nprocess.env.QDRANT_URL = 'http://localhost:6333';\nprocess.env.QDRANT_API_KEY = 'test-qdrant-key';\nprocess.env.AWS_ACCESS_KEY_ID = 'test-aws-key';\nprocess.env.AWS_SECRET_ACCESS_KEY = 'test-aws-secret';\nprocess.env.AWS_REGION = 'us-east-1';\nprocess.env.S3_BUCKET_NAME = 'test-bucket';\nprocess.env.REDIS_URL = 'redis://localhost:6379';\nprocess.env.OPENAI_API_KEY = 'sk-test-mock';\n\n// Mock global objects\nglobal.TextEncoder = TextEncoder;\nglobal.TextDecoder = TextDecoder as any;\n\n// Mock Prisma\njest.mock('../src/lib/prisma');\n\n// Mock Redis\njest.mock('ioredis');\n\n// Mock logger to reduce noise in tests\njest.mock('../src/lib/logger', () => ({\n  logger: {\n    info: jest.fn(),\n    error: jest.fn(),\n    warn: jest.fn(),\n    debug: jest.fn(),\n  },\n}));\n\n// Mock OpenAI\njest.mock('openai', () => ({\n  default: jest.fn().mockImplementation(() => ({\n    chat: {\n      completions: {\n        create: jest.fn().mockResolvedValue({\n          choices: [\n            {\n              message: {\n                content: 'Mock AI response',\n                role: 'assistant',\n              },\n            },\n          ],\n        }),\n      },\n    },\n    embeddings: {\n      create: jest.fn().mockResolvedValue({\n        data: [\n          {\n            embedding: new Array(1536).fill(0.1),\n          },\n        ],\n      }),\n    },\n  })),\n}));\n\n// Mock Stripe\njest.mock('stripe', () => ({\n  default: jest.fn().mockImplementation(() => ({\n    customers: {\n      create: jest.fn().mockResolvedValue({ id: 'cus_test' }),\n      retrieve: jest.fn().mockResolvedValue({ id: 'cus_test' }),\n      update: jest.fn().mockResolvedValue({ id: 'cus_test' }),\n    },\n    prices: {\n      list: jest.fn().mockResolvedValue({\n        data: [\n          {\n            id: 'price_test',\n            product: 'prod_test',\n            unit_amount: 1000,\n            currency: 'usd',\n            recurring: { interval: 'month' },\n          },\n        ],\n      }),\n    },\n    subscriptions: {\n      create: jest.fn().mockResolvedValue({ id: 'sub_test' }),\n      retrieve: jest.fn().mockResolvedValue({ id: 'sub_test' }),\n      update: jest.fn().mockResolvedValue({ id: 'sub_test' }),\n      cancel: jest.fn().mockResolvedValue({ id: 'sub_test' }),\n    },\n    checkout: {\n      sessions: {\n        create: jest.fn().mockResolvedValue({\n          id: 'cs_test',\n          url: 'https://checkout.stripe.com/test',\n        }),\n      },\n    },\n    billingPortal: {\n      sessions: {\n        create: jest\n          .fn()\n          .mockResolvedValue({ url: 'https://billing.stripe.com/test' }),\n      },\n    },\n    webhookEndpoints: {\n      create: jest.fn().mockResolvedValue({ id: 'we_test' }),\n    },\n  })),\n}));\n\n// Mock SendGrid\njest.mock('@sendgrid/mail', () => ({\n  setApiKey: jest.fn(),\n  send: jest.fn().mockResolvedValue([{}]),\n}));\n\n// Mock Qdrant\njest.mock('@qdrant/js-client-rest', () => ({\n  QdrantClient: jest.fn().mockImplementation(() => ({\n    createCollection: jest.fn().mockResolvedValue(true),\n    getCollection: jest.fn().mockResolvedValue({ status: 'green' }),\n    upsert: jest.fn().mockResolvedValue({ operation_id: 1 }),\n    search: jest.fn().mockResolvedValue({\n      result: [\n        {\n          id: 'vec-1',\n          score: 0.95,\n          payload: {\n            content: 'Test content',\n            metadata: {},\n          },\n        },\n      ],\n    }),\n    delete: jest.fn().mockResolvedValue({ operation_id: 1 }),\n  })),\n}));\n\n// Mock AWS SDK\njest.mock('@aws-sdk/client-s3', () => ({\n  S3Client: jest.fn(),\n  PutObjectCommand: jest.fn(),\n  GetObjectCommand: jest.fn(),\n  DeleteObjectCommand: jest.fn(),\n}));\n\n// Mock Socket.IO\njest.mock('socket.io', () => {\n  const mockSocket = {\n    id: 'test-socket-id',\n    emit: jest.fn(),\n    on: jest.fn(),\n    join: jest.fn(),\n    leave: jest.fn(),\n    disconnect: jest.fn(),\n  };\n\n  const mockIo: any = {\n    on: jest.fn((event: string, handler: (socket: any) => void) => {\n      if (event === 'connection') {\n        // Simulate a connection\n        setImmediate(() => handler(mockSocket));\n      }\n    }),\n    emit: jest.fn(),\n    to: jest.fn(() => mockIo),\n    in: jest.fn(() => mockIo),\n    sockets: {\n      sockets: new Map([[mockSocket.id, mockSocket]]),\n    },\n  };\n\n  return {\n    Server: jest.fn(() => mockIo),\n  };\n});\n\n// Clean up after each test\nafterEach(() => {\n  jest.clearAllMocks();\n});\n\n// Global test timeout\njest.setTimeout(30000);\n\n// Test helpers\nexport const mockAuthUser = {\n  id: 'test-user-id',\n  email: 'test@example.com',\n  organizationId: 'test-org-id',\n  roles: ['admin'],\n};\n\n// Mock date for consistent testing\nconst mockDate = new Date('2024-01-01T00:00:00Z');\njest.useFakeTimers();\njest.setSystemTime(mockDate);\n\n// Helper to reset all mocks\n(global as any).resetAllMocks = () => {\n  jest.clearAllMocks();\n  jest.clearAllTimers();\n};\n"],"version":3}