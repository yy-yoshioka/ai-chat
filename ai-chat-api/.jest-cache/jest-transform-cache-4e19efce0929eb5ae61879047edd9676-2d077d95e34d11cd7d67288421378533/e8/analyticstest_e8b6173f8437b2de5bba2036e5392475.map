{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/routes/analytics.test.ts","mappings":"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","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/routes/analytics.test.ts"],"sourcesContent":["import request from 'supertest';\nimport express from 'express';\nimport { prisma } from '../../src/lib/prisma';\nimport analyticsRouter from '../../src/routes/analytics';\nimport { authMiddleware } from '../../src/middleware/auth';\nimport {\n  testUser,\n  testOrganization,\n  testWidget,\n  testChatLog,\n  generateTestToken,\n} from '../fixtures/test-data';\n\n// Mock dependencies\njest.mock('../../src/lib/prisma');\njest.mock('../../src/middleware/auth');\n\ndescribe('Analytics Routes', () => {\n  let app: express.Application;\n\n  beforeEach(() => {\n    app = express();\n    app.use(express.json());\n    app.use('/api/analytics', analyticsRouter);\n\n    // Setup middleware mocks\n    (authMiddleware as jest.Mock).mockImplementation((req, res, next) => {\n      req.user = { ...testUser, organization: testOrganization };\n      next();\n    });\n\n    // Reset all mocks\n    jest.clearAllMocks();\n  });\n\n  describe('GET /api/analytics/overview', () => {\n    it('should return analytics overview', async () => {\n      const mockData = {\n        totalChats: 1250,\n        totalUsers: 150,\n        avgResponseTime: 2.5,\n        satisfactionRate: 0.85,\n        activeWidgets: 5,\n        totalFeedback: 300,\n        positiveFeedback: 255,\n        negativeFeedback: 30,\n        neutralFeedback: 15,\n      };\n\n      // Mock aggregation queries\n      (prisma.chatLog.count as jest.Mock).mockResolvedValue(\n        mockData.totalChats\n      );\n      (prisma.chatLog.groupBy as jest.Mock).mockResolvedValue([\n        { _count: { _all: mockData.totalUsers } },\n      ]);\n      (prisma.chatLog.aggregate as jest.Mock).mockResolvedValue({\n        _avg: { responseTime: mockData.avgResponseTime },\n      });\n      (prisma.widget.count as jest.Mock).mockResolvedValue(\n        mockData.activeWidgets\n      );\n      (prisma.messageFeedback.groupBy as jest.Mock).mockResolvedValue([\n        { feedback: 'positive', _count: { _all: mockData.positiveFeedback } },\n        { feedback: 'negative', _count: { _all: mockData.negativeFeedback } },\n        { feedback: 'neutral', _count: { _all: mockData.neutralFeedback } },\n      ]);\n\n      const response = await request(app)\n        .get('/api/analytics/overview')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .query({\n          startDate: '2024-01-01',\n          endDate: '2024-01-31',\n        });\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        totalChats: mockData.totalChats,\n        totalUsers: mockData.totalUsers,\n        avgResponseTime: mockData.avgResponseTime,\n        satisfactionRate: mockData.satisfactionRate,\n        activeWidgets: mockData.activeWidgets,\n        feedbackBreakdown: {\n          positive: mockData.positiveFeedback,\n          negative: mockData.negativeFeedback,\n          neutral: mockData.neutralFeedback,\n        },\n      });\n    });\n\n    it('should filter by date range', async () => {\n      const startDate = '2024-01-01';\n      const endDate = '2024-01-31';\n\n      (prisma.chatLog.count as jest.Mock).mockResolvedValue(100);\n      (prisma.chatLog.groupBy as jest.Mock).mockResolvedValue([]);\n      (prisma.chatLog.aggregate as jest.Mock).mockResolvedValue({\n        _avg: { responseTime: 2.0 },\n      });\n      (prisma.widget.count as jest.Mock).mockResolvedValue(3);\n      (prisma.messageFeedback.groupBy as jest.Mock).mockResolvedValue([]);\n\n      const response = await request(app)\n        .get('/api/analytics/overview')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .query({ startDate, endDate });\n\n      expect(response.status).toBe(200);\n      expect(prisma.chatLog.count).toHaveBeenCalledWith({\n        where: {\n          organizationId: testOrganization.id,\n          createdAt: {\n            gte: new Date(startDate),\n            lte: new Date(endDate + 'T23:59:59.999Z'),\n          },\n        },\n      });\n    });\n  });\n\n  describe('GET /api/analytics/conversations', () => {\n    it('should return conversation analytics', async () => {\n      const mockConversations = [\n        {\n          date: '2024-01-01',\n          count: 45,\n          avgDuration: 180,\n          avgMessages: 5,\n        },\n        {\n          date: '2024-01-02',\n          count: 52,\n          avgDuration: 200,\n          avgMessages: 6,\n        },\n      ];\n\n      (prisma.$queryRaw as jest.Mock).mockResolvedValue(mockConversations);\n\n      const response = await request(app)\n        .get('/api/analytics/conversations')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .query({\n          startDate: '2024-01-01',\n          endDate: '2024-01-31',\n          groupBy: 'day',\n        });\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        data: mockConversations,\n        summary: {\n          totalConversations: 97,\n          avgDuration: 190,\n          avgMessagesPerConversation: 5.5,\n        },\n      });\n    });\n\n    it('should group by different time periods', async () => {\n      (prisma.$queryRaw as jest.Mock).mockResolvedValue([]);\n\n      const testCases = ['hour', 'day', 'week', 'month'];\n\n      for (const groupBy of testCases) {\n        const response = await request(app)\n          .get('/api/analytics/conversations')\n          .set(\n            'Authorization',\n            `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n          )\n          .query({ groupBy });\n\n        expect(response.status).toBe(200);\n      }\n    });\n\n    it('should filter by widget', async () => {\n      (prisma.$queryRaw as jest.Mock).mockResolvedValue([]);\n\n      const response = await request(app)\n        .get('/api/analytics/conversations')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .query({ widgetId: testWidget.id });\n\n      expect(response.status).toBe(200);\n      // Verify the query included widget filter\n      const queryCall = (prisma.$queryRaw as jest.Mock).mock.calls[0];\n      expect(queryCall[0]).toContain('widgetId');\n    });\n  });\n\n  describe('GET /api/analytics/unanswered', () => {\n    it('should return unanswered questions analytics', async () => {\n      const mockUnanswered = [\n        {\n          id: 'unanswered-1',\n          chatLog: {\n            question: 'How do I integrate with Zapier?',\n            createdAt: new Date('2024-01-15'),\n            widgetId: 'widget-1',\n          },\n          status: 'pending',\n          createdAt: new Date('2024-01-15'),\n        },\n        {\n          id: 'unanswered-2',\n          chatLog: {\n            question: 'What is the API rate limit?',\n            createdAt: new Date('2024-01-16'),\n            widgetId: 'widget-2',\n          },\n          status: 'pending',\n          createdAt: new Date('2024-01-16'),\n        },\n      ];\n\n      (prisma.unansweredMessage.findMany as jest.Mock).mockResolvedValue(\n        mockUnanswered\n      );\n      (prisma.unansweredMessage.count as jest.Mock).mockResolvedValue(2);\n\n      // Mock topic clustering\n      (prisma.$queryRaw as jest.Mock).mockResolvedValue([\n        { topic: 'Integration', count: 15 },\n        { topic: 'API', count: 12 },\n        { topic: 'Pricing', count: 8 },\n      ]);\n\n      const response = await request(app)\n        .get('/api/analytics/unanswered')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .query({\n          status: 'pending',\n          limit: 10,\n        });\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        questions: expect.arrayContaining([\n          expect.objectContaining({\n            id: 'unanswered-1',\n            question: 'How do I integrate with Zapier?',\n            status: 'pending',\n          }),\n        ]),\n        total: 2,\n        topTopics: expect.arrayContaining([\n          { topic: 'Integration', count: 15 },\n          { topic: 'API', count: 12 },\n        ]),\n      });\n    });\n\n    it('should filter by status', async () => {\n      (prisma.unansweredMessage.findMany as jest.Mock).mockResolvedValue([]);\n      (prisma.unansweredMessage.count as jest.Mock).mockResolvedValue(0);\n      (prisma.$queryRaw as jest.Mock).mockResolvedValue([]);\n\n      const statuses = ['pending', 'reviewed', 'resolved'];\n\n      for (const status of statuses) {\n        const response = await request(app)\n          .get('/api/analytics/unanswered')\n          .set(\n            'Authorization',\n            `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n          )\n          .query({ status });\n\n        expect(response.status).toBe(200);\n        expect(prisma.unansweredMessage.findMany).toHaveBeenCalledWith(\n          expect.objectContaining({\n            where: expect.objectContaining({\n              status,\n            }),\n          })\n        );\n      }\n    });\n\n    it('should paginate results', async () => {\n      (prisma.unansweredMessage.findMany as jest.Mock).mockResolvedValue([]);\n      (prisma.unansweredMessage.count as jest.Mock).mockResolvedValue(50);\n      (prisma.$queryRaw as jest.Mock).mockResolvedValue([]);\n\n      const response = await request(app)\n        .get('/api/analytics/unanswered')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .query({\n          page: 2,\n          limit: 20,\n        });\n\n      expect(response.status).toBe(200);\n      expect(prisma.unansweredMessage.findMany).toHaveBeenCalledWith(\n        expect.objectContaining({\n          skip: 20,\n          take: 20,\n        })\n      );\n    });\n  });\n\n  describe('GET /api/analytics/topics', () => {\n    it('should return topic analytics', async () => {\n      const mockTopics = [\n        {\n          topic: 'Billing',\n          count: 125,\n          percentage: 25,\n          trend: 'up',\n          examples: [\n            'How do I update my credit card?',\n            'What plans do you offer?',\n            'Can I cancel my subscription?',\n          ],\n        },\n        {\n          topic: 'Technical Support',\n          count: 98,\n          percentage: 19.6,\n          trend: 'stable',\n          examples: [\n            'API is returning 500 errors',\n            'How to debug webhook issues?',\n            'Widget not loading on mobile',\n          ],\n        },\n      ];\n\n      (prisma.$queryRaw as jest.Mock).mockResolvedValue(mockTopics);\n\n      const response = await request(app)\n        .get('/api/analytics/topics')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .query({\n          startDate: '2024-01-01',\n          endDate: '2024-01-31',\n          limit: 10,\n        });\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        topics: mockTopics,\n        totalQuestions: 500,\n      });\n    });\n\n    it('should filter by widget', async () => {\n      (prisma.$queryRaw as jest.Mock).mockResolvedValue([]);\n\n      const response = await request(app)\n        .get('/api/analytics/topics')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .query({\n          widgetId: testWidget.id,\n          limit: 5,\n        });\n\n      expect(response.status).toBe(200);\n    });\n  });\n\n  describe('GET /api/analytics/feedback', () => {\n    it('should return feedback analytics', async () => {\n      const mockFeedback = {\n        positive: 450,\n        negative: 30,\n        neutral: 20,\n        total: 500,\n        satisfactionRate: 0.9,\n        trends: [\n          { date: '2024-01-01', positive: 15, negative: 1, neutral: 1 },\n          { date: '2024-01-02', positive: 18, negative: 2, neutral: 0 },\n        ],\n      };\n\n      (prisma.messageFeedback.groupBy as jest.Mock).mockResolvedValue([\n        { feedback: 'positive', _count: { _all: mockFeedback.positive } },\n        { feedback: 'negative', _count: { _all: mockFeedback.negative } },\n        { feedback: 'neutral', _count: { _all: mockFeedback.neutral } },\n      ]);\n\n      (prisma.$queryRaw as jest.Mock).mockResolvedValue(mockFeedback.trends);\n\n      const response = await request(app)\n        .get('/api/analytics/feedback')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .query({\n          startDate: '2024-01-01',\n          endDate: '2024-01-31',\n        });\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        summary: {\n          positive: mockFeedback.positive,\n          negative: mockFeedback.negative,\n          neutral: mockFeedback.neutral,\n          total: mockFeedback.total,\n          satisfactionRate: mockFeedback.satisfactionRate,\n        },\n        trends: mockFeedback.trends,\n      });\n    });\n\n    it('should include feedback comments', async () => {\n      const mockComments = [\n        {\n          id: 'feedback-1',\n          feedback: 'positive',\n          comment: 'Very helpful!',\n          chatLog: {\n            question: 'How do I reset my password?',\n            answer: 'You can reset your password by...',\n          },\n          createdAt: new Date('2024-01-15'),\n        },\n        {\n          id: 'feedback-2',\n          feedback: 'negative',\n          comment: 'Did not answer my question',\n          chatLog: {\n            question: 'Complex technical issue',\n            answer: 'I understand you need help...',\n          },\n          createdAt: new Date('2024-01-16'),\n        },\n      ];\n\n      (prisma.messageFeedback.groupBy as jest.Mock).mockResolvedValue([]);\n      (prisma.messageFeedback.findMany as jest.Mock).mockResolvedValue(\n        mockComments\n      );\n      (prisma.$queryRaw as jest.Mock).mockResolvedValue([]);\n\n      const response = await request(app)\n        .get('/api/analytics/feedback')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .query({ includeComments: true });\n\n      expect(response.status).toBe(200);\n      expect(response.body.comments).toHaveLength(2);\n      expect(response.body.comments[0]).toMatchObject({\n        feedback: 'positive',\n        comment: 'Very helpful!',\n      });\n    });\n  });\n\n  describe('GET /api/analytics/performance', () => {\n    it('should return performance metrics', async () => {\n      const mockMetrics = {\n        avgResponseTime: 1.8,\n        p95ResponseTime: 3.2,\n        p99ResponseTime: 5.1,\n        errorRate: 0.02,\n        uptime: 99.95,\n        totalRequests: 15000,\n        successfulRequests: 14700,\n        failedRequests: 300,\n      };\n\n      (prisma.systemMetric.aggregate as jest.Mock).mockResolvedValue({\n        _avg: { value: mockMetrics.avgResponseTime },\n      });\n\n      (prisma.$queryRaw as jest.Mock)\n        .mockResolvedValueOnce([\n          {\n            p95: mockMetrics.p95ResponseTime,\n            p99: mockMetrics.p99ResponseTime,\n          },\n        ])\n        .mockResolvedValueOnce([\n          {\n            total: mockMetrics.totalRequests,\n            successful: mockMetrics.successfulRequests,\n            failed: mockMetrics.failedRequests,\n          },\n        ]);\n\n      const response = await request(app)\n        .get('/api/analytics/performance')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .query({\n          startDate: '2024-01-01',\n          endDate: '2024-01-31',\n        });\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        responseTime: {\n          avg: mockMetrics.avgResponseTime,\n          p95: mockMetrics.p95ResponseTime,\n          p99: mockMetrics.p99ResponseTime,\n        },\n        reliability: {\n          errorRate: mockMetrics.errorRate,\n          uptime: mockMetrics.uptime,\n          totalRequests: mockMetrics.totalRequests,\n          successfulRequests: mockMetrics.successfulRequests,\n          failedRequests: mockMetrics.failedRequests,\n        },\n      });\n    });\n\n    it('should return performance trends', async () => {\n      const mockTrends = [\n        { date: '2024-01-01', avgResponseTime: 1.5, errorRate: 0.01 },\n        { date: '2024-01-02', avgResponseTime: 1.8, errorRate: 0.02 },\n        { date: '2024-01-03', avgResponseTime: 2.1, errorRate: 0.015 },\n      ];\n\n      (prisma.systemMetric.aggregate as jest.Mock).mockResolvedValue({\n        _avg: { value: 1.8 },\n      });\n      (prisma.$queryRaw as jest.Mock)\n        .mockResolvedValueOnce([{ p95: 3.0, p99: 5.0 }])\n        .mockResolvedValueOnce([{ total: 1000, successful: 980, failed: 20 }])\n        .mockResolvedValueOnce(mockTrends);\n\n      const response = await request(app)\n        .get('/api/analytics/performance')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .query({\n          startDate: '2024-01-01',\n          endDate: '2024-01-03',\n          includeTrends: true,\n        });\n\n      expect(response.status).toBe(200);\n      expect(response.body.trends).toEqual(mockTrends);\n    });\n  });\n\n  describe('GET /api/analytics/export', () => {\n    it('should export analytics data as CSV', async () => {\n      const mockData = {\n        overview: {\n          totalChats: 1000,\n          totalUsers: 100,\n          satisfactionRate: 0.85,\n        },\n        conversations: [\n          { date: '2024-01-01', count: 45 },\n          { date: '2024-01-02', count: 52 },\n        ],\n      };\n\n      // Mock all the queries\n      (prisma.chatLog.count as jest.Mock).mockResolvedValue(\n        mockData.overview.totalChats\n      );\n      (prisma.chatLog.groupBy as jest.Mock).mockResolvedValue([\n        { _count: { _all: mockData.overview.totalUsers } },\n      ]);\n      (prisma.$queryRaw as jest.Mock).mockResolvedValue(mockData.conversations);\n\n      const response = await request(app)\n        .get('/api/analytics/export')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .query({\n          format: 'csv',\n          startDate: '2024-01-01',\n          endDate: '2024-01-31',\n        });\n\n      expect(response.status).toBe(200);\n      expect(response.headers['content-type']).toContain('text/csv');\n      expect(response.headers['content-disposition']).toContain('attachment');\n      expect(response.headers['content-disposition']).toContain(\n        'analytics-export'\n      );\n    });\n\n    it('should export analytics data as JSON', async () => {\n      const mockData = {\n        overview: {\n          totalChats: 1000,\n          totalUsers: 100,\n        },\n      };\n\n      (prisma.chatLog.count as jest.Mock).mockResolvedValue(\n        mockData.overview.totalChats\n      );\n      (prisma.chatLog.groupBy as jest.Mock).mockResolvedValue([\n        { _count: { _all: mockData.overview.totalUsers } },\n      ]);\n      (prisma.$queryRaw as jest.Mock).mockResolvedValue([]);\n\n      const response = await request(app)\n        .get('/api/analytics/export')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .query({\n          format: 'json',\n          startDate: '2024-01-01',\n          endDate: '2024-01-31',\n        });\n\n      expect(response.status).toBe(200);\n      expect(response.headers['content-type']).toContain('application/json');\n      expect(response.headers['content-disposition']).toContain('attachment');\n      expect(response.body).toHaveProperty('exportDate');\n      expect(response.body).toHaveProperty('data');\n    });\n\n    it('should return 400 for invalid export format', async () => {\n      const response = await request(app)\n        .get('/api/analytics/export')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .query({ format: 'pdf' });\n\n      expect(response.status).toBe(400);\n      expect(response.body).toEqual({\n        error: 'Invalid export format. Supported formats: csv, json',\n      });\n    });\n  });\n\n  describe('Analytics access control', () => {\n    it('should return 401 when not authenticated', async () => {\n      (authMiddleware as jest.Mock).mockImplementationOnce((req, res) => {\n        res.status(401).json({ error: 'Unauthorized' });\n      });\n\n      const response = await request(app).get('/api/analytics/overview');\n\n      expect(response.status).toBe(401);\n    });\n\n    it('should only return data for user organization', async () => {\n      (prisma.chatLog.count as jest.Mock).mockResolvedValue(100);\n      (prisma.chatLog.groupBy as jest.Mock).mockResolvedValue([]);\n      (prisma.chatLog.aggregate as jest.Mock).mockResolvedValue({\n        _avg: { responseTime: 2.0 },\n      });\n      (prisma.widget.count as jest.Mock).mockResolvedValue(3);\n      (prisma.messageFeedback.groupBy as jest.Mock).mockResolvedValue([]);\n\n      await request(app)\n        .get('/api/analytics/overview')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(prisma.chatLog.count).toHaveBeenCalledWith({\n        where: expect.objectContaining({\n          organizationId: testOrganization.id,\n        }),\n      });\n    });\n  });\n});\n"],"version":3}