{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/routes/organizations.test.ts","mappings":"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","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/routes/organizations.test.ts"],"sourcesContent":["import request from 'supertest';\nimport express from 'express';\nimport { prisma } from '../../src/lib/prisma';\nimport organizationsRouter from '../../src/routes/organizations';\nimport { authMiddleware } from '../../src/middleware/auth';\nimport {\n  testUser,\n  testOrganization,\n  testCompany,\n  testWidget,\n  generateTestToken,\n} from '../fixtures/test-data';\nimport * as organizationService from '../../src/services/organizationService';\n\n// Mock dependencies\njest.mock('../../src/lib/prisma');\njest.mock('../../src/middleware/auth');\njest.mock('../../src/services/organizationService');\n\ndescribe('Organizations Routes', () => {\n  let app: express.Application;\n  let mockOrganizationService: jest.Mocked<typeof organizationService>;\n\n  beforeEach(() => {\n    app = express();\n    app.use(express.json());\n    app.use('/api/organizations', organizationsRouter);\n\n    // Setup middleware mocks\n    (authMiddleware as jest.Mock).mockImplementation((req, res, next) => {\n      req.user = { ...testUser, organization: testOrganization };\n      next();\n    });\n\n    mockOrganizationService = organizationService as jest.Mocked<\n      typeof organizationService\n    >;\n\n    // Reset all mocks\n    jest.clearAllMocks();\n  });\n\n  describe('GET /api/organizations', () => {\n    it('should return user organizations with computed fields', async () => {\n      const mockOrganizations = [\n        {\n          ...testOrganization,\n          _count: { users: 5 },\n          companies: [\n            {\n              ...testCompany,\n              plan: 'PRO',\n              _count: { widgets: 3 },\n            },\n          ],\n        },\n        {\n          id: 'org-2',\n          name: 'Test Organization 2',\n          slug: 'test-org-2',\n          createdAt: new Date('2024-01-01'),\n          updatedAt: new Date('2024-01-15'),\n          _count: { users: 2 },\n          companies: [\n            {\n              id: 'company-2',\n              name: 'Test Company 2',\n              plan: 'STARTER',\n              _count: { widgets: 1 },\n            },\n          ],\n        },\n      ];\n\n      mockOrganizationService.getUserOrganizations.mockResolvedValue(\n        mockOrganizations as any\n      );\n\n      const response = await request(app)\n        .get('/api/organizations')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveLength(2);\n\n      expect(response.body[0]).toMatchObject({\n        id: testOrganization.id,\n        name: testOrganization.name,\n        userCount: 5,\n        widgetCount: 3,\n        plan: 'PRO',\n      });\n\n      expect(response.body[1]).toMatchObject({\n        id: 'org-2',\n        name: 'Test Organization 2',\n        userCount: 2,\n        widgetCount: 1,\n        plan: 'STARTER',\n      });\n\n      expect(mockOrganizationService.getUserOrganizations).toHaveBeenCalledWith(\n        testUser.id\n      );\n    });\n\n    it('should handle organizations without companies', async () => {\n      const mockOrganizations = [\n        {\n          ...testOrganization,\n          _count: { users: 1 },\n          companies: [],\n        },\n      ];\n\n      mockOrganizationService.getUserOrganizations.mockResolvedValue(\n        mockOrganizations as any\n      );\n\n      const response = await request(app)\n        .get('/api/organizations')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body[0]).toMatchObject({\n        userCount: 1,\n        widgetCount: 0,\n        plan: 'free',\n      });\n    });\n\n    it('should handle service errors', async () => {\n      mockOrganizationService.getUserOrganizations.mockRejectedValue(\n        new Error('Database connection failed')\n      );\n\n      const response = await request(app)\n        .get('/api/organizations')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(500);\n      expect(response.body).toEqual({\n        error: 'Failed to fetch organizations',\n      });\n    });\n\n    it('should require authentication', async () => {\n      (authMiddleware as jest.Mock).mockImplementationOnce((req, res) => {\n        res.status(401).json({ error: 'Unauthorized' });\n      });\n\n      const response = await request(app).get('/api/organizations');\n\n      expect(response.status).toBe(401);\n      expect(response.body).toEqual({ error: 'Unauthorized' });\n    });\n  });\n\n  describe('GET /api/organizations/:id', () => {\n    it('should return organization by ID', async () => {\n      const mockOrganization = {\n        ...testOrganization,\n        users: [\n          {\n            id: testUser.id,\n            email: testUser.email,\n            name: testUser.name,\n          },\n        ],\n        companies: [\n          {\n            ...testCompany,\n            widgets: [testWidget],\n          },\n        ],\n      };\n\n      mockOrganizationService.getOrganizationById.mockResolvedValue(\n        mockOrganization as any\n      );\n\n      const response = await request(app)\n        .get(`/api/organizations/${testOrganization.id}`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        id: testOrganization.id,\n        name: testOrganization.name,\n        users: expect.arrayContaining([\n          expect.objectContaining({\n            id: testUser.id,\n            email: testUser.email,\n          }),\n        ]),\n        companies: expect.arrayContaining([\n          expect.objectContaining({\n            id: testCompany.id,\n            name: testCompany.name,\n          }),\n        ]),\n      });\n\n      expect(mockOrganizationService.getOrganizationById).toHaveBeenCalledWith(\n        testOrganization.id,\n        testUser.id\n      );\n    });\n\n    it('should return 404 for non-existent organization', async () => {\n      mockOrganizationService.getOrganizationById.mockRejectedValue(\n        new Error('Organization not found')\n      );\n\n      const response = await request(app)\n        .get('/api/organizations/non-existent-id')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(404);\n      expect(response.body).toEqual({\n        error: 'Organization not found',\n      });\n    });\n\n    it('should return 404 for access denied', async () => {\n      mockOrganizationService.getOrganizationById.mockRejectedValue(\n        new Error('Access denied to organization')\n      );\n\n      const response = await request(app)\n        .get(`/api/organizations/${testOrganization.id}`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(404);\n      expect(response.body).toEqual({\n        error: 'Access denied to organization',\n      });\n    });\n\n    it('should return 500 for other service errors', async () => {\n      mockOrganizationService.getOrganizationById.mockRejectedValue(\n        new Error('Database connection failed')\n      );\n\n      const response = await request(app)\n        .get(`/api/organizations/${testOrganization.id}`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(500);\n      expect(response.body).toEqual({\n        error: 'Database connection failed',\n      });\n    });\n  });\n\n  describe('PUT /api/organizations/:id', () => {\n    it('should update organization successfully', async () => {\n      const updateData = {\n        name: 'Updated Organization Name',\n        settings: {\n          allowPublicWidgets: false,\n          maxUsersPerOrganization: 100,\n        },\n      };\n\n      const mockUpdatedOrganization = {\n        ...testOrganization,\n        ...updateData,\n        updatedAt: new Date('2024-02-01'),\n      };\n\n      mockOrganizationService.updateOrganization.mockResolvedValue(\n        mockUpdatedOrganization as any\n      );\n\n      const response = await request(app)\n        .put(`/api/organizations/${testOrganization.id}`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .send(updateData);\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        id: testOrganization.id,\n        name: updateData.name,\n        settings: updateData.settings,\n      });\n\n      expect(mockOrganizationService.updateOrganization).toHaveBeenCalledWith(\n        testOrganization.id,\n        testUser.id,\n        updateData\n      );\n    });\n\n    it('should validate required fields', async () => {\n      const invalidData = {\n        name: '', // Empty name should be invalid\n      };\n\n      mockOrganizationService.updateOrganization.mockRejectedValue(\n        new Error('Name is required')\n      );\n\n      const response = await request(app)\n        .put(`/api/organizations/${testOrganization.id}`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .send(invalidData);\n\n      expect(response.status).toBe(500);\n      expect(response.body).toEqual({\n        error: 'Name is required',\n      });\n    });\n\n    it('should return 403 for insufficient permissions', async () => {\n      mockOrganizationService.updateOrganization.mockRejectedValue(\n        new Error('Insufficient permissions to update organization')\n      );\n\n      const response = await request(app)\n        .put(`/api/organizations/${testOrganization.id}`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .send({ name: 'New Name' });\n\n      expect(response.status).toBe(403);\n      expect(response.body).toEqual({\n        error: 'Insufficient permissions to update organization',\n      });\n    });\n\n    it('should return 403 for organization not found', async () => {\n      mockOrganizationService.updateOrganization.mockRejectedValue(\n        new Error('Organization not found')\n      );\n\n      const response = await request(app)\n        .put('/api/organizations/non-existent-id')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .send({ name: 'New Name' });\n\n      expect(response.status).toBe(403);\n      expect(response.body).toEqual({\n        error: 'Organization not found',\n      });\n    });\n\n    it('should handle malformed JSON', async () => {\n      const response = await request(app)\n        .put(`/api/organizations/${testOrganization.id}`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .set('Content-Type', 'application/json')\n        .send('{ invalid json }');\n\n      expect(response.status).toBe(400);\n    });\n\n    it('should sanitize input data', async () => {\n      const maliciousData = {\n        name: 'Test Org <script>alert(\"xss\")</script>',\n        description: 'Description with <img src=\"x\" onerror=\"alert(1)\">',\n      };\n\n      const sanitizedData = {\n        name: 'Test Org',\n        description: 'Description with',\n      };\n\n      mockOrganizationService.updateOrganization.mockResolvedValue({\n        ...testOrganization,\n        ...sanitizedData,\n      } as any);\n\n      const response = await request(app)\n        .put(`/api/organizations/${testOrganization.id}`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .send(maliciousData);\n\n      expect(response.status).toBe(200);\n      // The service should handle sanitization\n      expect(mockOrganizationService.updateOrganization).toHaveBeenCalledWith(\n        testOrganization.id,\n        testUser.id,\n        maliciousData\n      );\n    });\n  });\n\n  describe('GET /api/organizations/:id/stats', () => {\n    it('should return organization statistics', async () => {\n      const mockStats = {\n        totalUsers: 15,\n        totalWidgets: 8,\n        totalChats: 1250,\n        totalQuestions: 980,\n        avgResponseTime: 2.3,\n        satisfactionRate: 0.87,\n        monthlyUsage: {\n          chats: 450,\n          apiCalls: 2100,\n          storage: 1.2, // GB\n        },\n        topPerformingWidgets: [\n          {\n            id: testWidget.id,\n            name: testWidget.name,\n            chatCount: 350,\n            satisfactionRate: 0.92,\n          },\n        ],\n        recentActivity: {\n          newUsers: 3,\n          newWidgets: 1,\n          chatsToday: 45,\n        },\n      };\n\n      mockOrganizationService.getOrganizationStats.mockResolvedValue(\n        mockStats as any\n      );\n\n      const response = await request(app)\n        .get(`/api/organizations/${testOrganization.id}/stats`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        totalUsers: 15,\n        totalWidgets: 8,\n        totalChats: 1250,\n        avgResponseTime: 2.3,\n        satisfactionRate: 0.87,\n        monthlyUsage: {\n          chats: 450,\n          apiCalls: 2100,\n          storage: 1.2,\n        },\n        topPerformingWidgets: expect.arrayContaining([\n          expect.objectContaining({\n            id: testWidget.id,\n            name: testWidget.name,\n            chatCount: 350,\n          }),\n        ]),\n        recentActivity: {\n          newUsers: 3,\n          newWidgets: 1,\n          chatsToday: 45,\n        },\n      });\n\n      expect(mockOrganizationService.getOrganizationStats).toHaveBeenCalledWith(\n        testOrganization.id\n      );\n    });\n\n    it('should handle stats calculation errors', async () => {\n      mockOrganizationService.getOrganizationStats.mockRejectedValue(\n        new Error('Failed to calculate stats')\n      );\n\n      const response = await request(app)\n        .get(`/api/organizations/${testOrganization.id}/stats`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(500);\n      expect(response.body).toEqual({\n        error: 'Failed to fetch organization stats',\n      });\n    });\n\n    it('should return empty stats for organization with no data', async () => {\n      const emptyStats = {\n        totalUsers: 0,\n        totalWidgets: 0,\n        totalChats: 0,\n        totalQuestions: 0,\n        avgResponseTime: 0,\n        satisfactionRate: 0,\n        monthlyUsage: {\n          chats: 0,\n          apiCalls: 0,\n          storage: 0,\n        },\n        topPerformingWidgets: [],\n        recentActivity: {\n          newUsers: 0,\n          newWidgets: 0,\n          chatsToday: 0,\n        },\n      };\n\n      mockOrganizationService.getOrganizationStats.mockResolvedValue(\n        emptyStats as any\n      );\n\n      const response = await request(app)\n        .get(`/api/organizations/${testOrganization.id}/stats`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject(emptyStats);\n    });\n  });\n\n  describe('Organizations access control', () => {\n    it('should return 401 when not authenticated', async () => {\n      (authMiddleware as jest.Mock).mockImplementationOnce((req, res) => {\n        res.status(401).json({ error: 'Unauthorized' });\n      });\n\n      const response = await request(app).get('/api/organizations');\n\n      expect(response.status).toBe(401);\n      expect(response.body).toEqual({ error: 'Unauthorized' });\n    });\n\n    it('should only return organizations accessible to the user', async () => {\n      const userOrganizations = [testOrganization];\n      mockOrganizationService.getUserOrganizations.mockResolvedValue(\n        userOrganizations as any\n      );\n\n      const response = await request(app)\n        .get('/api/organizations')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveLength(1);\n      expect(mockOrganizationService.getUserOrganizations).toHaveBeenCalledWith(\n        testUser.id\n      );\n    });\n  });\n\n  describe('Edge cases and error handling', () => {\n    it('should handle malformed organization ID in params', async () => {\n      mockOrganizationService.getOrganizationById.mockRejectedValue(\n        new Error('Invalid organization ID format')\n      );\n\n      const response = await request(app)\n        .get('/api/organizations/invalid-uuid-format')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(500);\n      expect(response.body).toEqual({\n        error: 'Invalid organization ID format',\n      });\n    });\n\n    it('should handle concurrent update conflicts', async () => {\n      mockOrganizationService.updateOrganization.mockRejectedValue(\n        new Error('Organization was modified by another user')\n      );\n\n      const response = await request(app)\n        .put(`/api/organizations/${testOrganization.id}`)\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .send({ name: 'New Name' });\n\n      expect(response.status).toBe(500);\n      expect(response.body).toEqual({\n        error: 'Organization was modified by another user',\n      });\n    });\n\n    it('should handle service timeouts gracefully', async () => {\n      // Simulate timeout by never resolving\n      mockOrganizationService.getUserOrganizations.mockImplementation(\n        () => new Promise(() => {}) // Never resolves\n      );\n\n      const response = await request(app)\n        .get('/api/organizations')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .timeout(1000);\n\n      // This would timeout in a real scenario\n      // The test framework will handle the timeout\n    });\n  });\n});\n"],"version":3}