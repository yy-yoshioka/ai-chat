{"version":3,"names":["cov_2g2pwv5m3r","actualCoverage","express_1","s","require","prisma_1","auth_1","admin_1","router","Router","get","req","res","f","__awaiter","page","b","parseInt","query","limit","skip","faqs","prisma","fAQ","findMany","take","orderBy","createdAt","json","keyword","where","OR","question","contains","answer","faq","findUnique","id","params","status","message","post","authMiddleware","adminMiddleware","organizationId","body","create","data","put","update","delete","end","exports","default"],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/routes/faqs.ts"],"sourcesContent":["import { Router } from 'express';\nimport { prisma } from '../lib/prisma';\nimport { authMiddleware } from '../middleware/auth';\nimport { adminMiddleware } from '../middleware/admin';\n\nconst router = Router();\n\n// GET /faqs - list FAQs with optional pagination\nrouter.get('/', async (req, res) => {\n  const page = parseInt(req.query.page as string) || 1;\n  const limit = parseInt(req.query.limit as string) || 10;\n  const skip = (page - 1) * limit;\n  const faqs = await prisma.fAQ.findMany({\n    skip,\n    take: limit,\n    orderBy: { createdAt: 'desc' },\n  });\n  res.json(faqs);\n});\n\n// GET /faqs/search?keyword=xxx - search FAQs\nrouter.get('/search', async (req, res) => {\n  const keyword = req.query.keyword as string;\n  if (!keyword) return res.json([]);\n  const faqs = await prisma.fAQ.findMany({\n    where: {\n      OR: [\n        { question: { contains: keyword } },\n        { answer: { contains: keyword } },\n      ],\n    },\n  });\n  res.json(faqs);\n});\n\n// GET /faqs/:id - get specific FAQ\nrouter.get('/:id', async (req, res) => {\n  const faq = await prisma.fAQ.findUnique({ where: { id: req.params.id } });\n  if (!faq) return res.status(404).json({ message: 'FAQ not found' });\n  res.json(faq);\n});\n\n// POST /faqs - create FAQ (admin)\nrouter.post('/', authMiddleware, adminMiddleware, async (req, res) => {\n  const { question, answer, organizationId } = req.body;\n  if (!question || !answer || !organizationId) {\n    return res\n      .status(400)\n      .json({ message: 'Question, answer, and organizationId are required' });\n  }\n  const faq = await prisma.fAQ.create({\n    data: {\n      question,\n      answer,\n      organizationId,\n    },\n  });\n  res.status(201).json(faq);\n});\n\n// PUT /faqs/:id - update FAQ (admin)\nrouter.put('/:id', authMiddleware, adminMiddleware, async (req, res) => {\n  const { question, answer } = req.body;\n  const faq = await prisma.fAQ.update({\n    where: { id: req.params.id },\n    data: { question, answer },\n  });\n  res.json(faq);\n});\n\n// DELETE /faqs/:id - delete FAQ (admin)\nrouter.delete('/:id', authMiddleware, adminMiddleware, async (req, res) => {\n  await prisma.fAQ.delete({ where: { id: req.params.id } });\n  res.status(204).end();\n});\n\nexport default router;\n"],"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","ignoreList":[]}