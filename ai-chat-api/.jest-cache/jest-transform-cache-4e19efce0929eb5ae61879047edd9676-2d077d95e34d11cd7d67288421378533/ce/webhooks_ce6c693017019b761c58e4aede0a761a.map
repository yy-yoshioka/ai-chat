{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/routes/webhooks.ts","mappings":"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","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/routes/webhooks.ts"],"sourcesContent":["import express from 'express';\nimport { authMiddleware as requireAuth } from '../middleware/auth';\nimport { orgAccessMiddleware as requireOrgAccess } from '../middleware/organizationAccess';\nimport { webhookService } from '../services/webhookService';\nimport { logger } from '../lib/logger';\n\nconst router = express.Router();\n\n// Get all webhooks for organization\nrouter.get('/', requireAuth, requireOrgAccess, async (req, res) => {\n  try {\n    const webhooks = await webhookService.getWebhooks(req.organizationId!);\n    res.json(webhooks);\n  } catch (error) {\n    logger.error('Failed to fetch webhooks', error);\n    res.status(500).json({ error: 'Failed to fetch webhooks' });\n  }\n});\n\n// Get single webhook\nrouter.get('/:id', requireAuth, requireOrgAccess, async (req, res) => {\n  try {\n    const webhook = await webhookService.getWebhook(\n      req.params.id,\n      req.organizationId!\n    );\n    res.json(webhook);\n  } catch (error: any) {\n    if (error.message === 'Webhook not found') {\n      res.status(404).json({ error: 'Webhook not found' });\n    } else {\n      logger.error('Failed to fetch webhook', error);\n      res.status(500).json({ error: 'Failed to fetch webhook' });\n    }\n  }\n});\n\n// Create webhook\nrouter.post('/', requireAuth, requireOrgAccess, async (req, res) => {\n  try {\n    const { name, url, events, headers, retryCount, timeoutMs } = req.body;\n\n    if (!name || !url || !events || !Array.isArray(events)) {\n      return res.status(400).json({\n        error: 'Name, URL, and events array are required',\n      });\n    }\n\n    // Validate URL\n    try {\n      new URL(url);\n    } catch {\n      return res.status(400).json({ error: 'Invalid URL format' });\n    }\n\n    // Validate events\n    const validEvents = [\n      'chat.created',\n      'user.created',\n      'user.updated',\n      'widget.created',\n      'widget.updated',\n      'widget.deleted',\n      'knowledge_base.created',\n      'knowledge_base.updated',\n      'knowledge_base.deleted',\n    ];\n\n    const invalidEvents = events.filter(\n      (e: string) => !validEvents.includes(e)\n    );\n    if (invalidEvents.length > 0) {\n      return res.status(400).json({\n        error: `Invalid events: ${invalidEvents.join(', ')}`,\n        validEvents,\n      });\n    }\n\n    const webhook = await webhookService.createWebhook(req.organizationId!, {\n      name,\n      url,\n      events,\n      headers,\n      retryCount,\n      timeoutMs,\n    });\n\n    res.status(201).json(webhook);\n  } catch (error) {\n    logger.error('Failed to create webhook', error);\n    res.status(500).json({ error: 'Failed to create webhook' });\n  }\n});\n\n// Update webhook\nrouter.put('/:id', requireAuth, requireOrgAccess, async (req, res) => {\n  try {\n    const webhook = await webhookService.updateWebhook(\n      req.params.id,\n      req.organizationId!,\n      req.body\n    );\n    res.json(webhook);\n  } catch (error: any) {\n    if (error.message === 'Webhook not found or access denied') {\n      res.status(404).json({ error: 'Webhook not found' });\n    } else {\n      logger.error('Failed to update webhook', error);\n      res.status(500).json({ error: 'Failed to update webhook' });\n    }\n  }\n});\n\n// Delete webhook\nrouter.delete('/:id', requireAuth, requireOrgAccess, async (req, res) => {\n  try {\n    await webhookService.deleteWebhook(req.params.id, req.organizationId!);\n    res.status(204).send();\n  } catch (error: any) {\n    if (error.message === 'Webhook not found or access denied') {\n      res.status(404).json({ error: 'Webhook not found' });\n    } else {\n      logger.error('Failed to delete webhook', error);\n      res.status(500).json({ error: 'Failed to delete webhook' });\n    }\n  }\n});\n\n// Get webhook logs\nrouter.get('/:id/logs', requireAuth, requireOrgAccess, async (req, res) => {\n  try {\n    const { status, event, startDate, endDate, limit } = req.query;\n\n    const logs = await webhookService.getWebhookLogs(\n      req.params.id,\n      req.organizationId!,\n      {\n        status: status as string,\n        event: event as string,\n        startDate: startDate ? new Date(startDate as string) : undefined,\n        endDate: endDate ? new Date(endDate as string) : undefined,\n        limit: limit ? parseInt(limit as string) : undefined,\n      }\n    );\n\n    res.json(logs);\n  } catch (error: any) {\n    if (error.message === 'Webhook not found or access denied') {\n      res.status(404).json({ error: 'Webhook not found' });\n    } else {\n      logger.error('Failed to fetch webhook logs', error);\n      res.status(500).json({ error: 'Failed to fetch webhook logs' });\n    }\n  }\n});\n\n// Test webhook\nrouter.post('/:id/test', requireAuth, requireOrgAccess, async (req, res) => {\n  try {\n    const log = await webhookService.testWebhook(\n      req.params.id,\n      req.organizationId!\n    );\n    res.json(log);\n  } catch (error: any) {\n    if (error.message === 'Webhook not found') {\n      res.status(404).json({ error: 'Webhook not found' });\n    } else {\n      logger.error('Failed to test webhook', error);\n      res.status(500).json({ error: 'Failed to test webhook' });\n    }\n  }\n});\n\nexport default router;\n"],"version":3}