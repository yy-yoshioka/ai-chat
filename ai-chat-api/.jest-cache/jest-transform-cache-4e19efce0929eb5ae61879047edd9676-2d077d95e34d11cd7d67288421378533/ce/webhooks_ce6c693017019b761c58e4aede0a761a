9d516296986ae42d8fedd7d56ac2fede
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const auth_1 = require("../middleware/auth");
const organizationAccess_1 = require("../middleware/organizationAccess");
const webhookService_1 = require("../services/webhookService");
const logger_1 = require("../lib/logger");
const router = express_1.default.Router();
// Get all webhooks for organization
router.get('/', auth_1.authMiddleware, organizationAccess_1.orgAccessMiddleware, (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const webhooks = yield webhookService_1.webhookService.getWebhooks(req.organizationId);
        res.json(webhooks);
    }
    catch (error) {
        logger_1.logger.error('Failed to fetch webhooks', error);
        res.status(500).json({ error: 'Failed to fetch webhooks' });
    }
}));
// Get single webhook
router.get('/:id', auth_1.authMiddleware, organizationAccess_1.orgAccessMiddleware, (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const webhook = yield webhookService_1.webhookService.getWebhook(req.params.id, req.organizationId);
        res.json(webhook);
    }
    catch (error) {
        if (error.message === 'Webhook not found') {
            res.status(404).json({ error: 'Webhook not found' });
        }
        else {
            logger_1.logger.error('Failed to fetch webhook', error);
            res.status(500).json({ error: 'Failed to fetch webhook' });
        }
    }
}));
// Create webhook
router.post('/', auth_1.authMiddleware, organizationAccess_1.orgAccessMiddleware, (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { name, url, events, headers, retryCount, timeoutMs } = req.body;
        if (!name || !url || !events || !Array.isArray(events)) {
            return res.status(400).json({
                error: 'Name, URL, and events array are required',
            });
        }
        // Validate URL
        try {
            new URL(url);
        }
        catch (_a) {
            return res.status(400).json({ error: 'Invalid URL format' });
        }
        // Validate events
        const validEvents = [
            'chat.created',
            'user.created',
            'user.updated',
            'widget.created',
            'widget.updated',
            'widget.deleted',
            'knowledge_base.created',
            'knowledge_base.updated',
            'knowledge_base.deleted',
        ];
        const invalidEvents = events.filter((e) => !validEvents.includes(e));
        if (invalidEvents.length > 0) {
            return res.status(400).json({
                error: `Invalid events: ${invalidEvents.join(', ')}`,
                validEvents,
            });
        }
        const webhook = yield webhookService_1.webhookService.createWebhook(req.organizationId, {
            name,
            url,
            events,
            headers,
            retryCount,
            timeoutMs,
        });
        res.status(201).json(webhook);
    }
    catch (error) {
        logger_1.logger.error('Failed to create webhook', error);
        res.status(500).json({ error: 'Failed to create webhook' });
    }
}));
// Update webhook
router.put('/:id', auth_1.authMiddleware, organizationAccess_1.orgAccessMiddleware, (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const webhook = yield webhookService_1.webhookService.updateWebhook(req.params.id, req.organizationId, req.body);
        res.json(webhook);
    }
    catch (error) {
        if (error.message === 'Webhook not found or access denied') {
            res.status(404).json({ error: 'Webhook not found' });
        }
        else {
            logger_1.logger.error('Failed to update webhook', error);
            res.status(500).json({ error: 'Failed to update webhook' });
        }
    }
}));
// Delete webhook
router.delete('/:id', auth_1.authMiddleware, organizationAccess_1.orgAccessMiddleware, (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        yield webhookService_1.webhookService.deleteWebhook(req.params.id, req.organizationId);
        res.status(204).send();
    }
    catch (error) {
        if (error.message === 'Webhook not found or access denied') {
            res.status(404).json({ error: 'Webhook not found' });
        }
        else {
            logger_1.logger.error('Failed to delete webhook', error);
            res.status(500).json({ error: 'Failed to delete webhook' });
        }
    }
}));
// Get webhook logs
router.get('/:id/logs', auth_1.authMiddleware, organizationAccess_1.orgAccessMiddleware, (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { status, event, startDate, endDate, limit } = req.query;
        const logs = yield webhookService_1.webhookService.getWebhookLogs(req.params.id, req.organizationId, {
            status: status,
            event: event,
            startDate: startDate ? new Date(startDate) : undefined,
            endDate: endDate ? new Date(endDate) : undefined,
            limit: limit ? parseInt(limit) : undefined,
        });
        res.json(logs);
    }
    catch (error) {
        if (error.message === 'Webhook not found or access denied') {
            res.status(404).json({ error: 'Webhook not found' });
        }
        else {
            logger_1.logger.error('Failed to fetch webhook logs', error);
            res.status(500).json({ error: 'Failed to fetch webhook logs' });
        }
    }
}));
// Test webhook
router.post('/:id/test', auth_1.authMiddleware, organizationAccess_1.orgAccessMiddleware, (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const log = yield webhookService_1.webhookService.testWebhook(req.params.id, req.organizationId);
        res.json(log);
    }
    catch (error) {
        if (error.message === 'Webhook not found') {
            res.status(404).json({ error: 'Webhook not found' });
        }
        else {
            logger_1.logger.error('Failed to test webhook', error);
            res.status(500).json({ error: 'Failed to test webhook' });
        }
    }
}));
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,