{"file":"/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/routes/billing.test.ts","mappings":"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","names":[],"sources":["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/tests/routes/billing.test.ts"],"sourcesContent":["import request from 'supertest';\nimport express from 'express';\nimport { prisma } from '../../src/lib/prisma';\nimport billingRouter from '../../src/routes/billing';\nimport { authMiddleware } from '../../src/middleware/auth';\nimport {\n  testUser,\n  testOrganization,\n  generateTestToken,\n} from '../fixtures/test-data';\nimport Stripe from 'stripe';\n\n// Mock dependencies\njest.mock('../../src/lib/prisma');\njest.mock('../../src/middleware/auth');\njest.mock('stripe');\n\ndescribe('Billing Routes', () => {\n  let app: express.Application;\n  let mockStripe: any;\n\n  beforeEach(() => {\n    app = express();\n    app.use(express.json());\n    app.use('/api/billing', billingRouter);\n\n    // Setup middleware mocks\n    (authMiddleware as jest.Mock).mockImplementation((req, res, next) => {\n      req.user = { ...testUser, organization: testOrganization };\n      next();\n    });\n\n    // Setup Stripe mock\n    mockStripe = {\n      customers: {\n        create: jest.fn().mockResolvedValue({ id: 'cus_test_new' }),\n        retrieve: jest.fn().mockResolvedValue({\n          id: 'cus_test_123',\n          email: testUser.email,\n          metadata: { organizationId: testOrganization.id },\n        }),\n        update: jest.fn().mockResolvedValue({ id: 'cus_test_123' }),\n      },\n      prices: {\n        list: jest.fn().mockResolvedValue({\n          data: [\n            {\n              id: 'price_starter',\n              product: 'prod_starter',\n              unit_amount: 2900,\n              currency: 'usd',\n              recurring: { interval: 'month' },\n              metadata: { plan: 'STARTER' },\n            },\n            {\n              id: 'price_pro',\n              product: 'prod_pro',\n              unit_amount: 9900,\n              currency: 'usd',\n              recurring: { interval: 'month' },\n              metadata: { plan: 'PRO' },\n            },\n            {\n              id: 'price_enterprise',\n              product: 'prod_enterprise',\n              unit_amount: 29900,\n              currency: 'usd',\n              recurring: { interval: 'month' },\n              metadata: { plan: 'ENTERPRISE' },\n            },\n          ],\n        }),\n      },\n      subscriptions: {\n        create: jest.fn().mockResolvedValue({\n          id: 'sub_test_new',\n          status: 'active',\n          current_period_end: Math.floor(Date.now() / 1000) + 30 * 24 * 60 * 60,\n        }),\n        retrieve: jest.fn().mockResolvedValue({\n          id: 'sub_test_123',\n          status: 'active',\n          items: {\n            data: [\n              {\n                price: {\n                  id: 'price_pro',\n                  unit_amount: 9900,\n                  metadata: { plan: 'PRO' },\n                },\n              },\n            ],\n          },\n          current_period_end: Math.floor(Date.now() / 1000) + 15 * 24 * 60 * 60,\n          cancel_at_period_end: false,\n        }),\n        update: jest.fn().mockResolvedValue({ id: 'sub_test_123' }),\n        cancel: jest.fn().mockResolvedValue({\n          id: 'sub_test_123',\n          cancel_at_period_end: true,\n        }),\n      },\n      checkout: {\n        sessions: {\n          create: jest.fn().mockResolvedValue({\n            id: 'cs_test_123',\n            url: 'https://checkout.stripe.com/pay/cs_test_123',\n          }),\n        },\n      },\n      billingPortal: {\n        sessions: {\n          create: jest.fn().mockResolvedValue({\n            url: 'https://billing.stripe.com/session/test_123',\n          }),\n        },\n      },\n      invoices: {\n        list: jest.fn().mockResolvedValue({\n          data: [\n            {\n              id: 'inv_test_1',\n              amount_paid: 9900,\n              status: 'paid',\n              created: Math.floor(Date.now() / 1000) - 30 * 24 * 60 * 60,\n              invoice_pdf: 'https://stripe.com/invoice.pdf',\n            },\n          ],\n        }),\n        upcoming: jest.fn().mockResolvedValue({\n          amount_due: 9900,\n          created: Math.floor(Date.now() / 1000),\n        }),\n      },\n      paymentMethods: {\n        list: jest.fn().mockResolvedValue({\n          data: [\n            {\n              id: 'pm_test_123',\n              type: 'card',\n              card: {\n                brand: 'visa',\n                last4: '4242',\n                exp_month: 12,\n                exp_year: 2025,\n              },\n            },\n          ],\n        }),\n      },\n      products: {\n        retrieve: jest.fn().mockImplementation((id) => {\n          const products: any = {\n            prod_starter: {\n              name: 'Starter Plan',\n              metadata: { features: 'basic' },\n            },\n            prod_pro: { name: 'Pro Plan', metadata: { features: 'advanced' } },\n            prod_enterprise: {\n              name: 'Enterprise Plan',\n              metadata: { features: 'unlimited' },\n            },\n          };\n          return Promise.resolve(products[id] || { name: 'Unknown' });\n        }),\n      },\n      webhooks: {\n        constructEvent: jest.fn(),\n      },\n    };\n\n    (Stripe as any).mockImplementation(() => mockStripe);\n\n    // Reset all mocks\n    jest.clearAllMocks();\n  });\n\n  describe('GET /api/billing/plans', () => {\n    it('should return available billing plans', async () => {\n      const response = await request(app)\n        .get('/api/billing/plans')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        plans: expect.arrayContaining([\n          expect.objectContaining({\n            id: 'price_starter',\n            name: 'Starter Plan',\n            price: 29,\n            currency: 'usd',\n            interval: 'month',\n            features: 'basic',\n          }),\n          expect.objectContaining({\n            id: 'price_pro',\n            name: 'Pro Plan',\n            price: 99,\n            currency: 'usd',\n            interval: 'month',\n            features: 'advanced',\n          }),\n        ]),\n      });\n\n      expect(mockStripe.prices.list).toHaveBeenCalled();\n    });\n\n    it('should handle Stripe API errors', async () => {\n      mockStripe.prices.list.mockRejectedValueOnce(\n        new Error('Stripe API error')\n      );\n\n      const response = await request(app)\n        .get('/api/billing/plans')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(500);\n      expect(response.body).toEqual({\n        error: 'Failed to fetch billing plans',\n      });\n    });\n  });\n\n  describe('GET /api/billing/subscription', () => {\n    it('should return current subscription details', async () => {\n      const mockOrg = {\n        ...testOrganization,\n        stripeCustomerId: 'cus_test_123',\n        stripeSubscriptionId: 'sub_test_123',\n      };\n\n      (prisma.organization.findUnique as jest.Mock).mockResolvedValue(mockOrg);\n\n      const response = await request(app)\n        .get('/api/billing/subscription')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        subscription: {\n          id: 'sub_test_123',\n          status: 'active',\n          plan: 'PRO',\n          price: 99,\n          currentPeriodEnd: expect.any(String),\n          cancelAtPeriodEnd: false,\n        },\n      });\n    });\n\n    it('should return null for organizations without subscription', async () => {\n      const mockOrg = {\n        ...testOrganization,\n        stripeCustomerId: null,\n        stripeSubscriptionId: null,\n      };\n\n      (prisma.organization.findUnique as jest.Mock).mockResolvedValue(mockOrg);\n\n      const response = await request(app)\n        .get('/api/billing/subscription')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toEqual({\n        subscription: null,\n      });\n    });\n\n    it('should handle canceled subscriptions', async () => {\n      const mockOrg = {\n        ...testOrganization,\n        stripeCustomerId: 'cus_test_123',\n        stripeSubscriptionId: 'sub_test_123',\n      };\n\n      (prisma.organization.findUnique as jest.Mock).mockResolvedValue(mockOrg);\n      mockStripe.subscriptions.retrieve.mockResolvedValueOnce({\n        id: 'sub_test_123',\n        status: 'canceled',\n        items: { data: [] },\n        current_period_end: Math.floor(Date.now() / 1000) - 24 * 60 * 60,\n      });\n\n      const response = await request(app)\n        .get('/api/billing/subscription')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body.subscription.status).toBe('canceled');\n    });\n  });\n\n  describe('POST /api/billing/checkout', () => {\n    it('should create checkout session for new subscription', async () => {\n      const mockOrg = {\n        ...testOrganization,\n        stripeCustomerId: null,\n      };\n\n      (prisma.organization.findUnique as jest.Mock).mockResolvedValue(mockOrg);\n      (prisma.organization.update as jest.Mock).mockResolvedValue({\n        ...mockOrg,\n        stripeCustomerId: 'cus_test_new',\n      });\n\n      const response = await request(app)\n        .post('/api/billing/checkout')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .send({\n          priceId: 'price_pro',\n          successUrl: 'https://app.example.com/billing/success',\n          cancelUrl: 'https://app.example.com/billing',\n        });\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        checkoutUrl: 'https://checkout.stripe.com/pay/cs_test_123',\n      });\n\n      expect(mockStripe.customers.create).toHaveBeenCalledWith({\n        email: testUser.email,\n        metadata: {\n          organizationId: testOrganization.id,\n          userId: testUser.id,\n        },\n      });\n\n      expect(mockStripe.checkout.sessions.create).toHaveBeenCalledWith(\n        expect.objectContaining({\n          customer: 'cus_test_new',\n          line_items: [\n            {\n              price: 'price_pro',\n              quantity: 1,\n            },\n          ],\n          mode: 'subscription',\n          success_url: expect.any(String),\n          cancel_url: expect.any(String),\n        })\n      );\n    });\n\n    it('should handle upgrade/downgrade for existing subscription', async () => {\n      const mockOrg = {\n        ...testOrganization,\n        stripeCustomerId: 'cus_test_123',\n        stripeSubscriptionId: 'sub_test_123',\n      };\n\n      (prisma.organization.findUnique as jest.Mock).mockResolvedValue(mockOrg);\n\n      const response = await request(app)\n        .post('/api/billing/checkout')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .send({\n          priceId: 'price_enterprise',\n          successUrl: 'https://app.example.com/billing/success',\n          cancelUrl: 'https://app.example.com/billing',\n        });\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        checkoutUrl: 'https://checkout.stripe.com/pay/cs_test_123',\n      });\n\n      expect(mockStripe.checkout.sessions.create).toHaveBeenCalledWith(\n        expect.objectContaining({\n          mode: 'subscription',\n          subscription_data: {\n            metadata: {\n              replaces: 'sub_test_123',\n            },\n          },\n        })\n      );\n    });\n\n    it('should validate price ID', async () => {\n      const response = await request(app)\n        .post('/api/billing/checkout')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .send({\n          priceId: '',\n          successUrl: 'https://app.example.com/billing/success',\n          cancelUrl: 'https://app.example.com/billing',\n        });\n\n      expect(response.status).toBe(400);\n      expect(response.body).toEqual({\n        error: 'Price ID is required',\n      });\n    });\n  });\n\n  describe('POST /api/billing/cancel', () => {\n    it('should cancel subscription at period end', async () => {\n      const mockOrg = {\n        ...testOrganization,\n        stripeCustomerId: 'cus_test_123',\n        stripeSubscriptionId: 'sub_test_123',\n      };\n\n      (prisma.organization.findUnique as jest.Mock).mockResolvedValue(mockOrg);\n\n      const response = await request(app)\n        .post('/api/billing/cancel')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        message: 'Subscription canceled successfully',\n        cancelAtPeriodEnd: true,\n      });\n\n      expect(mockStripe.subscriptions.cancel).toHaveBeenCalledWith(\n        'sub_test_123',\n        {\n          cancel_at_period_end: true,\n        }\n      );\n    });\n\n    it('should return 404 if no subscription exists', async () => {\n      const mockOrg = {\n        ...testOrganization,\n        stripeCustomerId: 'cus_test_123',\n        stripeSubscriptionId: null,\n      };\n\n      (prisma.organization.findUnique as jest.Mock).mockResolvedValue(mockOrg);\n\n      const response = await request(app)\n        .post('/api/billing/cancel')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(404);\n      expect(response.body).toEqual({\n        error: 'No active subscription found',\n      });\n    });\n  });\n\n  describe('POST /api/billing/reactivate', () => {\n    it('should reactivate canceled subscription', async () => {\n      const mockOrg = {\n        ...testOrganization,\n        stripeCustomerId: 'cus_test_123',\n        stripeSubscriptionId: 'sub_test_123',\n      };\n\n      (prisma.organization.findUnique as jest.Mock).mockResolvedValue(mockOrg);\n      mockStripe.subscriptions.retrieve.mockResolvedValueOnce({\n        id: 'sub_test_123',\n        cancel_at_period_end: true,\n      });\n\n      mockStripe.subscriptions.update.mockResolvedValueOnce({\n        id: 'sub_test_123',\n        cancel_at_period_end: false,\n      });\n\n      const response = await request(app)\n        .post('/api/billing/reactivate')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        message: 'Subscription reactivated successfully',\n      });\n\n      expect(mockStripe.subscriptions.update).toHaveBeenCalledWith(\n        'sub_test_123',\n        {\n          cancel_at_period_end: false,\n        }\n      );\n    });\n  });\n\n  describe('GET /api/billing/portal', () => {\n    it('should create billing portal session', async () => {\n      const mockOrg = {\n        ...testOrganization,\n        stripeCustomerId: 'cus_test_123',\n      };\n\n      (prisma.organization.findUnique as jest.Mock).mockResolvedValue(mockOrg);\n\n      const response = await request(app)\n        .get('/api/billing/portal')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .query({ returnUrl: 'https://app.example.com/billing' });\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        portalUrl: 'https://billing.stripe.com/session/test_123',\n      });\n\n      expect(mockStripe.billingPortal.sessions.create).toHaveBeenCalledWith({\n        customer: 'cus_test_123',\n        return_url: 'https://app.example.com/billing',\n      });\n    });\n\n    it('should return 404 if no Stripe customer exists', async () => {\n      const mockOrg = {\n        ...testOrganization,\n        stripeCustomerId: null,\n      };\n\n      (prisma.organization.findUnique as jest.Mock).mockResolvedValue(mockOrg);\n\n      const response = await request(app)\n        .get('/api/billing/portal')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(404);\n      expect(response.body).toEqual({\n        error: 'No billing account found',\n      });\n    });\n  });\n\n  describe('GET /api/billing/invoices', () => {\n    it('should return invoice history', async () => {\n      const mockOrg = {\n        ...testOrganization,\n        stripeCustomerId: 'cus_test_123',\n      };\n\n      (prisma.organization.findUnique as jest.Mock).mockResolvedValue(mockOrg);\n\n      const response = await request(app)\n        .get('/api/billing/invoices')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        invoices: expect.arrayContaining([\n          expect.objectContaining({\n            id: 'inv_test_1',\n            amount: 99,\n            status: 'paid',\n            date: expect.any(String),\n            downloadUrl: 'https://stripe.com/invoice.pdf',\n          }),\n        ]),\n      });\n\n      expect(mockStripe.invoices.list).toHaveBeenCalledWith({\n        customer: 'cus_test_123',\n        limit: 100,\n      });\n    });\n\n    it('should include upcoming invoice', async () => {\n      const mockOrg = {\n        ...testOrganization,\n        stripeCustomerId: 'cus_test_123',\n      };\n\n      (prisma.organization.findUnique as jest.Mock).mockResolvedValue(mockOrg);\n\n      const response = await request(app)\n        .get('/api/billing/invoices')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        )\n        .query({ includeUpcoming: true });\n\n      expect(response.status).toBe(200);\n      expect(response.body.upcoming).toMatchObject({\n        amount: 99,\n        date: expect.any(String),\n      });\n\n      expect(mockStripe.invoices.upcoming).toHaveBeenCalledWith({\n        customer: 'cus_test_123',\n      });\n    });\n  });\n\n  describe('GET /api/billing/payment-methods', () => {\n    it('should return payment methods', async () => {\n      const mockOrg = {\n        ...testOrganization,\n        stripeCustomerId: 'cus_test_123',\n      };\n\n      (prisma.organization.findUnique as jest.Mock).mockResolvedValue(mockOrg);\n\n      const response = await request(app)\n        .get('/api/billing/payment-methods')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        paymentMethods: expect.arrayContaining([\n          expect.objectContaining({\n            id: 'pm_test_123',\n            type: 'card',\n            card: {\n              brand: 'visa',\n              last4: '4242',\n              expMonth: 12,\n              expYear: 2025,\n            },\n          }),\n        ]),\n      });\n    });\n  });\n\n  describe('POST /api/billing/webhook', () => {\n    it('should handle subscription created webhook', async () => {\n      const webhookEvent = {\n        type: 'customer.subscription.created',\n        data: {\n          object: {\n            id: 'sub_test_new',\n            customer: 'cus_test_123',\n            status: 'active',\n            items: {\n              data: [\n                {\n                  price: {\n                    metadata: { plan: 'PRO' },\n                  },\n                },\n              ],\n            },\n          },\n        },\n      };\n\n      mockStripe.webhooks.constructEvent.mockReturnValue(webhookEvent);\n\n      const mockOrg = {\n        ...testOrganization,\n        stripeCustomerId: 'cus_test_123',\n      };\n\n      (prisma.organization.findFirst as jest.Mock).mockResolvedValue(mockOrg);\n      (prisma.organization.update as jest.Mock).mockResolvedValue({\n        ...mockOrg,\n        stripeSubscriptionId: 'sub_test_new',\n        plan: 'PRO',\n      });\n\n      const response = await request(app)\n        .post('/api/billing/webhook')\n        .set('stripe-signature', 'test_signature')\n        .send(webhookEvent);\n\n      expect(response.status).toBe(200);\n      expect(response.body).toEqual({ received: true });\n\n      expect(prisma.organization.update).toHaveBeenCalledWith({\n        where: { id: mockOrg.id },\n        data: {\n          stripeSubscriptionId: 'sub_test_new',\n          plan: 'PRO',\n        },\n      });\n    });\n\n    it('should handle subscription deleted webhook', async () => {\n      const webhookEvent = {\n        type: 'customer.subscription.deleted',\n        data: {\n          object: {\n            id: 'sub_test_123',\n            customer: 'cus_test_123',\n          },\n        },\n      };\n\n      mockStripe.webhooks.constructEvent.mockReturnValue(webhookEvent);\n\n      const mockOrg = {\n        ...testOrganization,\n        stripeCustomerId: 'cus_test_123',\n        stripeSubscriptionId: 'sub_test_123',\n      };\n\n      (prisma.organization.findFirst as jest.Mock).mockResolvedValue(mockOrg);\n      (prisma.organization.update as jest.Mock).mockResolvedValue({\n        ...mockOrg,\n        stripeSubscriptionId: null,\n        plan: 'FREE',\n      });\n\n      const response = await request(app)\n        .post('/api/billing/webhook')\n        .set('stripe-signature', 'test_signature')\n        .send(webhookEvent);\n\n      expect(response.status).toBe(200);\n\n      expect(prisma.organization.update).toHaveBeenCalledWith({\n        where: { id: mockOrg.id },\n        data: {\n          stripeSubscriptionId: null,\n          plan: 'FREE',\n        },\n      });\n    });\n\n    it('should handle payment failed webhook', async () => {\n      const webhookEvent = {\n        type: 'invoice.payment_failed',\n        data: {\n          object: {\n            id: 'inv_test_failed',\n            customer: 'cus_test_123',\n            subscription: 'sub_test_123',\n          },\n        },\n      };\n\n      mockStripe.webhooks.constructEvent.mockReturnValue(webhookEvent);\n\n      const mockOrg = {\n        ...testOrganization,\n        stripeCustomerId: 'cus_test_123',\n      };\n\n      (prisma.organization.findFirst as jest.Mock).mockResolvedValue(mockOrg);\n\n      // Mock email service\n      const { sendEmail } = require('../../src/services/emailService');\n      jest.mock('../../src/services/emailService', () => ({\n        sendEmail: jest.fn(),\n      }));\n\n      const response = await request(app)\n        .post('/api/billing/webhook')\n        .set('stripe-signature', 'test_signature')\n        .send(webhookEvent);\n\n      expect(response.status).toBe(200);\n    });\n\n    it('should return 400 for invalid webhook signature', async () => {\n      mockStripe.webhooks.constructEvent.mockImplementation(() => {\n        throw new Error('Invalid signature');\n      });\n\n      const response = await request(app)\n        .post('/api/billing/webhook')\n        .set('stripe-signature', 'invalid_signature')\n        .send({});\n\n      expect(response.status).toBe(400);\n      expect(response.body).toEqual({\n        error: 'Webhook signature verification failed',\n      });\n    });\n  });\n\n  describe('GET /api/billing/usage', () => {\n    it('should return usage statistics', async () => {\n      const mockUsage = {\n        chats: 1500,\n        storage: 2.5, // GB\n        users: 25,\n        limits: {\n          chats: 5000,\n          storage: 10,\n          users: 50,\n        },\n      };\n\n      (prisma.chatLog.count as jest.Mock).mockResolvedValue(mockUsage.chats);\n      (prisma.knowledgeBase.aggregate as jest.Mock).mockResolvedValue({\n        _sum: { fileSize: mockUsage.storage * 1024 * 1024 * 1024 },\n      });\n      (prisma.user.count as jest.Mock).mockResolvedValue(mockUsage.users);\n\n      const response = await request(app)\n        .get('/api/billing/usage')\n        .set(\n          'Authorization',\n          `Bearer ${generateTestToken(testUser.id, testOrganization.id)}`\n        );\n\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        usage: {\n          chats: {\n            used: mockUsage.chats,\n            limit: mockUsage.limits.chats,\n            percentage: 30,\n          },\n          storage: {\n            used: mockUsage.storage,\n            limit: mockUsage.limits.storage,\n            percentage: 25,\n          },\n          users: {\n            used: mockUsage.users,\n            limit: mockUsage.limits.users,\n            percentage: 50,\n          },\n        },\n      });\n    });\n  });\n});\n"],"version":3}