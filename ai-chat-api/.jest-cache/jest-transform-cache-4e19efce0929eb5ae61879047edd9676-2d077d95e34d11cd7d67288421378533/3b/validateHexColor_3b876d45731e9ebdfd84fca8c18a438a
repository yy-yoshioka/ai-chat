c53c1f6ea54a9d089e498ca9b6c222a0
"use strict";

/* istanbul ignore next */
function cov_2dhypozyz7() {
  var path = "/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/utils/validateHexColor.ts";
  var hash = "89c365df89bb1ee577f243810bdaf28dc3eb053c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/utils/validateHexColor.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 61
        }
      },
      "2": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 43
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 44
        }
      },
      "4": {
        start: {
          line: 19,
          column: 20
        },
        end: {
          line: 19,
          column: 32
        }
      },
      "5": {
        start: {
          line: 20,
          column: 21
        },
        end: {
          line: 20,
          column: 70
        }
      },
      "6": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 23,
          column: 5
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 24,
          column: 16
        }
      },
      "9": {
        start: {
          line: 26,
          column: 0
        },
        end: {
          line: 26,
          column: 44
        }
      }
    },
    fnMap: {
      "0": {
        name: "validateHexColor",
        decl: {
          start: {
            line: 9,
            column: 9
          },
          end: {
            line: 9,
            column: 25
          }
        },
        loc: {
          start: {
            line: 9,
            column: 33
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 9
      },
      "1": {
        name: "sanitizeHexColor",
        decl: {
          start: {
            line: 18,
            column: 9
          },
          end: {
            line: 18,
            column: 25
          }
        },
        loc: {
          start: {
            line: 18,
            column: 33
          },
          end: {
            line: 25,
            column: 1
          }
        },
        line: 18
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 20,
            column: 21
          },
          end: {
            line: 20,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 20,
            column: 47
          },
          end: {
            line: 20,
            column: 54
          }
        }, {
          start: {
            line: 20,
            column: 57
          },
          end: {
            line: 20,
            column: 70
          }
        }],
        line: 20
      },
      "1": {
        loc: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/utils/validateHexColor.ts",
      mappings: ";;;AAAA;;;;GAIG;AACH,SAAgB,gBAAgB,CAAC,KAAa;IAC5C,OAAO,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACzC,CAAC;AAFD,4CAEC;AAED;;;;GAIG;AACH,SAAgB,gBAAgB,CAAC,KAAa;IAC5C,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;IAC7B,MAAM,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE,CAAC;IAEnE,IAAI,gBAAgB,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC/B,OAAO,QAAQ,CAAC,WAAW,EAAE,CAAC;IAChC,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AATD,4CASC",
      names: [],
      sources: ["/Users/yusukeyoshioka/projects/youtube/ai-chat/ai-chat-api/src/utils/validateHexColor.ts"],
      sourcesContent: ["/**\n * Validate hex color format\n * @param color The color string to validate\n * @returns True if the color is a valid 6-digit hex color (e.g., #FF0000)\n */\nexport function validateHexColor(color: string): boolean {\n  return /^#[0-9A-Fa-f]{6}$/.test(color);\n}\n\n/**\n * Sanitize hex color by ensuring it starts with # and is uppercase\n * @param color The color string to sanitize\n * @returns Sanitized color string or null if invalid\n */\nexport function sanitizeHexColor(color: string): string | null {\n  const trimmed = color.trim();\n  const withHash = trimmed.startsWith('#') ? trimmed : `#${trimmed}`;\n\n  if (validateHexColor(withHash)) {\n    return withHash.toUpperCase();\n  }\n\n  return null;\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "89c365df89bb1ee577f243810bdaf28dc3eb053c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2dhypozyz7 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2dhypozyz7();
cov_2dhypozyz7().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2dhypozyz7().s[1]++;
exports.sanitizeHexColor = exports.validateHexColor = void 0;
/**
 * Validate hex color format
 * @param color The color string to validate
 * @returns True if the color is a valid 6-digit hex color (e.g., #FF0000)
 */
function validateHexColor(color) {
  /* istanbul ignore next */
  cov_2dhypozyz7().f[0]++;
  cov_2dhypozyz7().s[2]++;
  return /^#[0-9A-Fa-f]{6}$/.test(color);
}
/* istanbul ignore next */
cov_2dhypozyz7().s[3]++;
exports.validateHexColor = validateHexColor;
/**
 * Sanitize hex color by ensuring it starts with # and is uppercase
 * @param color The color string to sanitize
 * @returns Sanitized color string or null if invalid
 */
function sanitizeHexColor(color) {
  /* istanbul ignore next */
  cov_2dhypozyz7().f[1]++;
  const trimmed =
  /* istanbul ignore next */
  (cov_2dhypozyz7().s[4]++, color.trim());
  const withHash =
  /* istanbul ignore next */
  (cov_2dhypozyz7().s[5]++, trimmed.startsWith('#') ?
  /* istanbul ignore next */
  (cov_2dhypozyz7().b[0][0]++, trimmed) :
  /* istanbul ignore next */
  (cov_2dhypozyz7().b[0][1]++, `#${trimmed}`));
  /* istanbul ignore next */
  cov_2dhypozyz7().s[6]++;
  if (validateHexColor(withHash)) {
    /* istanbul ignore next */
    cov_2dhypozyz7().b[1][0]++;
    cov_2dhypozyz7().s[7]++;
    return withHash.toUpperCase();
  } else
  /* istanbul ignore next */
  {
    cov_2dhypozyz7().b[1][1]++;
  }
  cov_2dhypozyz7().s[8]++;
  return null;
}
/* istanbul ignore next */
cov_2dhypozyz7().s[9]++;
exports.sanitizeHexColor = sanitizeHexColor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ2YWxpZGF0ZUhleENvbG9yIiwiY29sb3IiLCJjb3ZfMmRoeXBvenl6NyIsImYiLCJzIiwidGVzdCIsImV4cG9ydHMiLCJzYW5pdGl6ZUhleENvbG9yIiwidHJpbW1lZCIsInRyaW0iLCJ3aXRoSGFzaCIsInN0YXJ0c1dpdGgiLCJiIiwidG9VcHBlckNhc2UiXSwic291cmNlcyI6WyIvVXNlcnMveXVzdWtleW9zaGlva2EvcHJvamVjdHMveW91dHViZS9haS1jaGF0L2FpLWNoYXQtYXBpL3NyYy91dGlscy92YWxpZGF0ZUhleENvbG9yLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVmFsaWRhdGUgaGV4IGNvbG9yIGZvcm1hdFxuICogQHBhcmFtIGNvbG9yIFRoZSBjb2xvciBzdHJpbmcgdG8gdmFsaWRhdGVcbiAqIEByZXR1cm5zIFRydWUgaWYgdGhlIGNvbG9yIGlzIGEgdmFsaWQgNi1kaWdpdCBoZXggY29sb3IgKGUuZy4sICNGRjAwMDApXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUhleENvbG9yKGNvbG9yOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIC9eI1swLTlBLUZhLWZdezZ9JC8udGVzdChjb2xvcik7XG59XG5cbi8qKlxuICogU2FuaXRpemUgaGV4IGNvbG9yIGJ5IGVuc3VyaW5nIGl0IHN0YXJ0cyB3aXRoICMgYW5kIGlzIHVwcGVyY2FzZVxuICogQHBhcmFtIGNvbG9yIFRoZSBjb2xvciBzdHJpbmcgdG8gc2FuaXRpemVcbiAqIEByZXR1cm5zIFNhbml0aXplZCBjb2xvciBzdHJpbmcgb3IgbnVsbCBpZiBpbnZhbGlkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzYW5pdGl6ZUhleENvbG9yKGNvbG9yOiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHtcbiAgY29uc3QgdHJpbW1lZCA9IGNvbG9yLnRyaW0oKTtcbiAgY29uc3Qgd2l0aEhhc2ggPSB0cmltbWVkLnN0YXJ0c1dpdGgoJyMnKSA/IHRyaW1tZWQgOiBgIyR7dHJpbW1lZH1gO1xuXG4gIGlmICh2YWxpZGF0ZUhleENvbG9yKHdpdGhIYXNoKSkge1xuICAgIHJldHVybiB3aXRoSGFzaC50b1VwcGVyQ2FzZSgpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7OztBQUtBLFNBQWdCQSxnQkFBZ0JBLENBQUNDLEtBQWE7RUFBQTtFQUFBQyxjQUFBLEdBQUFDLENBQUE7RUFBQUQsY0FBQSxHQUFBRSxDQUFBO0VBQzVDLE9BQU8sbUJBQW1CLENBQUNDLElBQUksQ0FBQ0osS0FBSyxDQUFDO0FBQ3hDO0FBQUM7QUFBQUMsY0FBQSxHQUFBRSxDQUFBO0FBRkRFLE9BQUEsQ0FBQU4sZ0JBQUEsR0FBQUEsZ0JBQUE7QUFJQTs7Ozs7QUFLQSxTQUFnQk8sZ0JBQWdCQSxDQUFDTixLQUFhO0VBQUE7RUFBQUMsY0FBQSxHQUFBQyxDQUFBO0VBQzVDLE1BQU1LLE9BQU87RUFBQTtFQUFBLENBQUFOLGNBQUEsR0FBQUUsQ0FBQSxPQUFHSCxLQUFLLENBQUNRLElBQUksRUFBRTtFQUM1QixNQUFNQyxRQUFRO0VBQUE7RUFBQSxDQUFBUixjQUFBLEdBQUFFLENBQUEsT0FBR0ksT0FBTyxDQUFDRyxVQUFVLENBQUMsR0FBRyxDQUFDO0VBQUE7RUFBQSxDQUFBVCxjQUFBLEdBQUFVLENBQUEsVUFBR0osT0FBTztFQUFBO0VBQUEsQ0FBQU4sY0FBQSxHQUFBVSxDQUFBLFVBQUcsSUFBSUosT0FBTyxFQUFFO0VBQUM7RUFBQU4sY0FBQSxHQUFBRSxDQUFBO0VBRW5FLElBQUlKLGdCQUFnQixDQUFDVSxRQUFRLENBQUMsRUFBRTtJQUFBO0lBQUFSLGNBQUEsR0FBQVUsQ0FBQTtJQUFBVixjQUFBLEdBQUFFLENBQUE7SUFDOUIsT0FBT00sUUFBUSxDQUFDRyxXQUFXLEVBQUU7RUFDL0IsQ0FBQztFQUFBO0VBQUE7SUFBQVgsY0FBQSxHQUFBVSxDQUFBO0VBQUE7RUFBQVYsY0FBQSxHQUFBRSxDQUFBO0VBRUQsT0FBTyxJQUFJO0FBQ2I7QUFBQztBQUFBRixjQUFBLEdBQUFFLENBQUE7QUFUREUsT0FBQSxDQUFBQyxnQkFBQSxHQUFBQSxnQkFBQSIsImlnbm9yZUxpc3QiOltdfQ==