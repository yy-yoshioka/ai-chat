98cbe31a0e8c6af1dbcadeb6cc9bfc11
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const jwt_1 = require("../../../src/utils/jwt");
describe('JWT Utils', () => {
    let mockResponse;
    beforeEach(() => {
        mockResponse = {
            cookie: jest.fn(),
        };
    });
    describe('signToken', () => {
        it('should sign a token and set cookie', () => {
            const user = { id: '123', email: 'test@example.com', isAdmin: false };
            const token = (0, jwt_1.signToken)(user, mockResponse);
            expect(token).toBeDefined();
            expect(mockResponse.cookie).toHaveBeenCalledWith('token', token, expect.objectContaining({
                httpOnly: true,
                maxAge: 7 * 24 * 60 * 60 * 1000,
                secure: false, // NODE_ENV is test
                sameSite: 'lax',
            }));
        });
        it('should set secure cookie in production', () => {
            const originalEnv = process.env.NODE_ENV;
            process.env.NODE_ENV = 'production';
            const user = { id: '123', email: 'test@example.com' };
            (0, jwt_1.signToken)(user, mockResponse);
            expect(mockResponse.cookie).toHaveBeenCalledWith('token', expect.any(String), expect.objectContaining({
                secure: true,
                sameSite: 'strict',
            }));
            process.env.NODE_ENV = originalEnv;
        });
        it('should throw error if JWT_SECRET is not defined', () => {
            const originalSecret = process.env.JWT_SECRET;
            delete process.env.JWT_SECRET;
            expect(() => {
                (0, jwt_1.signToken)({ id: '123', email: 'test@example.com' }, mockResponse);
            }).toThrow('JWT_SECRET is not defined');
            process.env.JWT_SECRET = originalSecret;
        });
    });
    describe('verifyToken', () => {
        it('should verify a valid token', () => {
            const payload = { id: '123', email: 'test@example.com' };
            const token = jsonwebtoken_1.default.sign(payload, process.env.JWT_SECRET);
            const decoded = (0, jwt_1.verifyToken)(token);
            expect(decoded.id).toBe(payload.id);
            expect(decoded.email).toBe(payload.email);
        });
        it('should throw error for invalid token', () => {
            expect(() => {
                (0, jwt_1.verifyToken)('invalid-token');
            }).toThrow('Invalid token');
        });
        it('should throw error for expired token', () => {
            const token = jsonwebtoken_1.default.sign({ id: '123', email: 'test@example.com' }, process.env.JWT_SECRET, { expiresIn: '-1s' });
            expect(() => {
                (0, jwt_1.verifyToken)(token);
            }).toThrow('Invalid token');
        });
        it('should throw error if JWT_SECRET is not defined', () => {
            const originalSecret = process.env.JWT_SECRET;
            delete process.env.JWT_SECRET;
            expect(() => {
                (0, jwt_1.verifyToken)('some-token');
            }).toThrow('JWT_SECRET is not defined');
            process.env.JWT_SECRET = originalSecret;
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,