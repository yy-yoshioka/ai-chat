openapi: 3.0.3
info:
  title: AI Chat API
  description: |
    AI Chat API provides endpoints for managing chatbots, knowledge bases, analytics, and more.
    
    ## Authentication
    All API endpoints require authentication using Bearer tokens.
    
    ## Rate Limiting
    API calls are rate limited to 1000 requests per hour per organization.
    
    ## Webhooks
    The API supports webhooks for real-time event notifications.
  version: 1.0.0
  contact:
    name: API Support
    email: support@ai-chat.com
    url: https://docs.ai-chat.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.ai-chat.com/v1
    description: Production server
  - url: https://staging-api.ai-chat.com/v1
    description: Staging server
  - url: http://localhost:3001/v1
    description: Development server

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from /auth/login

  schemas:
    # Error schemas
    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          example: "validation_error"
        message:
          type: string
          example: "Invalid input data"
        details:
          type: array
          items:
            type: object

    # Auth schemas
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          minLength: 8
          example: "password123"

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/User'
        organization:
          $ref: '#/components/schemas/Organization'

    # User schemas
    User:
      type: object
      properties:
        id:
          type: string
          example: "clp123abc"
        email:
          type: string
          format: email
        name:
          type: string
        roles:
          type: array
          items:
            type: string
            enum: [owner, org_admin, editor, viewer]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # Organization schemas
    Organization:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        slug:
          type: string
        settings:
          type: object
        createdAt:
          type: string
          format: date-time

    # Widget schemas
    Widget:
      type: object
      properties:
        id:
          type: string
        widgetKey:
          type: string
        name:
          type: string
        companyId:
          type: string
        isActive:
          type: boolean
        theme:
          type: string
          enum: [light, dark, auto]
        primaryColor:
          type: string
          pattern: "^#[0-9A-Fa-f]{6}$"
        createdAt:
          type: string
          format: date-time

    CreateWidgetRequest:
      type: object
      required:
        - name
        - companyId
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        companyId:
          type: string
        theme:
          type: string
          enum: [light, dark, auto]
          default: light
        primaryColor:
          type: string
          pattern: "^#[0-9A-Fa-f]{6}$"
          default: "#007bff"

    # Chat schemas
    ChatMessage:
      type: object
      properties:
        id:
          type: string
        question:
          type: string
        answer:
          type: string
        tokens:
          type: integer
        userId:
          type: string
        widgetId:
          type: string
        createdAt:
          type: string
          format: date-time

    SendMessageRequest:
      type: object
      required:
        - message
        - widgetKey
      properties:
        message:
          type: string
          minLength: 1
          maxLength: 2000
        widgetKey:
          type: string
        userId:
          type: string

    # Knowledge Base schemas
    KnowledgeBase:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          enum: [file, url, text]
        source:
          type: string
        status:
          type: string
          enum: [pending, processing, completed, failed]
        chunks:
          type: integer
        error:
          type: string
        createdAt:
          type: string
          format: date-time

    # Webhook schemas
    Webhook:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        url:
          type: string
          format: uri
        events:
          type: array
          items:
            type: string
            enum: [message.created, user.registered, chat.completed]
        isActive:
          type: boolean
        retryCount:
          type: integer
          minimum: 1
          maximum: 5
        timeout:
          type: integer
          minimum: 1000
          maximum: 60000

    # Analytics schemas
    AnalyticsData:
      type: object
      properties:
        totalMessages:
          type: integer
        totalUsers:
          type: integer
        avgSatisfaction:
          type: number
          format: float
        responseTime:
          type: number
          format: float
        period:
          type: string

paths:
  # Authentication endpoints
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and receive JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Invalidate JWT token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
        '401':
          description: Unauthorized

  # Widget endpoints
  /widgets:
    get:
      tags:
        - Widgets
      summary: List widgets
      description: Get all widgets for the authenticated organization
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: List of widgets
          content:
            application/json:
              schema:
                type: object
                properties:
                  widgets:
                    type: array
                    items:
                      $ref: '#/components/schemas/Widget'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      totalPages:
                        type: integer

    post:
      tags:
        - Widgets
      summary: Create widget
      description: Create a new chat widget
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWidgetRequest'
      responses:
        '201':
          description: Widget created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Widget'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /widgets/{widgetId}:
    get:
      tags:
        - Widgets
      summary: Get widget
      description: Get widget by ID
      security:
        - bearerAuth: []
      parameters:
        - name: widgetId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Widget details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Widget'
        '404':
          description: Widget not found

    put:
      tags:
        - Widgets
      summary: Update widget
      description: Update widget configuration
      security:
        - bearerAuth: []
      parameters:
        - name: widgetId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWidgetRequest'
      responses:
        '200':
          description: Widget updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Widget'

    delete:
      tags:
        - Widgets
      summary: Delete widget
      description: Delete a widget
      security:
        - bearerAuth: []
      parameters:
        - name: widgetId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Widget deleted successfully
        '404':
          description: Widget not found

  # Chat endpoints
  /chat:
    post:
      tags:
        - Chat
      summary: Send message
      description: Send a message to the chatbot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
      responses:
        '200':
          description: Chat response
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                  messageId:
                    type: string
                  tokens:
                    type: integer

  /chat/history:
    get:
      tags:
        - Chat
      summary: Get chat history
      description: Get chat message history for a widget
      security:
        - bearerAuth: []
      parameters:
        - name: widgetId
          in: query
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
      responses:
        '200':
          description: Chat history
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChatMessage'

  # Knowledge Base endpoints
  /knowledge-base:
    get:
      tags:
        - Knowledge Base
      summary: List knowledge bases
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of knowledge bases
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KnowledgeBase'

    post:
      tags:
        - Knowledge Base
      summary: Upload knowledge base
      description: Upload a file or URL to the knowledge base
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                name:
                  type: string
                type:
                  type: string
                  enum: [file, url]
      responses:
        '201':
          description: Knowledge base created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeBase'

  # Webhooks endpoints
  /webhooks:
    get:
      tags:
        - Webhooks
      summary: List webhooks
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of webhooks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Webhook'

    post:
      tags:
        - Webhooks
      summary: Create webhook
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - url
                - events
              properties:
                name:
                  type: string
                url:
                  type: string
                  format: uri
                events:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Webhook created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'

  # Analytics endpoints
  /analytics:
    get:
      tags:
        - Analytics
      summary: Get analytics data
      security:
        - bearerAuth: []
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [24h, 7d, 30d]
            default: 7d
        - name: widgetId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Analytics data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticsData'

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Widgets
    description: Chat widget management
  - name: Chat
    description: Chat messaging and history
  - name: Knowledge Base
    description: Knowledge base management
  - name: Webhooks
    description: Webhook configuration and management
  - name: Analytics
    description: Analytics and reporting

externalDocs:
  description: Find more info here
  url: https://docs.ai-chat.com