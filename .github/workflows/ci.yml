# name: CI/CD Pipeline

# on:
#   push:
#     branches: [main, develop, feature/*]
#   pull_request:
#     branches: [main, develop]

# env:
#   NODE_VERSION: "20"
#   POSTGRES_VERSION: "15"

# jobs:
#   test:
#     name: Test & Lint
#     runs-on: ubuntu-latest

#     services:
#       postgres:
#         image: postgres:15
#         env:
#           POSTGRES_PASSWORD: postgres
#           POSTGRES_DB: test_db
#         options: >-
#           --health-cmd pg_isready
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5
#         ports:
#           - 5432:5432

#       redis:
#         image: redis:7
#         options: >-
#           --health-cmd "redis-cli ping"
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5
#         ports:
#           - 6379:6379

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: ${{ env.NODE_VERSION }}
#           cache: "yarn"

#       - name: Install dependencies
#         run: |
#           yarn install --frozen-lockfile
#           cd ai-chat-api && yarn install --frozen-lockfile
#           cd ../ai-chat-ui && yarn install --frozen-lockfile

#       - name: Setup test database
#         env:
#           DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db?schema=public
#         run: |
#           cd ai-chat-api
#           npx prisma migrate deploy
#           npx prisma generate

#       - name: Run tests
#         env:
#           DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db?schema=public
#           REDIS_URL: redis://localhost:6379
#           JWT_SECRET: test-secret-key
#           OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
#         run: |
#           yarn test

#       - name: Run linting
#         run: |
#           yarn lint

#       - name: Run type checking
#         run: |
#           yarn build

#   migrate:
#     name: Database Migration
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#     needs: test

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: ${{ env.NODE_VERSION }}
#           cache: "yarn"

#       - name: Install dependencies
#         run: |
#           cd ai-chat-api
#           yarn install --frozen-lockfile

#       - name: Run database migrations
#         env:
#           DATABASE_URL: ${{ secrets.DATABASE_URL }}
#         run: |
#           cd ai-chat-api
#           npx prisma migrate deploy
#           npx prisma generate

#   deploy:
#     name: Deploy to Production
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#     needs: [test, migrate]

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Deploy to production
#         env:
#           DEPLOY_HOOK_URL: ${{ secrets.DEPLOY_HOOK_URL }}
#         run: |
#           if [ -n "$DEPLOY_HOOK_URL" ]; then
#             curl -X POST "$DEPLOY_HOOK_URL"
#           else
#             echo "No deploy hook configured"
#           fi

#   security-scan:
#     name: Security Scan
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Run security audit
#         run: |
#           cd ai-chat-api && yarn audit --level moderate
#           cd ../ai-chat-ui && yarn audit --level moderate

#       - name: Run dependency check
#         uses: actions/dependency-review-action@v3
#         if: github.event_name == 'pull_request'
